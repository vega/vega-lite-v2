{"version":3,"file":"spec.test.js","sourceRoot":"","sources":["../../test/spec.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {assert} from 'chai';\n\nimport {Field, FieldDef} from '../src/fielddef';\nimport {LocalLogger} from '../src/log';\nimport * as log from '../src/log';\nimport {fieldDefs, normalize, NormalizedSpec, TopLevel, TopLevelSpec} from '../src/spec';\nimport {defaultConfig, initConfig} from './../src/config';\n\n// describe('isStacked()') -- tested as part of stackOffset in stack.test.ts\n\ndescribe('normalize()', function () {\n  describe('normalizeFacetedUnit', () => {\n    it('should convert single extended spec with column into a composite spec', function() {\n      const spec: any = {\n        \"name\": \"faceted\",\n        \"width\": 123,\n        \"height\": 234,\n        \"description\": \"faceted spec\",\n        \"data\": {\"url\": \"data/movies.json\"},\n        \"mark\": \"point\",\n        \"encoding\": {\n          \"column\": {\"field\": \"MPAA_Rating\",\"type\": \"ordinal\"},\n          \"x\": {\"field\": \"Worldwide_Gross\",\"type\": \"quantitative\"},\n          \"y\": {\"field\": \"US_DVD_Sales\",\"type\": \"quantitative\"}\n        }\n      };\n      const config = initConfig(spec.config);\n      assert.deepEqual(normalize(spec, config), {\n        \"name\": \"faceted\",\n        \"description\": \"faceted spec\",\n        \"data\": {\"url\": \"data/movies.json\"},\n        \"facet\": {\n          \"column\": {\"field\": \"MPAA_Rating\",\"type\": \"ordinal\"}\n        },\n        \"spec\": {\n          \"mark\": \"point\",\n          \"width\": 123,\n          \"height\": 234,\n          \"encoding\": {\n            \"x\": {\"field\": \"Worldwide_Gross\",\"type\": \"quantitative\"},\n            \"y\": {\"field\": \"US_DVD_Sales\",\"type\": \"quantitative\"}\n          }\n        }\n      });\n    });\n\n    it('should convert single extended spec with row into a composite spec', function() {\n      const spec: any = {\n        \"data\": {\"url\": \"data/movies.json\"},\n        \"mark\": \"point\",\n        \"encoding\": {\n          \"row\": {\"field\": \"MPAA_Rating\",\"type\": \"ordinal\"},\n          \"x\": {\"field\": \"Worldwide_Gross\",\"type\": \"quantitative\"},\n          \"y\": {\"field\": \"US_DVD_Sales\",\"type\": \"quantitative\"}\n        }\n      };\n\n      const config = initConfig(spec.config);\n      assert.deepEqual(normalize(spec, config), {\n        \"data\": {\"url\": \"data/movies.json\"},\n        \"facet\": {\n          \"row\": {\"field\": \"MPAA_Rating\",\"type\": \"ordinal\"}\n        },\n        \"spec\": {\n          \"mark\": \"point\",\n          \"encoding\": {\n            \"x\": {\"field\": \"Worldwide_Gross\",\"type\": \"quantitative\"},\n            \"y\": {\"field\": \"US_DVD_Sales\",\"type\": \"quantitative\"}\n          }\n        }\n      });\n    });\n  });\n\n  describe('normalizeFacet', () => {\n    it('should produce correct layered specs for mean point and vertical error bar', () => {\n      assert.deepEqual(normalize({\n        \"description\": \"A error bar plot showing mean, min, and max in the US population distribution of age groups in 2000.\",\n        \"data\": {\"url\": \"data/population.json\"},\n        \"transform\": [{\"filter\": \"datum.year == 2000\"}],\n        facet: {\n          \"row\": {\"field\": \"MPAA_Rating\",\"type\": \"ordinal\"}\n        },\n        spec: {\n          layer: [\n            {\n              \"mark\": \"point\",\n              \"encoding\": {\n                \"x\": {\"field\": \"age\",\"type\": \"ordinal\"},\n                \"y\": {\n                  \"aggregate\": \"mean\",\n                  \"field\": \"people\",\n                  \"type\": \"quantitative\",\n                  \"axis\": {\"title\": \"population\"}\n                },\n                \"size\": {\"value\": 2}\n              }\n            },\n            {\n              mark: 'error-bar',\n              encoding: {\n                \"x\": {\"field\": \"age\",\"type\": \"ordinal\"},\n                \"y\": {\n                  \"aggregate\": \"min\",\n                  \"field\": \"people\",\n                  \"type\": \"quantitative\",\n                  \"axis\": {\"title\": \"population\"}\n                },\n                \"y2\": {\n                  \"aggregate\": \"max\",\n                  \"field\": \"people\",\n                  \"type\": \"quantitative\"\n                },\n                \"size\": {\"value\": 5}\n              }\n            }\n          ]\n        }\n      }, defaultConfig), {\n        \"description\": \"A error bar plot showing mean, min, and max in the US population distribution of age groups in 2000.\",\n        \"data\": {\"url\": \"data/population.json\"},\n        \"transform\": [{\"filter\": \"datum.year == 2000\"}],\n        facet: {\n          \"row\": {\"field\": \"MPAA_Rating\",\"type\": \"ordinal\"}\n        },\n        spec: {\n          layer: [\n            {\n              \"mark\": \"point\",\n              \"encoding\": {\n                \"x\": {\"field\": \"age\",\"type\": \"ordinal\"},\n                \"y\": {\n                  \"aggregate\": \"mean\",\n                  \"field\": \"people\",\n                  \"type\": \"quantitative\",\n                  \"axis\": {\"title\": \"population\"}\n                },\n                \"size\": {\"value\": 2}\n              }\n            },\n            {\n              \"layer\": [\n                {\n                  \"mark\": \"rule\",\n                  \"encoding\": {\n                    \"x\": {\"field\": \"age\",\"type\": \"ordinal\"},\n                    \"y\": {\n                      \"aggregate\": \"min\",\n                      \"field\": \"people\",\n                      \"type\": \"quantitative\",\n                      \"axis\": {\"title\": \"population\"}\n                    },\n                    \"y2\": {\n                      \"aggregate\": \"max\",\n                      \"field\": \"people\",\n                      \"type\": \"quantitative\"\n                    }\n                  }\n                },\n                {\n                  \"mark\": \"tick\",\n                  \"encoding\": {\n                    \"x\": {\"field\": \"age\",\"type\": \"ordinal\"},\n                    \"y\": {\n                      \"aggregate\": \"min\",\n                      \"field\": \"people\",\n                      \"type\": \"quantitative\",\n                      \"axis\": {\"title\": \"population\"}\n                    },\n                    \"size\": {\"value\": 5}\n                  }\n                },\n                {\n                  \"mark\": \"tick\",\n                  \"encoding\": {\n                    \"x\": {\"field\": \"age\",\"type\": \"ordinal\"},\n                    \"y\": {\n                      \"aggregate\": \"max\",\n                      \"field\": \"people\",\n                      \"type\": \"quantitative\",\n                      // \"axis\": {\"title\": \"population\"}\n                    },\n                    \"size\": {\"value\": 5}\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      });\n    });\n  });\n\n  describe('normalizeLayer', () => {\n    it('correctly passes shared projection and encoding to children of layer', () => {\n      const output = normalize({\n        \"data\": {\"url\": \"data/population.json\"},\n        \"projection\": {\"type\": \"mercator\"},\n        \"encoding\": {\n          \"x\": {\"field\": \"age\", \"type\": \"ordinal\"}\n        },\n        \"layer\": [\n          {\"mark\": \"point\"},\n          {\n            \"layer\": [\n              {\"mark\": \"rule\"},\n              {\n                \"mark\": \"text\",\n                \"encoding\": {\n                  \"text\": {\"field\": \"a\", \"type\": \"nominal\"}\n                }\n              }\n            ]\n          }\n        ]\n      }, defaultConfig);\n\n      assert.deepEqual(output, {\n        \"data\": {\"url\": \"data/population.json\"},\n        layer: [\n          {\n            \"projection\": {\"type\": \"mercator\"},\n            \"mark\": \"point\",\n            \"encoding\": {\n              \"x\": {\"field\": \"age\", \"type\": \"ordinal\"}\n            }\n          },\n          {\n            \"layer\": [\n              {\n                \"projection\": {\"type\": \"mercator\"},\n                \"mark\": \"rule\",\n                \"encoding\": {\n                  \"x\": {\"field\": \"age\", \"type\": \"ordinal\"}\n                }\n              },\n              {\n                \"projection\": {\"type\": \"mercator\"},\n                \"mark\": \"text\",\n                \"encoding\": {\n                  \"x\": {\"field\": \"age\", \"type\": \"ordinal\"},\n                  \"text\": {\"field\": \"a\", \"type\": \"nominal\"}\n                }\n              }\n            ]\n          }\n        ]\n      });\n    });\n\n\n    it('correctly overrides shared projection and encoding and throws warnings', log.wrap((localLogger: LocalLogger) => {\n      const output = normalize({\n        \"data\": {\"url\": \"data/population.json\"},\n        \"projection\": {\"type\": \"mercator\"},\n        \"encoding\": {\n          \"x\": {\"field\": \"age\", \"type\": \"ordinal\"}\n        },\n        \"layer\": [\n          {\n            \"projection\": {\"type\": \"albersUsa\"},\n            \"mark\": \"rule\"\n          },\n          {\n            \"mark\": \"text\",\n            \"encoding\": {\n              \"x\": {\"field\": \"a\", \"type\": \"nominal\"}\n            }\n          }\n        ]\n      }, defaultConfig);\n\n      assert.equal(localLogger.warns.length, 2);\n\n      assert.equal(localLogger.warns[0], log.message.projectionOverridden({\n        parentProjection: {\"type\": \"mercator\"},\n        projection: {\"type\": \"albersUsa\"}\n      }));\n\n      assert.equal(localLogger.warns[1], log.message.encodingOverridden(['x']));\n\n      assert.deepEqual(output, {\n        \"data\": {\"url\": \"data/population.json\"},\n        layer: [\n          {\n            \"projection\": {\"type\": \"albersUsa\"},\n            \"mark\": \"rule\",\n            \"encoding\": {\n              \"x\": {\"field\": \"age\", \"type\": \"ordinal\"}\n            }\n          },\n          {\n            \"projection\": {\"type\": \"mercator\"},\n            \"mark\": \"text\",\n            \"encoding\": {\n              \"x\": {\"field\": \"a\", \"type\": \"nominal\"},\n            }\n          }\n        ]\n      });\n    }));\n\n    it('should produce correct layered specs for mean point and vertical error bar', () => {\n      assert.deepEqual(normalize({\n        \"data\": {\"url\": \"data/population.json\"},\n        layer: [\n          {\n            \"mark\": \"point\",\n            \"encoding\": {\n              \"x\": {\"field\": \"age\",\"type\": \"ordinal\"},\n              \"y\": {\n                \"aggregate\": \"mean\",\n                \"field\": \"people\",\n                \"type\": \"quantitative\",\n                \"axis\": {\"title\": \"population\"}\n              },\n              \"size\": {\"value\": 2}\n            }\n          },\n          {\n            mark: 'error-bar',\n            encoding: {\n              \"x\": {\"field\": \"age\",\"type\": \"ordinal\"},\n              \"y\": {\n                \"aggregate\": \"min\",\n                \"field\": \"people\",\n                \"type\": \"quantitative\",\n                \"axis\": {\"title\": \"population\"}\n              },\n              \"y2\": {\n                \"aggregate\": \"max\",\n                \"field\": \"people\",\n                \"type\": \"quantitative\"\n              },\n              \"size\": {\"value\": 5}\n            }\n          }\n        ]\n      }, defaultConfig), {\n        \"data\": {\"url\": \"data/population.json\"},\n        layer: [\n          {\n            \"mark\": \"point\",\n            \"encoding\": {\n              \"x\": {\"field\": \"age\",\"type\": \"ordinal\"},\n              \"y\": {\n                \"aggregate\": \"mean\",\n                \"field\": \"people\",\n                \"type\": \"quantitative\",\n                \"axis\": {\"title\": \"population\"}\n              },\n              \"size\": {\"value\": 2}\n            }\n          },\n          {\n            \"layer\": [\n              {\n                \"mark\": \"rule\",\n                \"encoding\": {\n                  \"x\": {\"field\": \"age\",\"type\": \"ordinal\"},\n                  \"y\": {\n                    \"aggregate\": \"min\",\n                    \"field\": \"people\",\n                    \"type\": \"quantitative\",\n                    \"axis\": {\"title\": \"population\"}\n                  },\n                  \"y2\": {\n                    \"aggregate\": \"max\",\n                    \"field\": \"people\",\n                    \"type\": \"quantitative\"\n                  }\n                }\n              },\n              {\n                \"mark\": \"tick\",\n                \"encoding\": {\n                  \"x\": {\"field\": \"age\",\"type\": \"ordinal\"},\n                  \"y\": {\n                    \"aggregate\": \"min\",\n                    \"field\": \"people\",\n                    \"type\": \"quantitative\",\n                    \"axis\": {\"title\": \"population\"}\n                  },\n                  \"size\": {\"value\": 5}\n                }\n              },\n              {\n                \"mark\": \"tick\",\n                \"encoding\": {\n                  \"x\": {\"field\": \"age\",\"type\": \"ordinal\"},\n                  \"y\": {\n                    \"aggregate\": \"max\",\n                    \"field\": \"people\",\n                    \"type\": \"quantitative\",\n                    // \"axis\": {\"title\": \"population\"}\n                  },\n                  \"size\": {\"value\": 5}\n                }\n              }\n            ]\n          }\n        ]\n      });\n    });\n  });\n\n  describe('normalizePathOverlay', () => {\n    it('correctly normalizes line with overlayed point.', () => {\n      const spec: TopLevelSpec = {\n        \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n        \"mark\": \"line\",\n        \"encoding\": {\n          \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n          \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n        },\n        \"config\": {\"line\": {\"point\": {}}}\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n        \"layer\": [\n          {\n            \"mark\": \"line\",\n            \"encoding\": {\n              \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n              \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n            }\n          },\n          {\n            \"mark\": {\"type\": \"point\", \"opacity\": 1, \"filled\": true},\n            \"encoding\": {\n              \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n              \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n            }\n          }\n        ],\n        \"config\": {\"line\": {\"point\": {}}}\n      });\n    });\n\n    it('correctly normalizes line with transparent point overlayed.', () => {\n      const spec: TopLevelSpec = {\n        \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n        \"mark\": {\"type\": \"line\", \"point\": \"transparent\"},\n        \"encoding\": {\n          \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n          \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n        }\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n        \"layer\": [\n          {\n            \"mark\": \"line\",\n            \"encoding\": {\n              \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n              \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n            }\n          },\n          {\n            \"mark\": {\"type\": \"point\", \"opacity\": 0, \"filled\": true},\n            \"encoding\": {\n              \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n              \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n            }\n          }\n        ]\n      });\n    });\n\n    it('correctly normalizes line with point overlayed via mark definition.', () => {\n      const spec: TopLevelSpec = {\n        \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n        \"mark\": {\"type\": \"line\", \"point\": {\"color\": \"red\"}},\n        \"encoding\": {\n          \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n          \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n        }\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n        \"layer\": [\n          {\n            \"mark\": \"line\",\n            \"encoding\": {\n              \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n              \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n            }\n          },\n          {\n            \"mark\": {\"type\": \"point\", \"opacity\": 1, \"filled\": true, \"color\": \"red\"},\n            \"encoding\": {\n              \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n              \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n            }\n          }\n        ]\n      });\n    });\n\n    it('correctly normalizes faceted line plots with overlayed point.', () => {\n      const spec: TopLevelSpec = {\n        \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n        \"mark\": \"line\",\n        \"encoding\": {\n          \"row\": {\"field\": \"symbol\", \"type\": \"nominal\"},\n          \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n          \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n        },\n        \"config\": {\"line\": {\"point\": {}}}\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n        \"facet\": {\n          \"row\": {\"field\": \"symbol\", \"type\": \"nominal\"},\n        },\n        \"spec\": {\n          \"layer\": [\n            {\n              \"mark\": \"line\",\n              \"encoding\": {\n                \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n                \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n              }\n            },\n            {\n              \"mark\": {\"type\": \"point\", \"opacity\": 1, \"filled\": true},\n              \"encoding\": {\n                \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n                \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n              }\n            }\n          ],\n        },\n        \"config\": {\"line\": {\"point\": {}}}\n      });\n    });\n\n    it('correctly normalizes area with overlay line and point', () => {\n      const spec: TopLevelSpec = {\n        \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n        \"mark\": \"area\",\n        \"encoding\": {\n          \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n          \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n        },\n        \"config\": {\"area\": {\"line\": {}, \"point\": {}}}\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        \"data\": {\"url\": \"data/stocks.csv\",\"format\": {\"type\": \"csv\"}},\n        \"layer\": [\n          {\n            \"mark\": {\"type\": \"area\", \"opacity\": 0.7},\n            \"encoding\": {\n              \"x\": {\"field\": \"date\",\"type\": \"temporal\"},\n              \"y\": {\"field\": \"price\",\"type\": \"quantitative\"}\n            }\n          },\n          {\n            \"mark\": {\"type\": \"line\"},\n            \"encoding\": {\n              \"x\": {\"field\": \"date\",\"type\": \"temporal\"},\n              \"y\": {\"field\": \"price\",\"type\": \"quantitative\"}\n            }\n          },\n          {\n            \"mark\": {\"type\": \"point\", \"opacity\": 1, \"filled\": true},\n            \"encoding\": {\n              \"x\": {\"field\": \"date\",\"type\": \"temporal\"},\n              \"y\": {\"field\": \"price\",\"type\": \"quantitative\"}\n            }\n          }\n        ],\n        \"config\": {\"area\": {\"line\": {}, \"point\": {}}}\n      });\n    });\n\n    it('correctly normalizes interpolated area with overlay line', () => {\n      const spec: TopLevelSpec = {\n        \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n        \"mark\": {\"type\": \"area\", \"interpolate\": \"monotone\"},\n        \"encoding\": {\n          \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n          \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n        },\n        \"config\": {\"area\": {\"line\": {}}}\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        \"data\": {\"url\": \"data/stocks.csv\",\"format\": {\"type\": \"csv\"}},\n        \"layer\": [\n          {\n            \"mark\": {\"type\": \"area\", \"opacity\": 0.7, \"interpolate\": \"monotone\"},\n            \"encoding\": {\n              \"x\": {\"field\": \"date\",\"type\": \"temporal\"},\n              \"y\": {\"field\": \"price\",\"type\": \"quantitative\"}\n            }\n          },\n          {\n            \"mark\": {\"type\": \"line\", \"interpolate\": \"monotone\"},\n            \"encoding\": {\n              \"x\": {\"field\": \"date\",\"type\": \"temporal\"},\n              \"y\": {\"field\": \"price\",\"type\": \"quantitative\"}\n            }\n          }\n        ],\n        \"config\": {\"area\": {\"line\": {}}}\n      });\n    });\n\n    it('correctly normalizes area with disabled overlay point and line.', () => {\n      for (const overlay of [null, false]) {\n        const spec: TopLevelSpec = {\n          \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n          \"mark\": {\"type\": \"area\", \"point\": overlay, \"line\": overlay},\n          \"encoding\": {\n            \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n            \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n          }\n        };\n        const normalizedSpec = normalize(spec, spec.config);\n        assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n          \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n          \"mark\": \"area\",\n          \"encoding\": {\n            \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n            \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n          }\n        });\n      }\n    });\n\n    it('correctly normalizes area with overlay point and line disabled in config.', () => {\n      for (const overlay of [null, false]) {\n        const spec: TopLevelSpec = {\n          \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n          \"mark\": {\"type\": \"area\"},\n          \"encoding\": {\n            \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n            \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n          },\n          \"config\": {\n            \"area\": {\"point\": overlay, \"line\": overlay}\n          }\n        };\n        const normalizedSpec = normalize(spec, spec.config);\n        assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n          \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n          \"mark\": \"area\",\n          \"encoding\": {\n            \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n            \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n          },\n          \"config\": {\n            \"area\": {\"point\": overlay, \"line\": overlay}\n          }\n        });\n      }\n    });\n\n    it('correctly normalizes stacked area with overlay line', () => {\n      const spec: TopLevelSpec = {\n        \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n        \"mark\": \"area\",\n        \"encoding\": {\n          \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n          \"y\": {\"aggregate\": \"sum\", \"field\": \"price\", \"type\": \"quantitative\"},\n          \"color\": {\"field\": \"symbol\", \"type\": \"nominal\"}\n        },\n        \"config\": {\"area\": {\"line\": {}}}\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        \"data\": {\"url\": \"data/stocks.csv\",\"format\": {\"type\": \"csv\"}},\n        \"layer\": [\n          {\n            \"mark\": {\"type\": \"area\", \"opacity\": 0.7},\n            \"encoding\": {\n              \"x\": {\"field\": \"date\",\"type\": \"temporal\"},\n              \"y\": {\"aggregate\": \"sum\", \"field\": \"price\",\"type\": \"quantitative\"},\n              \"color\": {\"field\": \"symbol\", \"type\": \"nominal\"}\n            }\n          },\n          {\n            \"mark\": {\"type\": \"line\"},\n            \"encoding\": {\n              \"x\": {\"field\": \"date\",\"type\": \"temporal\"},\n              \"y\": {\"aggregate\": \"sum\", \"field\": \"price\",\"type\": \"quantitative\", \"stack\": \"zero\"},\n              \"color\": {\"field\": \"symbol\", \"type\": \"nominal\"}\n            }\n          }\n        ],\n        \"config\": {\"area\": {\"line\": {}}}\n      });\n    });\n\n    it('correctly normalizes streamgraph with overlay line', () => {\n      const spec: TopLevelSpec = {\n        \"data\": {\"url\": \"data/stocks.csv\", \"format\": {\"type\": \"csv\"}},\n        \"mark\": \"area\",\n        \"encoding\": {\n          \"x\": {\"field\": \"date\", \"type\": \"temporal\"},\n          \"y\": {\"aggregate\": \"sum\", \"field\": \"price\", \"type\": \"quantitative\", \"stack\": \"center\"},\n          \"color\": {\"field\": \"symbol\", \"type\": \"nominal\"}\n        },\n        \"config\": {\"area\": {\"line\": {}}}\n      };\n      const normalizedSpec = normalize(spec, spec.config);\n      assert.deepEqual<TopLevel<NormalizedSpec>>(normalizedSpec, {\n        \"data\": {\"url\": \"data/stocks.csv\",\"format\": {\"type\": \"csv\"}},\n        \"layer\": [\n          {\n            \"mark\": {\"type\": \"area\", \"opacity\": 0.7},\n            \"encoding\": {\n              \"x\": {\"field\": \"date\",\"type\": \"temporal\"},\n              \"y\": {\"aggregate\": \"sum\", \"field\": \"price\",\"type\": \"quantitative\", \"stack\": \"center\"},\n              \"color\": {\"field\": \"symbol\", \"type\": \"nominal\"}\n            }\n          },\n          {\n            \"mark\": {\"type\": \"line\"},\n            \"encoding\": {\n              \"x\": {\"field\": \"date\",\"type\": \"temporal\"},\n              \"y\": {\"aggregate\": \"sum\", \"field\": \"price\",\"type\": \"quantitative\", \"stack\": \"center\"},\n              \"color\": {\"field\": \"symbol\", \"type\": \"nominal\"}\n            }\n          }\n        ],\n        \"config\": {\"area\": {\"line\": {}}}\n      });\n    });\n  });\n});\n\ndescribe('normalizeRangedUnitSpec', () => {\n  it('should convert y2 -> y if there is no y in the encoding', function() {\n    const spec: NormalizedSpec = {\n      \"data\": {\"url\": \"data/population.json\"},\n      \"mark\": \"rule\",\n      \"encoding\": {\n        \"y2\": {\"field\": \"age\",\"type\": \"ordinal\"},\n        \"x\": {\"aggregate\": \"min\", \"field\": \"people\", \"type\": \"quantitative\"},\n        \"x2\": {\"aggregate\": \"max\", \"field\": \"people\", \"type\": \"quantitative\"}\n      }\n    };\n\n    assert.deepEqual<NormalizedSpec>(normalize(spec, defaultConfig), {\n      \"data\": {\"url\": \"data/population.json\"},\n      \"mark\": \"rule\",\n      \"encoding\": {\n        \"y\": {\"field\": \"age\",\"type\": \"ordinal\"},\n        \"x\": {\"aggregate\": \"min\", \"field\": \"people\", \"type\": \"quantitative\"},\n        \"x2\": {\"aggregate\": \"max\", \"field\": \"people\", \"type\": \"quantitative\"}\n      }\n    });\n  });\n\n  it('should do nothing if there is no missing x or y', function() {\n    const spec: NormalizedSpec = {\n      \"data\": {\"url\": \"data/population.json\"},\n      \"mark\": \"rule\",\n      \"encoding\": {\n        \"y\": {\"field\": \"age\",\"type\": \"ordinal\"},\n        \"x\": {\"aggregate\": \"min\", \"field\": \"people\", \"type\": \"quantitative\"},\n        \"x2\": {\"aggregate\": \"max\", \"field\": \"people\", \"type\": \"quantitative\"}\n      }\n    };\n\n    assert.deepEqual(normalize(spec, defaultConfig), spec);\n  });\n\n  it('should convert x2 -> x if there is no x in the encoding', function() {\n    const spec: NormalizedSpec = {\n      \"data\": {\"url\": \"data/population.json\"},\n      \"mark\": \"rule\",\n      \"encoding\": {\n        \"x2\": {\"field\": \"age\",\"type\": \"ordinal\"},\n        \"y\": {\"aggregate\": \"min\", \"field\": \"people\", \"type\": \"quantitative\"},\n        \"y2\": {\"aggregate\": \"max\", \"field\": \"people\", \"type\": \"quantitative\"}\n      }\n    };\n\n    assert.deepEqual<NormalizedSpec>(normalize(spec, defaultConfig), {\n      \"data\": {\"url\": \"data/population.json\"},\n      \"mark\": \"rule\",\n      \"encoding\": {\n        \"x\": {\"field\": \"age\",\"type\": \"ordinal\"},\n        \"y\": {\"aggregate\": \"min\", \"field\": \"people\", \"type\": \"quantitative\"},\n        \"y2\": {\"aggregate\": \"max\", \"field\": \"people\", \"type\": \"quantitative\"}\n      }\n    });\n  });\n});\n\ndescribe('fieldDefs()', function() {\n  it('should get all non-duplicate fieldDefs from an encoding', function() {\n    const spec: any = {\n      \"data\": {\"url\": \"data/cars.json\"},\n      \"mark\": \"point\",\n      \"encoding\": {\n        \"x\": {\"field\": \"Horsepower\",\"type\": \"quantitative\"},\n        \"y\": {\"field\": \"Miles_per_Gallon\",\"type\": \"quantitative\"}\n      }\n    };\n\n    assert.sameDeepMembers<FieldDef<Field>>(fieldDefs(spec), [\n      {\"field\": \"Horsepower\",\"type\": \"quantitative\"},\n      {\"field\": \"Miles_per_Gallon\",\"type\": \"quantitative\"}\n    ]);\n  });\n\n  it('should get all non-duplicate fieldDefs from all layer in a LayerSpec', function() {\n    const layerSpec: any = {\n      \"data\": {\"url\": \"data/stocks.csv\",\"format\": {\"type\": \"csv\"}},\n      \"layer\": [\n        {\n          \"description\": \"Google's stock price over time.\",\n          \"mark\": \"line\",\n          \"encoding\": {\n            \"x\": {\"field\": \"date\",\"type\": \"temporal\"},\n            \"y\": {\"field\": \"price\",\"type\": \"quantitative\"}\n          }\n        },\n        {\n          \"description\": \"Google's stock price over time.\",\n          \"mark\": \"point\",\n          \"encoding\": {\n            \"x\": {\"field\": \"date\",\"type\": \"temporal\"},\n            \"y\": {\"field\": \"price\",\"type\": \"quantitative\"},\n            \"color\": {\"field\": \"symbol\", \"type\": \"nominal\"}\n          },\n          \"config\": {\"mark\": {\"filled\": true}}\n        }\n      ]\n    };\n\n    assert.sameDeepMembers<FieldDef<Field>>(fieldDefs(layerSpec), [\n      {\"field\": \"date\",\"type\": \"temporal\"},\n      {\"field\": \"price\",\"type\": \"quantitative\"},\n      {\"field\": \"symbol\", \"type\": \"nominal\"}\n    ]);\n  });\n\n  it('should get all non-duplicate fieldDefs from all layer in a LayerSpec (merging duplicate fields with different scale types)', function() {\n    const layerSpec: any = {\n      \"data\": {\"url\": \"data/stocks.csv\",\"format\": {\"type\": \"csv\"}},\n      \"layer\": [\n        {\n          \"description\": \"Google's stock price over time.\",\n          \"mark\": \"line\",\n          \"encoding\": {\n            \"x\": {\"field\": \"date\",\"type\": \"temporal\"},\n            \"y\": {\"field\": \"price\",\"type\": \"quantitative\"}\n          }\n        },\n        {\n          \"description\": \"Google's stock price over time.\",\n          \"mark\": \"point\",\n          \"encoding\": {\n            \"x\": {\"field\": \"date\",\"type\": \"temporal\"},\n            \"y\": {\"field\": \"price\",\"type\": \"quantitative\"},\n            \"color\": {\"field\": \"date\",\"type\": \"temporal\", \"scale\": {\"type\": \"pow\"}}\n          },\n          \"config\": {\"mark\": {\"filled\": true}}\n        }\n      ]\n    };\n\n    assert.sameDeepMembers<FieldDef<Field>>(fieldDefs(layerSpec), [\n      {\"field\": \"date\",\"type\": \"temporal\"},\n      {\"field\": \"price\",\"type\": \"quantitative\"}\n    ]);\n  });\n\n  it('should get all non-duplicate fieldDefs from facet and layer in a FacetSpec', function() {\n    const facetSpec: any = {\n      \"data\": {\"url\": \"data/movies.json\"},\n      \"facet\": {\"row\": {\"field\": \"MPAA_Rating\",\"type\": \"ordinal\"}},\n      \"spec\": {\n        \"mark\": \"point\",\n        \"encoding\": {\n          \"x\": {\"field\": \"Worldwide_Gross\",\"type\": \"quantitative\"},\n          \"y\": {\"field\": \"US_DVD_Sales\",\"type\": \"quantitative\"}\n        }\n      }\n    };\n\n    assert.sameDeepMembers<FieldDef<Field>>(fieldDefs(facetSpec), [\n      {\"field\": \"MPAA_Rating\",\"type\": \"ordinal\"},\n      {\"field\": \"Worldwide_Gross\",\"type\": \"quantitative\"},\n      {\"field\": \"US_DVD_Sales\",\"type\": \"quantitative\"}\n    ]);\n  });\n});\n"]}