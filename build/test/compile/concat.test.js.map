{"version":3,"file":"concat.test.js","sourceRoot":"","sources":["../../../test/compile/concat.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport * as log from '../../src/log';\nimport {VgLayout} from '../../src/vega.schema';\nimport {parseConcatModel} from '../util';\n\ndescribe('Concat', () => {\n  describe('merge scale domains', () => {\n    it('should instantiate all children in vconcat', () => {\n      const model = parseConcatModel({\n        vconcat: [{\n          mark: 'point',\n          encoding: {\n            x: {field: 'a', type: 'ordinal'}\n          }\n        },{\n          mark: 'bar',\n          encoding: {\n            x: {field: 'b', type: 'ordinal'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }]\n      });\n\n      assert.equal(model.children.length, 2);\n      assert(model.isVConcat);\n    });\n\n    it('should instantiate all children in hconcat', () => {\n      const model = parseConcatModel({\n        hconcat: [{\n          mark: 'point',\n          encoding: {\n            x: {field: 'a', type: 'ordinal'}\n          }\n        },{\n          mark: 'bar',\n          encoding: {\n            x: {field: 'b', type: 'ordinal'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }]\n      });\n\n      assert.equal(model.children.length, 2);\n      assert(!model.isVConcat);\n    });\n\n    it('should create correct layout for vconcat', () => {\n      const model = parseConcatModel({\n        vconcat: [{\n          mark: 'point',\n          encoding: {\n          }\n        },{\n          mark: 'bar',\n          encoding: {\n          }\n        }]\n      });\n\n      assert.deepEqual<VgLayout>(model.assembleLayout(), {\n        padding: {row: 10, column: 10},\n        columns: 1,\n        bounds: 'full',\n        align: 'each'\n      });\n    });\n\n    it('should create correct layout for hconcat', () => {\n      const model = parseConcatModel({\n        hconcat: [{\n          mark: 'point',\n          encoding: {\n          }\n        },{\n          mark: 'bar',\n          encoding: {\n          }\n        }]\n      });\n\n      assert.deepEqual<VgLayout>(model.assembleLayout(), {\n        padding: {row: 10, column: 10},\n        bounds: 'full',\n        align: 'each'\n      });\n    });\n  });\n\n  describe('resolve', () => {\n    it('cannot share axes', log.wrap((localLogger) => {\n      parseConcatModel({\n        hconcat: [],\n        resolve: {\n          axis: {\n            x: 'shared'\n          }\n        }\n      });\n      assert.equal(localLogger.warns[0], log.message.CONCAT_CANNOT_SHARE_AXIS);\n    }));\n  });\n});\n"]}