{"version":3,"file":"unit.test.js","sourceRoot":"","sources":["../../../test/compile/unit.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {DETAIL, SHAPE, X} from '../../src/channel';\nimport {FieldDef} from '../../src/fielddef';\nimport * as log from '../../src/log';\nimport {BAR} from '../../src/mark';\nimport {QUANTITATIVE} from '../../src/type';\nimport {parseUnitModel} from '../util';\n\ndescribe('UnitModel', function() {\n  describe('initEncoding', () => {\n    it('should drop unsupported channel and throws warning', log.wrap((localLogger) => {\n        const model = parseUnitModel({\n          mark: 'bar',\n          encoding: {\n            shape: {field: 'a', type: 'quantitative'}\n          }\n        });\n        assert.equal(model.encoding.shape, undefined);\n        assert.equal(localLogger.warns[0], log.message.incompatibleChannel(SHAPE, BAR));\n      }));\n\n    it('should drop invalid channel and throws warning', log.wrap((localLogger) => {\n        const _model = parseUnitModel({\n          mark: 'bar',\n          encoding: {\n            _y: {type: 'quantitative'}\n          }\n        } as any); // To make parseUnitModel accept the model with invalid encoding channel\n        assert.equal(localLogger.warns[0], log.message.invalidEncodingChannel('_y'));\n      }));\n\n    it('should drop channel without field and value and throws warning', log.wrap((localLogger) => {\n        const model = parseUnitModel({\n          mark: 'bar',\n          encoding: {\n            x: {type: 'quantitative'}\n          }\n        });\n        assert.equal(model.encoding.x, undefined);\n        assert.equal(localLogger.warns[0], log.message.emptyFieldDef({type: QUANTITATIVE}, X));\n      }));\n\n    it('should drop a fieldDef without field and value from the channel def list and throws warning', log.wrap((localLogger) => {\n        const model = parseUnitModel({\n          mark: 'bar',\n          encoding: {\n            detail: [\n              {field: 'a', type: 'ordinal'},\n              {type: 'quantitative'}\n            ]\n          }\n        });\n        assert.deepEqual<FieldDef<string> | FieldDef<string>[]>(model.encoding.detail, [\n          {field: 'a', type: 'ordinal'}\n        ]);\n        assert.equal(localLogger.warns[0], log.message.emptyFieldDef({type: QUANTITATIVE}, DETAIL));\n      }));\n\n  });\n\n  describe('initAxes', () => {\n    it('should not include properties of non-VlOnlyAxisConfig in config.axis', () => {\n      const model = parseUnitModel({\n        mark: 'point',\n        encoding: {\n          x: {field: 'a', type: 'ordinal'},\n          y: {field: 'b', type: 'ordinal'}\n        },\n        config: {axis: {domainWidth: 123}}\n      });\n\n      assert.equal(model.axis(X)['domainWidth'], undefined);\n    });\n\n    it('it should have axis.offset = encode.x.axis.offset', () => {\n      const model = parseUnitModel({\n        mark: 'point',\n        encoding: {\n          x: {field: 'a', type: 'ordinal', axis: {offset: 345}},\n          y: {field: 'b', type: 'ordinal'}\n        }\n      });\n\n      assert.equal(model.axis(X).offset, 345);\n    });\n  });\n});\n"]}