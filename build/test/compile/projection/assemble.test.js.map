{"version":3,"file":"assemble.test.js","sourceRoot":"","sources":["../../../../test/compile/projection/assemble.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,0BAA0B,EAAC,MAAM,0CAA0C,CAAC;AACpF,OAAO,EAAC,aAAa,EAAC,MAAM,0BAA0B,CAAC;AACvD,OAAO,EAAC,oCAAoC,EAAC,MAAM,YAAY,CAAC;AAEhE,QAAQ,CAAC,6BAA6B,EAAE;IACtC,QAAQ,CAAC,4BAA4B,EAAE;QACrC,IAAM,KAAK,GAAG,oCAAoC,CAAC;YACjD,MAAM,EAAE,UAAU;YAClB,YAAY,EAAE;gBACZ,MAAM,EAAE,WAAW;aACpB;YACD,MAAM,EAAE;gBACN,KAAK,EAAE,kBAAkB;gBACzB,QAAQ,EAAE;oBACR,MAAM,EAAE,UAAU;oBAClB,SAAS,EAAE,QAAQ;iBACpB;aACF;YACD,UAAU,EAAE,EAAE;SACf,CAAC,CAAC;QACH,KAAK,CAAC,KAAK,EAAE,CAAC;QAEd,EAAE,CAAC,qBAAqB,EAAE;YACxB,MAAM,CAAC,UAAU,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE;YACzC,IAAM,UAAU,GAAG,0BAA0B,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACjC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACjC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {assert} from 'chai';\nimport {assembleProjectionForModel} from '../../../src/compile/projection/assemble';\nimport {isVgSignalRef} from '../../../src/vega.schema';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('compile/projection/assemble', () => {\n  describe('assembleProjectionForModel', () => {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      'mark': 'geoshape',\n      'projection': {\n        'type': 'albersUsa'\n      },\n      'data': {\n        'url': 'data/us-10m.json',\n        'format': {\n          'type': 'topojson',\n          'feature': 'states'\n        }\n      },\n      'encoding': {}\n    });\n    model.parse();\n\n    it('should not be empty', () => {\n      assert.isNotEmpty(assembleProjectionForModel(model));\n    });\n\n    it('should have properties of right type', () => {\n      const projection = assembleProjectionForModel(model)[0];\n      assert.isDefined(projection.name);\n      assert.isString(projection.name);\n      assert.isDefined(projection.size);\n      assert.isTrue(isVgSignalRef(projection.size));\n      assert.isDefined(projection.fit);\n      assert.isTrue(isVgSignalRef(projection.fit));\n    });\n  });\n});\n"]}