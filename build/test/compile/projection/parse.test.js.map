{"version":3,"file":"parse.test.js","sourceRoot":"","sources":["../../../../test/compile/projection/parse.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {parseLayerModel, parseUnitModelWithScaleAndLayoutSize} from '../../util';\n/* tslint:disable:quotemark */\n\ndescribe('src/compile/projection/parse', function () {\n  describe('parseUnitProjection', () => {\n    it('should create projection from specified projection', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        \"mark\": \"geoshape\",\n        \"projection\": {\n          \"type\": \"albersUsa\"\n        },\n        \"data\": {\n          \"url\": \"data/us-10m.json\",\n          \"format\": {\n            \"type\": \"topojson\",\n            \"feature\": \"states\"\n          }\n        },\n        \"encoding\": {}\n      });\n      model.parse();\n      assert.deepEqual(model.component.projection.explicit, {type: 'albersUsa'});\n    });\n\n    it('should create projection with no props', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        \"mark\": \"geoshape\",\n        \"data\": {\n          \"url\": \"data/us-10m.json\",\n          \"format\": {\n            \"type\": \"topojson\",\n            \"feature\": \"states\"\n          }\n        },\n        \"encoding\": {}\n      });\n      model.parse();\n      assert.deepEqual(model.component.projection.explicit, {});\n    });\n\n    it('should create projection from config', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        \"mark\": \"geoshape\",\n        \"data\": {\n          \"url\": \"data/us-10m.json\",\n          \"format\": {\n            \"type\": \"topojson\",\n            \"feature\": \"states\"\n          }\n        },\n        \"encoding\": {},\n        \"config\": {\n          \"projection\": {\n            \"type\": \"albersUsa\"\n          }\n        }\n      });\n      model.parse();\n      assert.deepEqual(model.component.projection.explicit, {type: 'albersUsa'});\n    });\n\n    it('should add data with signal', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        \"data\": {\n          \"url\": \"data/airports.csv\",\n          \"format\": {\n            \"type\": \"csv\"\n          }\n        },\n        \"mark\": \"circle\",\n        \"projection\": {\n          \"type\": \"albersUsa\"\n        },\n        \"encoding\": {\n          \"longitude\": {\n            \"field\": \"longitude\",\n            \"type\": \"quantitative\"\n          },\n          \"latitude\": {\n            \"field\": \"latitude\",\n            \"type\": \"quantitative\"\n          }\n        }\n      });\n      model.parse();\n      assert.isObject(model.component.projection.data[0]);\n      assert.property(model.component.projection.data[0], 'signal');\n    });\n\n    it('should add data from main', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        \"mark\": \"geoshape\",\n        \"data\": {\n          \"url\": \"data/us-10m.json\",\n          \"format\": {\n            \"type\": \"topojson\",\n            \"feature\": \"states\"\n          }\n        },\n        \"encoding\": {}\n      });\n      model.parse();\n      assert.isString(model.component.projection.data[0]);\n      assert.isNotObject(model.component.projection.data[0]);\n      assert.notProperty(model.component.projection.data[0], 'signal');\n    });\n  });\n\n  describe('parseNonUnitProjection', () => {\n    it('should merge the same projection', () => {\n      const model = parseLayerModel({\n        \"layer\": [\n          {\n            \"mark\": \"geoshape\",\n            \"projection\": {\n              \"type\": \"albersUsa\"\n            },\n            \"data\": {\n              \"url\": \"data/us-10m.json\",\n              \"format\": {\n                \"type\": \"topojson\",\n                \"feature\": \"states\"\n              }\n            },\n            \"encoding\": {}\n          },\n          {\n            \"data\": {\n              \"url\": \"data/airports.csv\"\n            },\n            \"mark\": \"circle\",\n            \"projection\": {\n              \"type\": \"albersUsa\"\n            },\n            \"encoding\": {\n              \"longitude\": {\n                \"field\": \"longitude\",\n                \"type\": \"quantitative\"\n              },\n              \"latitude\": {\n                \"field\": \"latitude\",\n                \"type\": \"quantitative\"\n              }\n            }\n          }\n        ]\n      });\n      model.parse();\n      assert.deepEqual(model.component.projection.explicit, {type: 'albersUsa'});\n    });\n\n    it('should merge in empty projection to specified projection', () => {\n      const emptyFirst = parseLayerModel({\n        \"layer\": [\n          {\n            \"mark\": \"geoshape\",\n            \"data\": {\n              \"url\": \"data/us-10m.json\",\n              \"format\": {\n                \"type\": \"topojson\",\n                \"feature\": \"states\"\n              }\n            },\n            \"encoding\": {}\n          },\n          {\n            \"data\": {\n              \"url\": \"data/airports.csv\"\n            },\n            \"mark\": \"circle\",\n            \"projection\": {\n              \"type\": \"albersUsa\"\n            },\n            \"encoding\": {\n              \"longitude\": {\n                \"field\": \"longitude\",\n                \"type\": \"quantitative\"\n              },\n              \"latitude\": {\n                \"field\": \"latitude\",\n                \"type\": \"quantitative\"\n              }\n            }\n          }\n        ]\n      });\n      emptyFirst.parse();\n      assert.deepEqual(emptyFirst.component.projection.explicit, {type: 'albersUsa'});\n      const emptyLast = parseLayerModel({\n        \"layer\": [\n          {\n            \"mark\": \"geoshape\",\n            \"data\": {\n              \"url\": \"data/us-10m.json\",\n              \"format\": {\n                \"type\": \"topojson\",\n                \"feature\": \"states\"\n              }\n            },\n            \"encoding\": {}\n          },\n          {\n            \"data\": {\n              \"url\": \"data/airports.csv\"\n            },\n            \"mark\": \"circle\",\n            \"projection\": {\n              \"type\": \"albersUsa\"\n            },\n            \"encoding\": {\n              \"longitude\": {\n                \"field\": \"longitude\",\n                \"type\": \"quantitative\"\n              },\n              \"latitude\": {\n                \"field\": \"latitude\",\n                \"type\": \"quantitative\"\n              }\n            }\n          }\n        ]\n      });\n      emptyLast.parse();\n      assert.deepEqual(emptyLast.component.projection.explicit, {type: 'albersUsa'});\n    });\n\n    it('should merge projections with same size, different data', () => {\n      const model = parseLayerModel({\n        \"layer\": [\n          {\n            \"mark\": \"geoshape\",\n            \"projection\": {\n              \"type\": \"albersUsa\"\n            },\n            \"data\": {\n              \"url\": \"data/us-10m.json\",\n              \"format\": {\n                \"type\": \"topojson\",\n                \"feature\": \"states\"\n              }\n            },\n            \"encoding\": {}\n          },\n          {\n            \"data\": {\n              \"url\": \"data/airports.csv\"\n            },\n            \"mark\": \"circle\",\n            \"projection\": {\n              \"type\": \"albersUsa\"\n            },\n            \"encoding\": {\n              \"longitude\": {\n                \"field\": \"longitude\",\n                \"type\": \"quantitative\"\n              },\n              \"latitude\": {\n                \"field\": \"latitude\",\n                \"type\": \"quantitative\"\n              }\n            }\n          }\n        ]\n      });\n      model.parse();\n      assert.deepEqual(model.component.projection.explicit, {type: 'albersUsa'});\n    });\n\n    it('should not merge different specified projections', () => {\n      const model = parseLayerModel({\n        \"layer\": [\n          {\n            \"mark\": \"geoshape\",\n            \"projection\": {\n              \"type\": \"mercator\"\n            },\n            \"data\": {\n              \"url\": \"data/us-10m.json\",\n              \"format\": {\n                \"type\": \"topojson\",\n                \"feature\": \"states\"\n              }\n            },\n            \"encoding\": {}\n          },\n          {\n            \"data\": {\n              \"url\": \"data/airports.csv\"\n            },\n            \"mark\": \"circle\",\n            \"projection\": {\n              \"type\": \"albersUsa\"\n            },\n            \"encoding\": {\n              \"longitude\": {\n                \"field\": \"longitude\",\n                \"type\": \"quantitative\"\n              },\n              \"latitude\": {\n                \"field\": \"latitude\",\n                \"type\": \"quantitative\"\n              }\n            }\n          }\n        ]\n      });\n      model.parse();\n      assert.isUndefined(model.component.projection);\n    });\n  });\n});\n"]}