{"version":3,"file":"range.test.js","sourceRoot":"","sources":["../../../../test/compile/scale/range.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAE5B,OAAO,EAAC,oBAAoB,EAAC,MAAM,kCAAkC,CAAC;AACtE,OAAO,EAAC,YAAY,EAAE,YAAY,EAAC,MAAM,4BAA4B,CAAC;AACtE,OAAO,EAAC,aAAa,EAAC,MAAM,qBAAqB,CAAC;AAClD,OAAO,KAAK,GAAG,MAAM,kBAAkB,CAAC;AAExC,OAAO,EAAC,+BAA+B,EAAE,sBAAsB,EAAY,MAAM,oBAAoB,CAAC;AACtG,OAAO,EAAC,OAAO,EAAE,OAAO,EAAE,YAAY,EAAC,MAAM,mBAAmB,CAAC;AAEjE,QAAQ,CAAC,eAAe,EAAE;IACxB,QAAQ,CAAC,cAAc,EAAE;QACvB,QAAQ,CAAC,UAAU,EAAE;YACnB,EAAE,CAAC,mEAAmE,EAAE;gBACtE,KAAwB,UAA+B,EAA/B,mEAA+B,EAA/B,6CAA+B,EAA/B,IAA+B,EAAE;oBAApD,IAAM,SAAS,wCAAA;oBAClB,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,GAAG,EAAE,SAAS,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EAC7G,YAAY,CAAC,CAAC,CAAC,EAAE,EAAC,MAAM,EAAE,YAAY,EAAC,CAAC,CAAC,CAC1C,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,mEAAmE,EAAE;gBACtE,KAAwB,UAA+B,EAA/B,mEAA+B,EAA/B,6CAA+B,EAA/B,IAA+B,EAAE;oBAApD,IAAM,SAAS,wCAAA;oBAClB,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,GAAG,EAAE,SAAS,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,CAAC,EAC9G,YAAY,CAAC,CAAC,EAAC,MAAM,EAAE,aAAa,EAAC,EAAE,CAAC,CAAC,CAAC,CAC3C,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8EAA8E,EAAE;gBACjF,KAAwB,UAAsB,EAAtB,iDAAsB,EAAtB,oCAAsB,EAAtB,IAAsB,EAAE;oBAA3C,IAAM,SAAS,+BAAA;oBAClB,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,GAAG,EAAE,SAAS,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,EAAE,CAAC,EAC7G,YAAY,CAAC,CAAC,CAAC,EAAE,EAAC,MAAM,EAAE,aAAa,EAAC,CAAC,CAAC,CAC3C,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8BAA8B,EAAE,GAAG,CAAC,IAAI,CAAC,UAAC,WAAW;gBACtD,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,GAAG,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAC,KAAK,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC,EAAE,aAAa,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EAC3H,YAAY,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CACvB,CAAC;gBACF,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC,CAAC;YAEJ,EAAE,CAAC,wEAAwE,EAAE;gBAC3E,KAAwB,UAAgC,EAAhC,KAAA,CAAC,OAAO,EAAE,MAAM,CAAgB,EAAhC,cAAgC,EAAhC,IAAgC,EAAE;oBAArD,IAAM,SAAS,SAAA;oBAClB,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EAC7G,YAAY,CAAC,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC,CACzB,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,4FAA4F,EAAE;gBAC/F,KAAwB,UAAgC,EAAhC,KAAA,CAAC,OAAO,EAAE,MAAM,CAAgB,EAAhC,cAAgC,EAAhC,IAAgC,EAAE;oBAArD,IAAM,SAAS,SAAA;oBAClB,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE,EAAC,KAAK,EAAE,EAAC,cAAc,EAAE,EAAE,EAAC,EAAC,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EAC5H,YAAY,CAAC,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC,CACzB,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,sFAAsF,EAAE;gBACzF,KAAwB,UAAgC,EAAhC,KAAA,CAAC,OAAO,EAAE,MAAM,CAAgB,EAAhC,cAAgC,EAAhC,IAAgC,EAAE;oBAArD,IAAM,SAAS,SAAA;oBAClB,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,EAAC,SAAS,EAAE,EAAE,EAAC,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EACzH,YAAY,CAAC,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC,CACzB,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,0EAA0E,EAAE,GAAG,CAAC,IAAI,CAAC,UAAC,WAAW;gBAClG,KAAwB,UAAgC,EAAhC,KAAA,CAAC,OAAO,EAAE,MAAM,CAAgB,EAAhC,cAAgC,EAAhC,IAAgC,EAAE;oBAArD,IAAM,SAAS,SAAA;oBAClB,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,EAAC,SAAS,EAAE,EAAE,EAAC,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,EAAE,CAAC,EACxH,YAAY,CAAC,CAAC,CAAC,EAAE,EAAC,MAAM,EAAE,YAAY,EAAC,CAAC,CAAC,CAC1C,CAAC;iBACH;gBACD,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;YACxE,CAAC,CAAC,CAAC,CAAC;YAEJ,EAAE,CAAC,+EAA+E,EAAE;gBAClF,KAAwB,UAAgC,EAAhC,KAAA,CAAC,OAAO,EAAE,MAAM,CAAgB,EAAhC,cAAgC,EAAhC,IAAgC,EAAE;oBAArD,IAAM,SAAS,SAAA;oBAClB,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EAC3H,YAAY,CAAC,CAAC,CAAC,EAAE,EAAC,MAAM,EAAE,YAAY,EAAC,CAAC,CAAC,CAC1C,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,gEAAgE,EAAE;gBACnE,KAAwB,UAAgC,EAAhC,KAAA,CAAC,OAAO,EAAE,MAAM,CAAgB,EAAhC,cAAgC,EAAhC,IAAgC,EAAE;oBAArD,IAAM,SAAS,SAAA;oBAClB,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE,EAAC,IAAI,EAAE,EAAC,KAAK,EAAE,GAAG,EAAC,EAAE,KAAK,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,EAAC,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EAC9I,YAAY,CAAC,CAAC,CAAC,EAAE,EAAC,MAAM,EAAE,YAAY,EAAC,CAAC,CAAC,CAC1C,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8EAA8E,EAAE;gBACjF,KAAwB,UAAgC,EAAhC,KAAA,CAAC,OAAO,EAAE,MAAM,CAAgB,EAAhC,cAAgC,EAAhC,IAAgC,EAAE;oBAArD,IAAM,SAAS,SAAA;oBAClB,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE,EAAC,IAAI,EAAE,EAAC,KAAK,EAAE,GAAG,EAAC,EAAE,KAAK,EAAE,EAAC,cAAc,EAAE,IAAI,EAAC,EAAC,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EAClJ,YAAY,CAAC,CAAC,CAAC,EAAE,EAAC,MAAM,EAAE,YAAY,EAAC,CAAC,CAAC,CAC1C,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,6CAA6C,EAAE;wCACrC,SAAS;oBAClB,GAAG,CAAC,IAAI,CAAC,UAAC,WAAW;wBACnB,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,GAAG,EAAE,SAAS,EAAE,YAAY,EAAE,EAAC,SAAS,EAAE,EAAE,EAAC,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,EAAE,CAAC,EAC7H,YAAY,CAAC,CAAC,CAAC,EAAE,EAAC,MAAM,EAAE,YAAY,EAAC,CAAC,CAAC,CAC1C,CAAC;wBACF,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,iCAAiC,CAAC,SAAS,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;oBACjH,CAAC,CAAC,EAAE,CAAC;gBACP,CAAC;gBARD,KAAwB,UAA+B,EAA/B,mEAA+B,EAA/B,6CAA+B,EAA/B,IAA+B;oBAAlD,IAAM,SAAS,wCAAA;4BAAT,SAAS;iBAQnB;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,OAAO,EAAE;YAChB,EAAE,CAAC,4DAA4D,EAAE;gBAC/D,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,EAAC,MAAM,EAAE,MAAM,EAAC,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EAC/H,YAAY,CAAC,EAAC,MAAM,EAAE,MAAM,EAAC,CAAC,CAC/B,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wEAAwE,EAAE;gBAC3E,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,EAAC,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EACzJ,YAAY,CAAC,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAC,CAAC,CACjD,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2DAA2D,EAAE;gBAC9D,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,EAAC,KAAK,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,EAAC,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EAChJ,YAAY,CAAC,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CACvC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,sEAAsE,EAAE;gBACzE,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EACjH,YAAY,CAAC,UAAU,CAAC,CACzB,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,sEAAsE,EAAE;gBACzE,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EACjH,YAAY,CAAC,SAAS,CAAC,CACxB,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,gFAAgF,EAAE;gBACnF,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EACzH,YAAY,CAAC,MAAM,CAAC,CACrB,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,4EAA4E,EAAE;gBAC/E,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAC,EAAC,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EACzJ,YAAY,CAAC,EAAC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAC,CAAC,CAC5C,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,SAAS,EAAE;YAClB,EAAE,CAAC,4DAA4D,EAAE;gBAC/D,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EACvH,YAAY,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,UAAU,EAAE,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAC/E,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,MAAM,EAAE;YACf,QAAQ,CAAC,KAAK,EAAE;gBACd,EAAE,CAAC,gEAAgE,EAAE;oBACnE,IAAM,MAAM,GAAG;wBACb,KAAK,EAAE,EAAC,WAAW,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAC;qBACxC,CAAC;oBACF,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EAC3G,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACrB,CAAC;gBACJ,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,wGAAwG,EAAE;oBAC3G,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EAClH,YAAY,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CACrD,CAAC;gBACJ,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,MAAM,EAAE;gBACf,EAAE,CAAC,gEAAgE,EAAE;oBACnE,IAAM,MAAM,GAAG;wBACb,KAAK,EAAE,EAAC,WAAW,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAC;qBACxC,CAAC;oBACF,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EAC5G,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACrB,CAAC;gBACJ,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,oGAAoG,EAAE;oBACvG,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EACnH,YAAY,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,WAAW,EAAE,aAAa,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CACnF,CAAC;gBACJ,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,MAAM,EAAE;gBACf,EAAE,CAAC,0CAA0C,EAAE;oBAC7C,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EACnH,YAAY,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,WAAW,EAAE,aAAa,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CACjF,CAAC;gBACJ,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,MAAM,EAAE;gBACf,EAAE,CAAC,gDAAgD,EAAE;oBACnD,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EACnH,YAAY,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,cAAc,EAAE,aAAa,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CACvF,CAAC;gBACJ,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,uBAAuB,EAAE;gBAChC,EAAE,CAAC,kCAAkC,EAAE;oBACrC,KAAgB,UAAuC,EAAvC,KAAA,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAW,EAAvC,cAAuC,EAAvC,IAAuC,EAAE;wBAApD,IAAM,CAAC,SAAA;wBACV,IAAM,MAAM,GAAG;4BACb,KAAK,EAAE;gCACL,OAAO,EAAE,CAAC;gCACV,OAAO,EAAE,EAAE;6BAEZ;yBACF,CAAC;wBAEF,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EACvG,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CACtB,CAAC;qBACH;gBACH,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,6HAA6H,EAAE;oBAChI,KAAgB,UAAuC,EAAvC,KAAA,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAW,EAAvC,cAAuC,EAAvC,IAAuC,EAAE;wBAApD,IAAM,CAAC,SAAA;wBACV,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,YAAY,EAClG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,eAAe;yBACzB,EACD,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CACtB,CAAC;qBACH;gBACH,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,kIAAkI,EAAE;oBACrI,KAAgB,UAAuC,EAAvC,KAAA,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAW,EAAvC,cAAuC,EAAvC,IAAuC,EAAE;wBAApD,IAAM,CAAC,SAAA;wBACV,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,YAAY,EACnG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,eAAe;yBACzB,EACD,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CACtB,CAAC;qBACH;gBACH,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,+GAA+G,EAAE;oBAClH,KAAgB,UAAuC,EAAvC,KAAA,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAW,EAAvC,cAAuC,EAAvC,IAAuC,EAAE;wBAApD,IAAM,CAAC,SAAA;wBACV,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,YAAY,EACnG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,eAAe;yBACzB,EACD,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CACtB,CAAC;qBACH;gBACH,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,oIAAoI,EAAE;oBACrI,KAAgB,UAAuC,EAAvC,KAAA,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAW,EAAvC,cAAuC,EAAvC,IAAuC,EAAE;wBAApD,IAAM,CAAC,SAAA;wBACZ,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,YAAY,EAClG,CAAC,EAAE,CAAC,CAAC,mCAAmC;yBACzC,EACD,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CACtB,CAAC;qBACH;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,OAAO,EAAE;YAChB,EAAE,CAAC,kEAAkE,EAAE;gBACrE,MAAM,CAAC,SAAS,CACd,oBAAoB,CAAC,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,EACtH,YAAY,CAAC,QAAQ,CAAC,CACvB,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\n\nimport {parseRangeForChannel} from '../../../src/compile/scale/range';\nimport {makeExplicit, makeImplicit} from '../../../src/compile/split';\nimport {defaultConfig} from '../../../src/config';\nimport * as log from '../../../src/log';\nimport {Mark} from '../../../src/mark';\nimport {CONTINUOUS_TO_CONTINUOUS_SCALES, DISCRETE_DOMAIN_SCALES, ScaleType} from '../../../src/scale';\nimport {NOMINAL, ORDINAL, QUANTITATIVE} from '../../../src/type';\n\ndescribe('compile/scale', () => {\n  describe('parseRange()', function() {\n    describe('position', () => {\n      it('should return [0, plot_width] for x-continuous scales by default.', () => {\n        for (const scaleType of CONTINUOUS_TO_CONTINUOUS_SCALES) {\n          assert.deepEqual(\n            parseRangeForChannel('x', scaleType, QUANTITATIVE, {}, defaultConfig, true, 'point', false, 'plot_width', []),\n            makeImplicit([0, {signal: 'plot_width'}])\n          );\n        }\n      });\n\n      it('should return [plot_height,0] for y-continuous scales by default.', () => {\n        for (const scaleType of CONTINUOUS_TO_CONTINUOUS_SCALES) {\n          assert.deepEqual(\n            parseRangeForChannel('y', scaleType, QUANTITATIVE, {}, defaultConfig, true, 'point', false, 'plot_height', []),\n            makeImplicit([{signal: 'plot_height'}, 0])\n          );\n        }\n      });\n\n      it('should return [0, plot_height] for y-discrete scales with height by default.', () => {\n        for (const scaleType of DISCRETE_DOMAIN_SCALES) {\n          assert.deepEqual(\n            parseRangeForChannel('y', scaleType, QUANTITATIVE, {}, defaultConfig, true, 'point', true, 'plot_height', []),\n            makeImplicit([0, {signal: 'plot_height'}])\n          );\n        }\n      });\n\n      it('should support custom range.', log.wrap((localLogger) => {\n        assert.deepEqual(\n          parseRangeForChannel('x', 'linear', QUANTITATIVE, {range: [0, 100]}, defaultConfig, true, 'point', false, 'plot_width', []),\n          makeExplicit([0, 100])\n        );\n        assert.deepEqual(localLogger.warns.length, 0);\n      }));\n\n      it('should return config.scale.rangeStep for band/point scales by default.', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          assert.deepEqual(\n            parseRangeForChannel('x', scaleType, NOMINAL, {}, defaultConfig, undefined, 'point', false, 'plot_width', []),\n            makeImplicit({step: 21})\n          );\n        }\n      });\n\n      it('should return config.scale.textXRangeStep by default for text mark\\'s x band/point scales.', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          assert.deepEqual(\n            parseRangeForChannel('x', scaleType, NOMINAL, {}, {scale: {textXRangeStep: 55}}, undefined, 'text', false, 'plot_width', []),\n            makeImplicit({step: 55})\n          );\n        }\n      });\n\n      it('should return specified rangeStep if topLevelSize is undefined for band/point scales', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          assert.deepEqual(\n            parseRangeForChannel('x', scaleType, NOMINAL, {rangeStep: 23}, defaultConfig, undefined, 'text', false, 'plot_width', []),\n            makeExplicit({step: 23})\n          );\n        }\n      });\n\n      it('should drop rangeStep if topLevelSize is specified for band/point scales', log.wrap((localLogger) => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          assert.deepEqual(\n            parseRangeForChannel('x', scaleType, NOMINAL, {rangeStep: 23}, defaultConfig, undefined, 'text', true, 'plot_width', []),\n            makeImplicit([0, {signal: 'plot_width'}])\n          );\n        }\n        assert.equal(localLogger.warns[0], log.message.rangeStepDropped('x'));\n      }));\n\n      it('should return default topLevelSize if rangeStep is null for band/point scales', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          assert.deepEqual(\n            parseRangeForChannel('x', scaleType, NOMINAL, {rangeStep: null}, defaultConfig, undefined, 'text', false, 'plot_width', []),\n            makeImplicit([0, {signal: 'plot_width'}])\n          );\n        }\n      });\n\n      it('should return default topLevelSize if rangeStep config is null', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          assert.deepEqual(\n            parseRangeForChannel('x', scaleType, NOMINAL, {}, {view: {width: 200}, scale: {rangeStep: null}}, undefined, 'point', false, 'plot_width', []),\n            makeImplicit([0, {signal: 'plot_width'}])\n          );\n        }\n      });\n\n      it('should return default topLevelSize for text if textXRangeStep config is null', () => {\n        for (const scaleType of ['point', 'band'] as ScaleType[]) {\n          assert.deepEqual(\n            parseRangeForChannel('x', scaleType, NOMINAL, {}, {view: {width: 200}, scale: {textXRangeStep: null}}, undefined, 'text', false, 'plot_width', []),\n            makeImplicit([0, {signal: 'plot_width'}])\n          );\n        }\n      });\n\n      it('should drop rangeStep for continuous scales', () => {\n        for (const scaleType of CONTINUOUS_TO_CONTINUOUS_SCALES) {\n          log.wrap((localLogger) => {\n            assert.deepEqual(\n              parseRangeForChannel('x', scaleType, QUANTITATIVE, {rangeStep: 23}, defaultConfig, undefined, 'text', true, 'plot_width', []),\n              makeImplicit([0, {signal: 'plot_width'}])\n            );\n            assert.equal(localLogger.warns[0], log.message.scalePropertyNotWorkWithScaleType(scaleType, 'rangeStep', 'x'));\n          })();\n        }\n      });\n    });\n\n    describe('color', function() {\n      it('should use the specified scheme for a nominal color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel('color', 'ordinal', NOMINAL, {scheme: 'warm'}, defaultConfig, undefined, 'point', false, 'plot_width', []),\n          makeExplicit({scheme: 'warm'})\n        );\n      });\n\n      it('should use the specified scheme with extent for a nominal color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel('color', 'ordinal', NOMINAL, {scheme: {name: 'warm', extent: [0.2, 1]}}, defaultConfig, undefined, 'point', false, 'plot_width', []),\n          makeExplicit({scheme: 'warm', extent: [0.2, 1]})\n        );\n      });\n\n      it('should use the specified range for a nominal color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel('color', 'ordinal', NOMINAL, {range: ['red', 'green', 'blue']}, defaultConfig, undefined, 'point', false, 'plot_width', []),\n          makeExplicit(['red', 'green', 'blue'])\n        );\n      });\n\n      it('should use default category range in Vega for a nominal color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel('color', 'ordinal', NOMINAL, {}, defaultConfig, undefined, 'point', false, 'plot_width', []),\n          makeImplicit('category')\n        );\n      });\n\n      it('should use default ordinal range in Vega for an ordinal color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel('color', 'ordinal', ORDINAL, {}, defaultConfig, undefined, 'point', false, 'plot_width', []),\n          makeImplicit('ordinal')\n        );\n      });\n\n      it('should use default ramp range in Vega for a temporal/quantitative color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel('color', 'sequential', QUANTITATIVE, {}, defaultConfig, undefined, 'point', false, 'plot_width', []),\n          makeImplicit('ramp')\n        );\n      });\n\n      it('should use the specified scheme with count for a quantitative color field.', () => {\n        assert.deepEqual(\n          parseRangeForChannel('color', 'ordinal', QUANTITATIVE, {scheme: {name: 'viridis', count: 3}}, defaultConfig, undefined, 'point', false, 'plot_width', []),\n          makeExplicit({scheme: 'viridis', count: 3})\n        );\n      });\n    });\n\n    describe('opacity', function() {\n      it('should use default opacityRange as opacity\\'s scale range.', () => {\n        assert.deepEqual(\n          parseRangeForChannel('opacity', 'linear', QUANTITATIVE, {}, defaultConfig, undefined, 'point', false, 'plot_width', []),\n          makeImplicit([defaultConfig.scale.minOpacity, defaultConfig.scale.maxOpacity])\n        );\n      });\n    });\n\n    describe('size', function() {\n      describe('bar', function() {\n        it('should return [minBandSize, maxBandSize] if both are specified', () => {\n          const config = {\n            scale: {minBandSize: 2, maxBandSize: 9}\n          };\n          assert.deepEqual(\n            parseRangeForChannel('size', 'linear', QUANTITATIVE, {}, config, undefined, 'bar', false, 'plot_width', []),\n            makeImplicit([2, 9])\n          );\n        });\n\n        it('should return [continuousBandSize, xRangeStep-1] by default since min/maxSize config are not specified', () => {\n          assert.deepEqual(\n            parseRangeForChannel('size', 'linear', QUANTITATIVE, {}, defaultConfig, undefined, 'bar', false, 'plot_width', []),\n            makeImplicit([2, defaultConfig.scale.rangeStep - 1])\n          );\n        });\n      });\n\n      describe('tick', function() {\n        it('should return [minBandSize, maxBandSize] if both are specified', () => {\n          const config = {\n            scale: {minBandSize: 4, maxBandSize: 9}\n          };\n          assert.deepEqual(\n            parseRangeForChannel('size', 'linear', QUANTITATIVE, {}, config, undefined, 'tick', false, 'plot_width', []),\n            makeImplicit([4, 9])\n          );\n        });\n\n        it('should return [(default)minBandSize, rangeStep-1] by default since maxSize config is not specified', () => {\n          assert.deepEqual(\n            parseRangeForChannel('size', 'linear', QUANTITATIVE, {}, defaultConfig, undefined, 'tick', false, 'plot_width', []),\n            makeImplicit([defaultConfig.scale.minBandSize, defaultConfig.scale.rangeStep - 1])\n          );\n        });\n      });\n\n      describe('text', function() {\n        it('should return [minFontSize, maxFontSize]', () => {\n          assert.deepEqual(\n            parseRangeForChannel('size', 'linear', QUANTITATIVE, {}, defaultConfig, undefined, 'text', false, 'plot_width', []),\n            makeImplicit([defaultConfig.scale.minFontSize, defaultConfig.scale.maxFontSize])\n          );\n        });\n      });\n\n      describe('rule', function() {\n        it('should return [minStrokeWidth, maxStrokeWidth]', () => {\n          assert.deepEqual(\n            parseRangeForChannel('size', 'linear', QUANTITATIVE, {}, defaultConfig, undefined, 'rule', false, 'plot_width', []),\n            makeImplicit([defaultConfig.scale.minStrokeWidth, defaultConfig.scale.maxStrokeWidth])\n          );\n        });\n      });\n\n      describe('point, square, circle', function() {\n        it('should return [minSize, maxSize]', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            const config = {\n              scale: {\n                minSize: 5,\n                maxSize: 25\n\n              }\n            };\n\n            assert.deepEqual(\n              parseRangeForChannel('size', 'linear', QUANTITATIVE, {}, config, undefined, m, false, 'plot_width', []),\n              makeImplicit([5, 25])\n            );\n          }\n        });\n\n        it('should return [0, (minBandSize-2)^2] if both x and y are discrete and size is quantitative (thus use zero=true, by default)', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            assert.deepEqual(\n              parseRangeForChannel('size', 'linear', QUANTITATIVE, {}, defaultConfig, true, m, false, 'plot_width',\n                [11, 13] // xyRangeSteps\n              ),\n              makeImplicit([0, 81])\n            );\n          }\n        });\n\n        it('should return [9, (minBandSize-2)^2] if both x and y are discrete and size is not quantitative (thus use zero=false, by default)', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            assert.deepEqual(\n              parseRangeForChannel('size', 'linear', QUANTITATIVE, {}, defaultConfig, false, m, false, 'plot_width',\n                [11, 13] // xyRangeSteps\n              ),\n              makeImplicit([9, 81])\n            );\n          }\n        });\n\n        it('should return [9, (minBandSize-2)^2] if both x and y are discrete and size is quantitative but use zero=false', () => {\n          for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            assert.deepEqual(\n              parseRangeForChannel('size', 'linear', QUANTITATIVE, {}, defaultConfig, false, m, false, 'plot_width',\n                [11, 13] // xyRangeSteps\n              ),\n              makeImplicit([9, 81])\n            );\n          }\n        });\n\n        it('should return [0, (xRangeStep-2)^2] if x is discrete and y is continuous and size is quantitative (thus use zero=true, by default)', () => {\n            for (const m of ['point', 'square', 'circle'] as Mark[]) {\n            assert.deepEqual(\n              parseRangeForChannel('size', 'linear', QUANTITATIVE, {}, defaultConfig, true, m, false, 'plot_width',\n                [11] // xyRangeSteps only have one value\n              ),\n              makeImplicit([0, 81])\n            );\n          }\n        });\n      });\n    });\n\n    describe('shape', function() {\n      it('should use default symbol range in Vega as shape\\'s scale range.', () => {\n        assert.deepEqual(\n          parseRangeForChannel('shape', 'ordinal', QUANTITATIVE, {}, defaultConfig, undefined, 'point', false, 'plot_width', []),\n          makeImplicit('symbol')\n        );\n      });\n    });\n  });\n});\n"]}