{"version":3,"file":"parse.test.js","sourceRoot":"","sources":["../../../../test/compile/scale/parse.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,KAAK,EAAC,MAAM,WAAW,CAAC;AAChC,OAAO,EAAC,UAAU,EAAE,cAAc,EAAC,MAAM,kCAAkC,CAAC;AAC5E,OAAO,EAAC,gBAAgB,EAAC,MAAM,0CAA0C,CAAC;AAC1E,OAAO,KAAK,GAAG,MAAM,kBAAkB,CAAC;AACxC,OAAO,EAAC,2CAA2C,EAAE,gBAAgB,EAAC,MAAM,oBAAoB,CAAC;AACjG,OAAO,EAAC,OAAO,EAAC,MAAM,mBAAmB,CAAC;AAC1C,OAAO,EAAC,UAAU,EAAE,mBAAmB,EAAE,uBAAuB,EAAC,MAAM,YAAY,CAAC;AAEpF,QAAQ,CAAC,aAAa,EAAE;IACtB,EAAE,CAAC,uGAAuG,EAAE;QAC1G,MAAM,CAAC,SAAS,CACd,KAAK,CAAC,2CAA2C,CAAC,EAClD,KAAK,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC,CACrF,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE;QACzB,EAAE,CAAC,8BAA8B,EAAE;YACjC,IAAM,KAAK,GAAG,UAAU,CAAC;gBACvB,MAAM,EAAE,EAAC,KAAK,EAAE,0BAA0B,EAAC;gBAC3C,OAAO,EAAE;oBACP;wBACE,MAAM,EAAE,KAAK;wBACb,UAAU,EAAE;4BACV,GAAG,EAAE;gCACH,WAAW,EAAE,MAAM;gCACnB,OAAO,EAAE,eAAe;gCACxB,MAAM,EAAE,cAAc;6BACvB;yBACF;qBACF;oBACD;wBACE,MAAM,EAAE,MAAM;wBACd,UAAU,EAAE;4BACV,GAAG,EAAE;gCACH,WAAW,EAAE,MAAM;gCACnB,OAAO,EAAE,eAAe;gCACxB,MAAM,EAAE,cAAc;gCACtB,OAAO,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;6BACzB;yBACF;qBACF;iBACF;aACF,CAAC,CAAC;YACH,cAAc,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE;YACjC,IAAM,KAAK,GAAG,UAAU,CAAC;gBACvB,MAAM,EAAE,EAAC,KAAK,EAAE,0BAA0B,EAAC;gBAC3C,OAAO,EAAE;oBACP;wBACE,MAAM,EAAE,KAAK;wBACb,UAAU,EAAE;4BACV,GAAG,EAAE;gCACH,WAAW,EAAE,MAAM;gCACnB,OAAO,EAAE,eAAe;gCACxB,MAAM,EAAE,cAAc;gCACtB,OAAO,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;6BACzB;yBACF;qBACF;oBACD;wBACE,MAAM,EAAE,MAAM;wBACd,UAAU,EAAE;4BACV,GAAG,EAAE;gCACH,WAAW,EAAE,MAAM;gCACnB,OAAO,EAAE,eAAe;gCACxB,MAAM,EAAE,cAAc;6BACvB;yBACF;qBACF;iBACF;aACF,CAAC,CAAC;YACH,cAAc,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,2CAA2C;QAC3C,EAAE,CAAC,sCAAsC,EAAE,GAAG,CAAC,IAAI,CAAC,UAAC,WAAW;YAC9D,IAAM,KAAK,GAAG,UAAU,CAAC;gBACvB,MAAM,EAAE,EAAC,KAAK,EAAE,0BAA0B,EAAC;gBAC3C,OAAO,EAAE;oBACP;wBACE,MAAM,EAAE,KAAK;wBACb,UAAU,EAAE;4BACV,GAAG,EAAE;gCACH,WAAW,EAAE,MAAM;gCACnB,OAAO,EAAE,eAAe;gCACxB,MAAM,EAAE,cAAc;gCACtB,OAAO,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;6BACzB;yBACF;qBACF;oBACD;wBACE,MAAM,EAAE,MAAM;wBACd,UAAU,EAAE;4BACV,GAAG,EAAE;gCACH,WAAW,EAAE,MAAM;gCACnB,OAAO,EAAE,eAAe;gCACxB,MAAM,EAAE,cAAc;gCACtB,OAAO,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;6BACzB;yBACF;qBACF;iBACF;aACF,CAAC,CAAC;YACH,cAAc,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAChE,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,wBAAwB,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QAC1G,CAAC,CAAC,CAAC,CAAC;QAEJ,EAAE,CAAC,4BAA4B,EAAE;YAC/B,IAAM,KAAK,GAAG,UAAU,CAAC;gBACvB,MAAM,EAAE,EAAC,KAAK,EAAE,0BAA0B,EAAC;gBAC3C,OAAO,EAAE;oBACP;wBACE,MAAM,EAAE,OAAO;wBACf,UAAU,EAAE;4BACV,GAAG,EAAE;gCACH,WAAW,EAAE,MAAM;gCACnB,OAAO,EAAE,eAAe;gCACxB,MAAM,EAAE,cAAc;6BACvB;4BACD,GAAG,EAAE,EAAC,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAC;yBAC7C;qBACF,EAAC;wBACA,MAAM,EAAE,KAAK;wBACb,UAAU,EAAE;4BACV,GAAG,EAAE;gCACH,WAAW,EAAE,MAAM;gCACnB,OAAO,EAAE,eAAe;gCACxB,MAAM,EAAE,cAAc;6BACvB;4BACD,GAAG,EAAE,EAAC,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAC;yBAC7C;qBACF;iBACF;aACF,CAAC,CAAC;YACH,cAAc,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE;YACvC,IAAM,KAAK,GAAG,UAAU,CAAC;gBACvB,MAAM,EAAE;oBACN,KAAK,EAAE,mBAAmB;oBAC1B,QAAQ,EAAE;wBACR,MAAM,EAAE,KAAK;qBACd;iBACF;gBACD,MAAM,EAAE,OAAO;gBACf,UAAU,EAAE;oBACV,WAAW,EAAE;wBACX,OAAO,EAAE,WAAW;wBACpB,MAAM,EAAE,cAAc;qBACvB;oBACD,UAAU,EAAE;wBACV,OAAO,EAAE,UAAU;wBACnB,MAAM,EAAE,cAAc;qBACvB;iBACF;aACF,CAAC,CAAC;YACH,cAAc,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE;YACzC,IAAM,KAAK,GAAG,UAAU,CAAC;gBACvB,MAAM,EAAE,UAAU;gBAClB,MAAM,EAAE,EAAC,KAAK,EAAE,kBAAkB,EAAC;gBACnC,WAAW,EAAE;oBACX;wBACE,QAAQ,EAAE,IAAI;wBACd,MAAM,EAAE;4BACN,MAAM,EAAE;gCACN,KAAK,EAAE,kBAAkB;gCACzB,QAAQ,EAAE,EAAC,MAAM,EAAE,UAAU,EAAC,SAAS,EAAE,QAAQ,EAAC;6BACnD;4BACD,KAAK,EAAE,IAAI;yBACZ;wBACD,IAAI,EAAE,KAAK;qBACZ;iBACF;gBACD,UAAU,EAAE;oBACV,OAAO,EAAE,EAAC,OAAO,EAAE,KAAK,EAAC,MAAM,EAAE,SAAS,EAAC;iBAC5C;aACF,CAAC,CAAC;YACH,cAAc,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE;QACrB,EAAE,CAAC,kEAAkE,EAAE,GAAG,CAAC,IAAI,CAAC,UAAC,MAAM;YACrF,IAAM,KAAK,GAAG,UAAU,CAAC;gBACvB,MAAM,EAAE,EAAC,KAAK,EAAE,0BAA0B,EAAC;gBAC3C,OAAO,EAAE;oBACP;wBACE,MAAM,EAAE,QAAQ;wBAChB,UAAU,EAAE;4BACV,GAAG,EAAE;gCACH,OAAO,EAAE,GAAG;gCACZ,MAAM,EAAE,SAAS;gCACjB,OAAO,EAAE,EAAC,WAAW,EAAE,EAAE,EAAC;6BAC3B;yBACF;qBACF;oBACD;wBACE,MAAM,EAAE,OAAO;wBACf,UAAU,EAAE;4BACV,GAAG,EAAE;gCACH,OAAO,EAAE,GAAG;gCACZ,MAAM,EAAE,SAAS;gCACjB,OAAO,EAAE,EAAC,WAAW,EAAE,EAAE,EAAC;6BAC3B;yBACF;qBACF;iBACF;aACF,CAAC,CAAC;YACH,UAAU,CAAC,KAAK,CAAC,CAAC;YAClB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC,CAAC;YAC1E,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC,CAAC;QAEJ,QAAQ,CAAC,iBAAiB,EAAE;YAC1B,EAAE,CAAC,4DAA4D,EAAE;gBAC/D,IAAM,KAAK,GAAG,uBAAuB,CAAC;oBACpC,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC;qBACtC;iBACF,CAAC,CAAC;gBACH,IAAM,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;gBAC3C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAC3C,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAC,IAAI,EAAE,EAAE,EAAC,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mHAAmH,EAAE;YACtH,IAAM,KAAK,GAAG,uBAAuB,CAAC;gBACpC,IAAI,EAAE,KAAK;gBACX,QAAQ,EAAE;oBACR,CAAC,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAC,EAAC;iBAC3E;aACF,CAAC,CAAC;YACH,IAAM,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;YAC3C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kIAAkI,EAAE;YACrI,IAAM,KAAK,GAAG,uBAAuB,CAAC;gBACpC,IAAI,EAAE,KAAK;gBACX,QAAQ,EAAE;oBACR,CAAC,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC,EAAC;iBAC7D;gBACD,MAAM,EAAE;oBACN,KAAK,EAAE,EAAC,gBAAgB,EAAE,GAAG,EAAC;iBAC/B;aACF,CAAC,CAAC;YACH,IAAM,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;YAC3C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YAC/C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,oBAAoB,EAAE;YAC7B,IAAM,KAAK,GAAG,uBAAuB,CAAC;gBACpC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC;iBAC1C;aACF,CAAC,CAAC;YAEH,IAAM,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAE/C,EAAE,CAAC,mCAAmC,EAAE;gBACtC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAC3C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;gBAC7C,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;wBAC/B,IAAI,EAAE,MAAM;wBACZ,KAAK,EAAE,QAAQ;wBACf,IAAI,EAAE,IAAI;qBACX,CAAC,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,oBAAoB,EAAE;YAC7B,IAAM,KAAK,GAAG,uBAAuB,CAAC;gBACpC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC;iBAC1C;aACF,CAAC,CAAC;YAEH,IAAM,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAE/C,EAAE,CAAC,sCAAsC,EAAE;gBACzC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAC3C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;gBAE7C,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;wBAC/B,IAAI,EAAE,MAAM;wBACZ,KAAK,EAAE,QAAQ;wBACf,IAAI,EAAE,IAAI;qBACX,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,yBAAyB,EAAE;YAClC,IAAM,KAAK,GAAG,uBAAuB,CAAC;gBAClC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAC;iBAC/C;aACF,CAAC,CAAC;YAEL,IAAM,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAE/C,EAAE,CAAC,kCAAkC,EAAE;gBACrC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAC3C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;gBAChD,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;gBAE3C,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;wBAC/B,IAAI,EAAE,MAAM;wBACZ,KAAK,EAAE,QAAQ;qBAChB,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,gBAAgB,EAAE;YACzB,IAAM,KAAK,GAAG,uBAAuB,CAAC;gBAClC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,EAAE,IAAI,EAAC;iBAC1D;aACF,CAAC,CAAC;YAEL,IAAM,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAE/C,EAAE,CAAC,2BAA2B,EAAE;gBAC9B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAC3C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,wBAAwB,EAAE;YACjC,IAAM,KAAK,GAAG,uBAAuB,CAAC;gBAClC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,IAAI,EAAC;iBACrD;aACF,CAAC,CAAC;YAEL,IAAM,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAE/C,EAAE,CAAC,2BAA2B,EAAE;gBAC9B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAC3C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,kBAAkB,EAAE;YAC3B,IAAM,KAAK,GAAG,uBAAuB,CAAC;gBAClC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,OAAO,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,EAAE,IAAI,EAAC;iBAC5D;aACF,CAAC,CAAC;YAEL,IAAM,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAEjD,EAAE,CAAC,2BAA2B,EAAE;gBAC9B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;gBAC7C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,eAAe,EAAE;YACxB,IAAM,KAAK,GAAG,uBAAuB,CAAC;gBAClC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,IAAI,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,EAAE,IAAI,EAAC;iBACzD;aACF,CAAC,CAAC;YAEL,IAAM,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAE9C,EAAE,CAAC,2BAA2B,EAAE;gBAC9B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;gBAC1C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,sBAAsB,EAAE;YAC/B,IAAM,KAAK,GAAG,uBAAuB,CAAC;gBAClC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE;oBACR,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAC;iBAC7D;aACF,CAAC,CAAC;YAEL,IAAM,KAAK,GAAG,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAE/C,EAAE,CAAC,2BAA2B,EAAE;gBAC9B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBAC3C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,kBAAkB,EAAE;YAC3B,IAAM,KAAK,GAAG,uBAAuB,CAAC;gBACpC,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE;oBACR,CAAC,EAAE;wBACD,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU;wBAC/B,KAAK,EAAE,EAAC,MAAM,EAAE,EAAC,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAC,EAAC;qBACrD;oBACD,CAAC,EAAE;wBACD,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU;wBAC/B,KAAK,EAAE,EAAC,MAAM,EAAE,EAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,kBAAkB,EAAC,EAAC;qBAClE;iBACF;aACF,CAAC,CAAC;YAEH,IAAM,MAAM,GAAG,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;YAC5C,IAAM,MAAM,GAAG,KAAK,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;YAE5C,EAAE,CAAC,mCAAmC,EAAE;gBACtC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;gBAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,EACpD,gBAAgB,GAAG,sCAAsC,CAAC,CAAC;gBAE7D,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;gBAC9C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,EACpD,gBAAgB,GAAG,mDAAmD,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE;QAC3B,QAAQ,CAAC,iBAAiB,EAAE;YAC1B,EAAE,CAAC,2BAA2B,EAAE;gBAC9B,IAAM,KAAK,GAAG,mBAAmB,CAAC;oBAChC,KAAK,EAAE;wBACL,GAAG,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC;qBACxC;oBACD,IAAI,EAAE,EAAC,GAAG,EAAE,SAAS,EAAC;oBACtB,IAAI,EAAE;wBACJ,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE;4BACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;yBACtC;qBACF;iBACF,CAAC,CAAC;gBAEH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;wBAClD,IAAI,EAAE,kBAAkB;wBACxB,KAAK,EAAE,GAAG;qBACX,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,0DAA0D,EAAE;gBAC7D,IAAM,KAAK,GAAG,mBAAmB,CAAC;oBAChC,KAAK,EAAE;wBACL,GAAG,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC;qBACxC;oBACD,IAAI,EAAE,EAAC,GAAG,EAAE,SAAS,EAAC;oBACtB,IAAI,EAAE;wBACJ,IAAI,EAAE,EAAC,GAAG,EAAE,KAAK,EAAC;wBAClB,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE;4BACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;yBACtC;qBACF;iBACF,CAAC,CAAC;gBAEH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;wBAClD,IAAI,EAAE,YAAY;wBAClB,KAAK,EAAE,GAAG;qBACX,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,2DAA2D,EAAE;gBAC9D,IAAM,KAAK,GAAG,mBAAmB,CAAC;oBAChC,KAAK,EAAE;wBACL,GAAG,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC;qBACxC;oBACD,IAAI,EAAE,EAAC,GAAG,EAAE,SAAS,EAAC;oBACtB,IAAI,EAAE;wBACJ,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE;4BACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;yBACtC;qBACF;oBACD,OAAO,EAAE;wBACP,KAAK,EAAE;4BACL,CAAC,EAAE,aAAa;yBACjB;qBACF;iBACF,CAAC,CAAC;gBAEH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;wBAC9D,IAAI,EAAE,YAAY;wBAClB,KAAK,EAAE,GAAG;qBACX,CAAC,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {toSet} from 'vega-util';\nimport {parseScale, parseScaleCore} from '../../../src/compile/scale/parse';\nimport {SELECTION_DOMAIN} from '../../../src/compile/selection/selection';\nimport * as log from '../../../src/log';\nimport {NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES, SCALE_PROPERTIES} from '../../../src/scale';\nimport {without} from '../../../src/util';\nimport {parseModel, parseModelWithScale, parseUnitModelWithScale} from '../../util';\n\ndescribe('src/compile', function() {\n  it('NON_TYPE_RANGE_SCALE_PROPERTIES should be SCALE_PROPERTIES wihtout type, domain, and range properties', () => {\n    assert.deepEqual(\n      toSet(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES),\n      toSet(without(SCALE_PROPERTIES, ['type', 'domain', 'range', 'rangeStep', 'scheme']))\n    );\n  });\n\n  describe('parseScaleCore', () => {\n    it('respects explicit scale type', () => {\n      const model = parseModel({\n        \"data\": {\"url\": \"data/seattle-weather.csv\"},\n        \"layer\": [\n          {\n            \"mark\": \"bar\",\n            \"encoding\": {\n              \"y\": {\n                \"aggregate\": \"mean\",\n                \"field\": \"precipitation\",\n                \"type\": \"quantitative\"\n              }\n            }\n          },\n          {\n            \"mark\": \"rule\",\n            \"encoding\": {\n              \"y\": {\n                \"aggregate\": \"mean\",\n                \"field\": \"precipitation\",\n                \"type\": \"quantitative\",\n                \"scale\": {\"type\": \"log\"}\n              }\n            }\n          }\n        ]\n      });\n      parseScaleCore(model);\n      assert.equal(model.getScaleComponent('y').explicit.type, 'log');\n    });\n\n    it('respects explicit scale type', () => {\n      const model = parseModel({\n        \"data\": {\"url\": \"data/seattle-weather.csv\"},\n        \"layer\": [\n          {\n            \"mark\": \"bar\",\n            \"encoding\": {\n              \"y\": {\n                \"aggregate\": \"mean\",\n                \"field\": \"precipitation\",\n                \"type\": \"quantitative\",\n                \"scale\": {\"type\": \"log\"}\n              }\n            }\n          },\n          {\n            \"mark\": \"rule\",\n            \"encoding\": {\n              \"y\": {\n                \"aggregate\": \"mean\",\n                \"field\": \"precipitation\",\n                \"type\": \"quantitative\"\n              }\n            }\n          }\n        ]\n      });\n      parseScaleCore(model);\n      assert.equal(model.getScaleComponent('y').explicit.type, 'log');\n    });\n\n    // TODO: this actually shouldn't get merged\n    it('favors the first explicit scale type', log.wrap((localLogger) => {\n      const model = parseModel({\n        \"data\": {\"url\": \"data/seattle-weather.csv\"},\n        \"layer\": [\n          {\n            \"mark\": \"bar\",\n            \"encoding\": {\n              \"y\": {\n                \"aggregate\": \"mean\",\n                \"field\": \"precipitation\",\n                \"type\": \"quantitative\",\n                \"scale\": {\"type\": \"log\"}\n              }\n            }\n          },\n          {\n            \"mark\": \"rule\",\n            \"encoding\": {\n              \"y\": {\n                \"aggregate\": \"mean\",\n                \"field\": \"precipitation\",\n                \"type\": \"quantitative\",\n                \"scale\": {\"type\": \"pow\"}\n              }\n            }\n          }\n        ]\n      });\n      parseScaleCore(model);\n      assert.equal(model.getScaleComponent('y').explicit.type, 'log');\n      assert.equal(localLogger.warns[0], log.message.mergeConflictingProperty('type', 'scale', 'log', 'pow'));\n    }));\n\n    it('favors the band over point', () => {\n      const model = parseModel({\n        \"data\": {\"url\": \"data/seattle-weather.csv\"},\n        \"layer\": [\n          {\n            \"mark\": \"point\",\n            \"encoding\": {\n              \"y\": {\n                \"aggregate\": \"mean\",\n                \"field\": \"precipitation\",\n                \"type\": \"quantitative\"\n              },\n              \"x\": {\"field\": \"weather\", \"type\": \"nominal\"}\n            }\n          },{\n            \"mark\": \"bar\",\n            \"encoding\": {\n              \"y\": {\n                \"aggregate\": \"mean\",\n                \"field\": \"precipitation\",\n                \"type\": \"quantitative\"\n              },\n              \"x\": {\"field\": \"weather\", \"type\": \"nominal\"}\n            }\n          },\n        ]\n      });\n      parseScaleCore(model);\n      assert.equal(model.getScaleComponent('x').implicit.type, 'band');\n    });\n\n    it('correctly ignores x/y when lon/lat', () => {\n      const model = parseModel({\n        \"data\": {\n          \"url\": \"data/zipcodes.csv\",\n          \"format\": {\n            \"type\": \"csv\"\n          }\n        },\n        \"mark\": \"point\",\n        \"encoding\": {\n          \"longitude\": {\n            \"field\": \"longitude\",\n            \"type\": \"quantitative\"\n          },\n          \"latitude\": {\n            \"field\": \"latitude\",\n            \"type\": \"quantitative\"\n          }\n        }\n      });\n      parseScaleCore(model);\n      assert.isUndefined(model.getScaleComponent('x'));\n      assert.isUndefined(model.getScaleComponent('y'));\n    });\n\n    it('correctly ignores shape when geojson', () => {\n      const model = parseModel({\n        \"mark\": \"geoshape\",\n        \"data\": {\"url\": \"data/income.json\"},\n        \"transform\": [\n          {\n            \"lookup\": \"id\",\n            \"from\": {\n              \"data\": {\n                \"url\": \"data/us-10m.json\",\n                \"format\": {\"type\": \"topojson\",\"feature\": \"states\"}\n              },\n              \"key\": \"id\"\n            },\n            \"as\": \"geo\"\n          }\n        ],\n        \"encoding\": {\n          \"shape\": {\"field\": \"geo\",\"type\": \"geojson\"},\n        }\n      });\n      parseScaleCore(model);\n      assert.isUndefined(model.getScaleComponent('shape'));\n    });\n  });\n\n  describe('parseScale', () => {\n    it('does not throw warning when two equivalent objects are specified', log.wrap((logger) => {\n      const model = parseModel({\n        \"data\": {\"url\": \"data/seattle-weather.csv\"},\n        \"layer\": [\n          {\n            \"mark\": \"circle\",\n            \"encoding\": {\n              \"y\": {\n                \"field\": \"a\",\n                \"type\": \"nominal\",\n                \"scale\": {\"rangeStep\": 17}\n              }\n            }\n          },\n          {\n            \"mark\": \"point\",\n            \"encoding\": {\n              \"y\": {\n                \"field\": \"a\",\n                \"type\": \"nominal\",\n                \"scale\": {\"rangeStep\": 17}\n              }\n            }\n          }\n        ]\n      });\n      parseScale(model);\n      assert.deepEqual(model.getScaleComponent('y').explicit.range, {step: 17});\n      assert.equal(logger.warns.length, 0);\n    }));\n\n    describe('x ordinal point', () => {\n      it('should create an x point scale with rangeStep and no range', () => {\n        const model = parseUnitModelWithScale({\n          mark: \"point\",\n          encoding: {\n            x: {field: 'origin', type: \"nominal\"}\n          }\n        });\n        const scale = model.getScaleComponent('x');\n        assert.equal(scale.implicit.type, 'point');\n        assert.deepEqual(scale.implicit.range, {step: 21});\n      });\n    });\n\n    it('should output only padding without default paddingInner and paddingOuter if padding is specified for a band scale', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {field: 'origin', type: \"nominal\", scale: {type: 'band', padding: 0.6}}\n        }\n      });\n      const scale = model.getScaleComponent('x');\n      assert.equal(scale.explicit.padding, 0.6);\n      assert.isUndefined(scale.get('paddingInner'));\n      assert.isUndefined(scale.get('paddingOuter'));\n    });\n\n    it('should output default paddingInner and paddingOuter = paddingInner/2 if none of padding properties is specified for a band scale', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'bar',\n        encoding: {\n          x: {field: 'origin', type: \"nominal\", scale: {type: 'band'}}\n        },\n        config: {\n          scale: {bandPaddingInner: 0.3}\n        }\n      });\n      const scale = model.getScaleComponent('x');\n      assert.equal(scale.implicit.paddingInner, 0.3);\n      assert.equal(scale.implicit.paddingOuter, 0.15);\n      assert.isUndefined(scale.get('padding'));\n    });\n\n    describe('nominal with color', function() {\n      const model = parseUnitModelWithScale({\n        mark: \"point\",\n        encoding: {\n          color: {field: 'origin', type: \"nominal\"}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should create correct color scale', function() {\n        assert.equal(scale.implicit.name, 'color');\n        assert.equal(scale.implicit.type, 'ordinal');\n        assert.deepEqual(scale.domains, [{\n          data: 'main',\n          field: 'origin',\n          sort: true\n        }]);\n        assert.equal(scale.implicit.range, 'category');\n      });\n    });\n\n    describe('ordinal with color', function() {\n      const model = parseUnitModelWithScale({\n        mark: \"point\",\n        encoding: {\n          color: {field: 'origin', type: \"ordinal\"}\n        }\n      });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should create sequential color scale', function() {\n        assert.equal(scale.implicit.name, 'color');\n        assert.equal(scale.implicit.type, 'ordinal');\n\n        assert.deepEqual(scale.domains, [{\n          data: 'main',\n          field: 'origin',\n          sort: true\n        }]);\n      });\n    });\n\n    describe('quantitative with color', function() {\n      const model = parseUnitModelWithScale({\n          mark: \"point\",\n          encoding: {\n            color: {field: \"origin\", type: \"quantitative\"}\n          }\n        });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should create linear color scale', function() {\n        assert.equal(scale.implicit.name, 'color');\n        assert.equal(scale.implicit.type, 'sequential');\n        assert.equal(scale.implicit.range, 'ramp');\n\n        assert.deepEqual(scale.domains, [{\n          data: 'main',\n          field: 'origin'\n        }]);\n      });\n    });\n\n    describe('color with bin', function() {\n      const model = parseUnitModelWithScale({\n          mark: \"point\",\n          encoding: {\n            color: {field: \"origin\", type: \"quantitative\", bin: true}\n          }\n        });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should add correct scales', function() {\n        assert.equal(scale.implicit.name, 'color');\n        assert.equal(scale.implicit.type, 'bin-ordinal');\n      });\n    });\n\n    describe('ordinal color with bin', function() {\n      const model = parseUnitModelWithScale({\n          mark: \"point\",\n          encoding: {\n            color: {field: \"origin\", type: \"ordinal\", bin: true}\n          }\n        });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should add correct scales', function() {\n        assert.equal(scale.implicit.name, 'color');\n        assert.equal(scale.implicit.type, 'ordinal');\n      });\n    });\n\n    describe('opacity with bin', function() {\n      const model = parseUnitModelWithScale({\n          mark: \"point\",\n          encoding: {\n            opacity: {field: \"origin\", type: \"quantitative\", bin: true}\n          }\n        });\n\n      const scale = model.getScaleComponent('opacity');\n\n      it('should add correct scales', function() {\n        assert.equal(scale.implicit.name, 'opacity');\n        assert.equal(scale.implicit.type, 'bin-linear');\n      });\n    });\n\n    describe('size with bin', function() {\n      const model = parseUnitModelWithScale({\n          mark: \"point\",\n          encoding: {\n            size: {field: \"origin\", type: \"quantitative\", bin: true}\n          }\n        });\n\n      const scale = model.getScaleComponent('size');\n\n      it('should add correct scales', function() {\n        assert.equal(scale.implicit.name, 'size');\n        assert.equal(scale.implicit.type, 'bin-linear');\n      });\n    });\n\n    describe('color with time unit', function() {\n      const model = parseUnitModelWithScale({\n          mark: \"point\",\n          encoding: {\n            color: {field: 'origin', type: \"temporal\", timeUnit: \"year\"}\n          }\n        });\n\n      const scale = model.getScaleComponent('color');\n\n      it('should add correct scales', function() {\n        assert.equal(scale.implicit.name, 'color');\n        assert.equal(scale.implicit.type, 'sequential');\n      });\n    });\n\n    describe('selection domain', function() {\n      const model = parseUnitModelWithScale({\n        mark: \"area\",\n        encoding: {\n          x: {\n            field: \"date\", type: \"temporal\",\n            scale: {domain: {selection: \"brush\", encoding: \"x\"}},\n          },\n          y: {\n            field: \"date\", type: \"temporal\",\n            scale: {domain: {selection: \"foobar\", field: \"Miles_per_Gallon\"}},\n          }\n        }\n      });\n\n      const xScale = model.getScaleComponent('x');\n      const yscale = model.getScaleComponent('y');\n\n      it('should add a raw selection domain', function() {\n        assert.property(xScale.explicit, 'domainRaw');\n        assert.propertyVal(xScale.explicit.domainRaw, 'signal',\n          SELECTION_DOMAIN + '{\"encoding\":\"x\",\"selection\":\"brush\"}');\n\n        assert.property(yscale.explicit, 'domainRaw');\n        assert.propertyVal(yscale.explicit.domainRaw, 'signal',\n          SELECTION_DOMAIN + '{\"field\":\"Miles_per_Gallon\",\"selection\":\"foobar\"}');\n      });\n    });\n  });\n\n  describe('parseScaleDomain', function() {\n    describe('faceted domains', function() {\n      it('should use cloned subtree', function() {\n        const model = parseModelWithScale({\n          facet: {\n            row: {field: \"symbol\", type: \"nominal\"}\n          },\n          data: {url: \"foo.csv\"},\n          spec: {\n            mark: 'point',\n            encoding: {\n              x: {field: 'a', type: 'quantitative'},\n            }\n          }\n        });\n\n        assert.deepEqual(model.component.scales.x.domains, [{\n          data: 'scale_child_main',\n          field: 'a'\n        }]);\n      });\n\n      it('should not use cloned subtree if the data is not faceted', function() {\n        const model = parseModelWithScale({\n          facet: {\n            row: {field: \"symbol\", type: \"nominal\"}\n          },\n          data: {url: \"foo.csv\"},\n          spec: {\n            data: {url: 'foo'},\n            mark: 'point',\n            encoding: {\n              x: {field: 'a', type: 'quantitative'},\n            }\n          }\n        });\n\n        assert.deepEqual(model.component.scales.x.domains, [{\n          data: 'child_main',\n          field: 'a'\n        }]);\n      });\n\n      it('should not use cloned subtree if the scale is independent', function() {\n        const model = parseModelWithScale({\n          facet: {\n            row: {field: \"symbol\", type: \"nominal\"}\n          },\n          data: {url: \"foo.csv\"},\n          spec: {\n            mark: 'point',\n            encoding: {\n              x: {field: 'a', type: 'quantitative'},\n            }\n          },\n          resolve: {\n            scale: {\n              x: 'independent'\n            }\n          }\n        });\n\n        assert.deepEqual(model.children[0].component.scales.x.domains, [{\n          data: 'child_main',\n          field: 'a'\n        }]);\n      });\n    });\n  });\n});\n"]}