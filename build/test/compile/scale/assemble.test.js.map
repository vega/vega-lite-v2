{"version":3,"file":"assemble.test.js","sourceRoot":"","sources":["../../../../test/compile/scale/assemble.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {assembleScaleRange, assembleScales} from '../../../src/compile/scale/assemble';\nimport {parseConcatModel, parseFacetModelWithScale, parseLayerModel, parseRepeatModel, parseUnitModel, parseUnitModelWithScale} from '../../util';\n\ndescribe('compile/scale/assemble', () => {\n  describe('assembleScales', () => {\n    it('includes all scales for concat', () => {\n      const model = parseConcatModel({\n        vconcat: [{\n          mark: 'point',\n          encoding: {\n            x: {field: 'a', type: 'ordinal'}\n          }\n        },{\n          mark: 'bar',\n          encoding: {\n            x: {field: 'b', type: 'ordinal'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }]\n      });\n\n      model.parseScale();\n      const scales = assembleScales(model);\n      assert.equal(scales.length, 3);\n    });\n\n\n    it('includes all scales from children for layer, both shared and independent', () => {\n      const model = parseLayerModel({\n        layer: [{\n          mark: 'point',\n          encoding: {\n            x: {field: 'a', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        },{\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }],\n        resolve: {\n          scale: {\n            x: 'independent'\n          }\n        }\n      });\n\n      model.parseScale();\n      const scales = assembleScales(model);\n      assert.equal(scales.length, 3); // 2 x, 1 y\n    });\n\n    it('includes all scales for repeat', () => {\n      const model = parseRepeatModel({\n        repeat: {\n          row: ['Acceleration', 'Horsepower']\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: {repeat: 'row'}, type: 'quantitative'}\n          }\n        }\n      });\n\n      model.parseScale();\n      const scales = assembleScales(model);\n      assert.equal(scales.length, 2);\n    });\n\n    it('includes shared scales, but not independent scales (as they are nested) for facet.', () => {\n      const model = parseFacetModelWithScale\n      ({\n        facet: {\n          column: {field: 'a', type: 'quantitative', format: 'd'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        },\n        resolve: {\n          scale: {x: 'independent'}\n        }\n      });\n\n      const scales = assembleScales(model);\n      assert.equal(scales.length, 1);\n      assert.equal(scales[0].name, 'y');\n    });\n  });\n\n  describe('assembleScaleRange', () => {\n    it('replaces a range step constant with a signal', () => {\n      const model = parseUnitModel({\n        mark: 'point',\n        encoding: {\n          x: {field: 'x', type: 'nominal'}\n        }\n      });\n\n      assert.deepEqual(\n        assembleScaleRange({step: 21}, 'x', model, 'x'),\n        {step: {signal: 'x_step'}}\n      );\n    });\n\n    it('updates width signal when renamed.', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {field: 'x', type: 'quantitative'}\n        }\n      });\n\n      // mock renaming\n      model.renameLayoutSize('width', 'new_width');\n\n\n      assert.deepEqual(\n        assembleScaleRange([0, {signal: 'width'}], 'x', model, 'x'),\n        [0, {signal: 'new_width'}]\n      );\n    });\n\n    it('updates height signal when renamed.', () => {\n      const model = parseUnitModelWithScale({\n        mark: 'point',\n        encoding: {\n          x: {field: 'y', type: 'quantitative'}\n        }\n      });\n\n      // mock renaming\n      model.renameLayoutSize('height', 'new_height');\n\n      assert.deepEqual(\n        assembleScaleRange([0, {signal: 'height'}], 'x', model, 'x'),\n        [0, {signal: 'new_height'}]\n      );\n    });\n  });\n});\n"]}