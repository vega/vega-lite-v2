{"version":3,"file":"source.test.js","sourceRoot":"","sources":["../../../../test/compile/data/source.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\n\nimport {SourceNode} from '../../../src/compile/data/source';\nimport {Data} from '../../../src/data';\n\nfunction parse(data: Data) {\n  return new SourceNode(data);\n}\n\ndescribe('compile/data/source', () => {\n  describe('compileUnit', () => {\n    describe('with explicit values', () => {\n      const source = parse({\n        values: [{a: 1, b:2, c:3}, {a: 4, b:5, c:6}]\n      });\n\n      it('should have values', () => {\n        assert.deepEqual(source.data.values, [{a: 1, b:2, c:3}, {a: 4, b:5, c:6}]);\n      });\n\n      it('should have no source.format.type', () => {\n        assert.deepEqual(source.data.format, undefined);\n      });\n    });\n\n    describe('with explicit values as CSV', () => {\n      const source = parse({\n        values: \"a\\n1\\n2\\n3\",\n        format: {type: 'csv'}\n      });\n\n      it('should have values', () => {\n        assert.deepEqual(source.data.values, \"a\\n1\\n2\\n3\");\n      });\n\n      it('should have correct type', () => {\n        assert.equal(source.data.format.type, 'csv');\n      });\n    });\n\n    describe('with link to url', () => {\n      const source = parse({\n        url: 'http://foo.bar/file.csv',\n      });\n\n      it('should have format.type csv', () => {\n        assert.equal(source.data.format.type, 'csv');\n      });\n      it('should have correct url', () => {\n        assert.equal(source.data.url, 'http://foo.bar/file.csv');\n      });\n    });\n\n    describe('without file ending', () => {\n      const source = parse({\n        url: 'http://foo.bar/file.baz',\n      });\n\n      it('should have format.type json', () => {\n        assert.equal(source.data.format.type, 'json');\n      });\n    });\n\n    describe('with no data specified', () => {\n      const source = parse(undefined);\n\n      it('should provide placeholder source data', () => {\n        assert.equal(source.dataName, 'source');\n      });\n    });\n\n    describe('with named data source provided', () => {\n      const source = parse({name: 'foo'});\n\n      it('should provide named source data', () => {\n        assert.equal(source.dataName, 'foo');\n      });\n    });\n\n    describe('data format', () => {\n      describe('json', () => {\n        it('should include property if specified', () => {\n          const source = parse({\n            url: 'http://foo.bar',\n            format: {type: 'json', property: 'baz'}\n          });\n\n          assert.equal(source.data.format.property, 'baz');\n        });\n      });\n\n      describe('topojson', () => {\n        describe('feature property is specified', () => {\n          const source = parse({\n            url: 'http://foo.bar',\n            format: {type: 'topojson', feature: 'baz'}\n          });\n\n          it('should have format.type topojson', () => {\n            assert.equal(source.data.format.type, 'topojson');\n          });\n          it('should have format.feature baz', () => {\n            assert.equal(source.data.format.feature, 'baz');\n          });\n        });\n\n        describe('mesh property is specified', () => {\n          const source = parse({\n            url: 'http://foo.bar',\n            format: {type: 'topojson', mesh: 'baz'}\n          });\n\n          it('should have format.type topojson', () => {\n            assert.equal(source.data.format.type, 'topojson');\n          });\n          it('should have format.mesh baz', () => {\n            assert.equal(source.data.format.mesh, 'baz');\n          });\n        });\n      });\n    });\n  });\n\n  describe('assemble', () => {\n    // TODO: write test\n  });\n});\n\n"]}