{"version":3,"file":"calculate.test.js","sourceRoot":"","sources":["../../../../test/compile/data/calculate.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAC9B,OAAO,EAAC,aAAa,EAAC,MAAM,qCAAqC,CAAC;AAElE,OAAO,EAAC,cAAc,EAAC,MAAM,YAAY,CAAC;AAI1C,+BAA+B,KAAqB;IAClD,IAAM,IAAI,GAAG,aAAa,CAAC,oBAAoB,CAAC,IAAI,EAAE,KAAK,CAAkB,CAAC;IAC9E,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;AACzB,CAAC;AAED,QAAQ,CAAC,wBAAwB,EAAE;IACjC,QAAQ,CAAC,qBAAqB,EAAE;QAC9B,EAAE,CAAC,oCAAoC,EAAE;YACvC,IAAM,KAAK,GAAG,cAAc,CAAC;gBAC3B,IAAI,EAAE;oBACJ,MAAM,EAAE;wBACN,EAAC,CAAC,EAAE,GAAG,EAAC,CAAC,EAAE,EAAE,EAAC,EAAE,EAAC,CAAC,EAAE,GAAG,EAAC,CAAC,EAAE,EAAE,EAAC,EAAE,EAAC,CAAC,EAAE,GAAG,EAAC,CAAC,EAAE,EAAE,EAAC;qBAC/C;iBACF;gBACD,IAAI,EAAE,KAAK;gBACT,QAAQ,EAAE;oBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAC;oBACvD,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;iBACtC;aACJ,CAAC,CAAC;YACH,IAAM,KAAK,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;YAC3C,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;gBACpB,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,wEAAwE;gBAC9E,EAAE,EAAE,gBAAgB;aACrB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\nimport {CalculateNode} from '../../../src/compile/data/calculate';\nimport {ModelWithField} from '../../../src/compile/model';\nimport {parseUnitModel} from '../../util';\n\n\n\nfunction assembleFromSortArray(model: ModelWithField) {\n  const node = CalculateNode.parseAllForSortIndex(null, model) as CalculateNode;\n  return node.assemble();\n}\n\ndescribe('compile/data/calculate', () => {\n  describe('makeAllForSortIndex', () => {\n    it('produces correct formula transform', () => {\n      const model = parseUnitModel({\n        data: {\n          values: [\n            {a: 'A',b: 28}, {a: 'B',b: 55}, {a: 'C',b: 43}\n          ]\n        },\n        mark: 'bar',\n          encoding: {\n            x: {field: 'a', type: 'ordinal', sort: ['B', 'A', 'C']},\n            y: {field: 'b', type: 'quantitative'}\n          }\n      });\n      const nodes = assembleFromSortArray(model);\n      expect(nodes).toEqual({\n        type: 'formula',\n        expr: 'datum[\"a\"]===\"B\" ? 0 : datum[\"a\"]===\"A\" ? 1 : datum[\"a\"]===\"C\" ? 2 : 3',\n        as: 'x_a_sort_index'\n      });\n    });\n  });\n});\n"]}