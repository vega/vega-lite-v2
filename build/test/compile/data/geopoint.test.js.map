{"version":3,"file":"geopoint.test.js","sourceRoot":"","sources":["../../../../test/compile/data/geopoint.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,YAAY,EAAC,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAC,YAAY,EAAC,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAC,QAAQ,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AAElD,OAAO,EAAC,cAAc,EAAC,MAAM,YAAY,CAAC;AAE1C,QAAQ,CAAC,uBAAuB,EAAE;IAChC,QAAQ,CAAC,SAAS,EAAE;QAClB,EAAE,CAAC,8CAA8C,EAAE;YACjD,IAAM,KAAK,GAAG,cAAc,CAAC;gBAC3B,MAAM,EAAE;oBACN,KAAK,EAAE,mBAAmB;oBAC1B,QAAQ,EAAE;wBACR,MAAM,EAAE,KAAK;qBACd;iBACF;gBACD,MAAM,EAAE,QAAQ;gBAChB,UAAU,EAAE;oBACV,WAAW,EAAE;wBACX,OAAO,EAAE,WAAW;wBACpB,MAAM,EAAE,cAAc;qBACvB;oBACD,UAAU,EAAE;wBACV,OAAO,EAAE,UAAU;wBACnB,MAAM,EAAE,cAAc;qBACvB;iBACF;aACF,CAAC,CAAC;YACH,KAAK,CAAC,KAAK,EAAE,CAAC;YAEd,IAAM,IAAI,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;YACpC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAEnC,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;;gBAG1B,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;gBAEtC,IAAM,SAAS,GAAuC,IAAK,CAAC,QAAQ,EAAE,CAAC;gBACvE,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;gBACzC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,UAAC,KAAK,IAAK,OAAA,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,EAAjC,CAAiC,CAAC,CAAC,CAAC;gBAC9F,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,UAAC,CAAC,IAAK,OAAA,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC,EAAzB,CAAyB,CAAC,CAAC,CAAC;gBACjG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;gBACvC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBACzC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC;YAVD,OAAO,IAAI,IAAI,IAAI;;aAUlB;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {assert} from 'chai';\nimport {DataFlowNode} from '../../../src/compile/data/dataflow';\nimport {GeoPointNode} from '../../../src/compile/data/geopoint';\nimport {contains, every} from '../../../src/util';\nimport {VgGeoPointTransform} from '../../../src/vega.schema';\nimport {parseUnitModel} from '../../util';\n\ndescribe('compile/data/geopoint', () => {\n  describe('geojson', function () {\n    it('should make transform and assemble correctly', () => {\n      const model = parseUnitModel({\n        'data': {\n          'url': 'data/zipcodes.csv',\n          'format': {\n            'type': 'csv'\n          }\n        },\n        'mark': 'circle',\n        'encoding': {\n          'longitude': {\n            'field': 'longitude',\n            'type': 'quantitative'\n          },\n          'latitude': {\n            'field': 'latitude',\n            'type': 'quantitative'\n          }\n        }\n      });\n      model.parse();\n\n      const root = new DataFlowNode(null);\n      GeoPointNode.parseAll(root, model);\n\n      let node = root.children[0];\n\n      while (node != null) {\n        assert.instanceOf(node, GeoPointNode);\n\n        const transform: VgGeoPointTransform = (<GeoPointNode>node).assemble();\n        assert.equal(transform.type, 'geopoint');\n        assert.isTrue(every(['longitude', 'latitude'], (field) => contains(transform.fields, field)));\n        assert.isTrue(every([model.getName('x'), model.getName('y')], (a) => contains(transform.as, a)));\n        assert.isDefined(transform.projection);\n        assert.isAtMost(node.children.length, 1);\n        node = node.children[0];\n      }\n    });\n  });\n});\n"]}