{"version":3,"file":"filterinvalid.test.js","sourceRoot":"","sources":["../../../../test/compile/data/filterinvalid.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {FilterInvalidNode} from '../../../src/compile/data/filterinvalid';\nimport {UnitModel} from '../../../src/compile/unit';\nimport {NormalizedUnitSpec, TopLevel} from '../../../src/spec';\nimport {mergeDeep} from '../../../src/util';\nimport {parseUnitModelWithScale} from '../../util';\n\n\nfunction parse(model: UnitModel) {\n  return FilterInvalidNode.make(null, model);\n}\n\ndescribe('compile/data/nullfilter', function() {\n  describe('compileUnit', function() {\n    const spec: NormalizedUnitSpec = {\n      mark: \"point\",\n      encoding: {\n        y: {field: 'qq', type: \"quantitative\"},\n        x: {field: 'tt', type: \"temporal\"},\n        color: {field: 'oo', type: \"ordinal\"},\n        shape: {field: 'nn', type: \"nominal\"}\n      }\n    };\n\n    it('should add filterNull for Q and T by default', function () {\n      const model = parseUnitModelWithScale(spec);\n      assert.deepEqual(parse(model).filter, {\n        qq: {field: 'qq', type: \"quantitative\"},\n        tt: {field: 'tt', type: \"temporal\"}\n      });\n    });\n\n    it('should add filterNull for Q and T when invalidValues is \"filter\".', function () {\n      const model = parseUnitModelWithScale(mergeDeep<TopLevel<NormalizedUnitSpec>>(spec, {\n        config: {\n          invalidValues: 'filter'\n        }\n      }));\n      assert.deepEqual(parse(model).filter, {\n        qq: {field: 'qq', type: \"quantitative\"},\n        tt: {field: 'tt', type: \"temporal\"}\n      });\n    });\n\n    it('should add no null filter if when invalidValues is null', function () {\n      const model = parseUnitModelWithScale(mergeDeep<TopLevel<NormalizedUnitSpec>>(spec, {\n        config: {\n          invalidValues: null\n        }\n      }));\n      assert.deepEqual(parse(model), null);\n    });\n\n    it ('should add no null filter for count field', () => {\n      const model = parseUnitModelWithScale({\n        mark: \"point\",\n        encoding: {\n          y: {aggregate: 'count', type: \"quantitative\"}\n        }\n      });\n\n      assert.deepEqual(parse(model), null);\n    });\n  });\n\n  describe('assemble', function() {\n    it ('should assemble simple filter', () => {\n      const model = parseUnitModelWithScale({\n        mark: \"point\",\n        encoding: {\n          y: {field: 'foo', type: \"quantitative\"}\n        }\n      });\n\n      assert.deepEqual(parse(model).assemble(), {\n        type: 'filter',\n        expr: 'datum[\"foo\"] !== null && !isNaN(datum[\"foo\"])'\n      });\n    });\n\n    it ('should assemble filter for nested data', () => {\n      const model = parseUnitModelWithScale({\n        mark: \"point\",\n        encoding: {\n          y: {field: 'foo.bar', type: \"quantitative\"}\n        }\n      });\n\n      assert.deepEqual(parse(model).assemble(), {\n        type: 'filter',\n        expr: 'datum[\"foo.bar\"] !== null && !isNaN(datum[\"foo.bar\"])'\n      });\n    });\n  });\n});\n"]}