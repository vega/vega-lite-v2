{"version":3,"file":"facet.test.js","sourceRoot":"","sources":["../../../../test/compile/data/facet.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {FacetNode} from '../../../src/compile/data/facet';\nimport {parseFacetModelWithScale} from '../../util';\n\ndescribe('compile/data/facet', function() {\n  describe('assemble', () => {\n    it('should calculate column distinct if child has an independent discrete scale with step', () => {\n      const model = parseFacetModelWithScale({\n        '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n        'description': 'A trellis bar chart showing the US population distribution of age groups and gender in 2000.',\n        'data': {'url': 'data/population.json'},\n        'facet': {'column': {'field': 'gender', 'type': 'nominal'}},\n        'spec': {\n          'mark': 'bar',\n          'encoding': {\n            'y': {\n              'aggregate': 'sum', 'field': 'people', 'type': 'quantitative',\n              'axis': {'title': 'population'}\n            },\n            'x': {\n              'field': 'age', 'type': 'ordinal',\n              'scale': {'rangeStep': 17}\n            },\n            'color': {\n              'field': 'gender', 'type': 'nominal',\n              'scale': {'range': ['#EA98D2','#659CCA']}\n            }\n          }\n        },\n        'resolve': {\n          'scale': {'x': 'independent'}\n        },\n        'config': {'view': {'fill': 'yellow'}}\n      });\n\n      const node = new FacetNode(null, model, 'facetName', 'dataName');\n      const data = node.assemble();\n\n      assert.deepEqual(data[0], {\n        name: 'column_domain',\n        source: 'dataName',\n        transform:[{\n          type: 'aggregate',\n          groupby: ['gender'],\n          fields: ['age'],\n          ops: ['distinct'],\n          as:['distinct_age']\n        }]\n      });\n    });\n\n    it('should calculate column and row distinct if child has an independent discrete scale with step and the facet has both row and column', () => {\n      const model = parseFacetModelWithScale({\n        '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n        'data': {\n          'values': [\n            {'r': 'r1', 'c': 'c1', 'a': 'a1', 'b': 'b1'},\n            {'r': 'r1', 'c': 'c1', 'a': 'a2', 'b': 'b2'},\n            {'r': 'r2', 'c': 'c2', 'a': 'a1', 'b': 'b1'},\n            {'r': 'r3', 'c': 'c2', 'a': 'a3', 'b': 'b2'}\n          ]\n        },\n        'facet': {\n          'row': {'field': 'r', 'type': 'nominal'},\n          'column': {'field': 'c', 'type': 'nominal'}\n        },\n        'spec': {\n          'mark': 'rect',\n          'encoding': {\n            'y': {'field': 'b', 'type': 'nominal'},\n            'x': {'field': 'a', 'type': 'nominal'}\n          }\n        },\n        'resolve': {\n          'scale': {\n            'x': 'independent',\n            'y': 'independent'\n          }\n        }\n      });\n\n      const node = new FacetNode(null, model, 'facetName', 'dataName');\n      const data = node.assemble();\n\n      // crossed data\n      assert.deepEqual(data[0], {\n        name: 'cross_column_domain_row_domain',\n        source: 'dataName',\n        transform: [{\n          type: 'aggregate',\n          groupby: ['c', 'r'],\n          fields: ['a', 'b'],\n          ops: ['distinct', 'distinct']\n        }]\n      });\n\n      assert.deepEqual(data[1], {\n        name: 'column_domain',\n        source: 'cross_column_domain_row_domain',\n        transform: [{\n          type: 'aggregate',\n          groupby: ['c'],\n          fields: ['distinct_a'],\n          ops: ['max'],\n          as: ['distinct_a']\n        }]\n      });\n\n      assert.deepEqual(data[2], {\n        name: 'row_domain',\n        source: 'cross_column_domain_row_domain',\n        transform: [{\n          type: 'aggregate',\n          groupby: ['r'],\n          fields: ['distinct_b'],\n          ops: ['max'],\n          as: ['distinct_b']\n        }]\n      });\n    });\n\n\n    it('should calculate column and row sort array', () => {\n      const model = parseFacetModelWithScale({\n        '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n        'data': {\n          'name': 'a'\n        },\n        'facet': {\n          'row': {'field': 'r', 'type': 'nominal', sort: ['r1', 'r2']},\n          'column': {'field': 'c', 'type': 'nominal', sort: ['c1', 'c2']}\n        },\n        'spec': {\n          'mark': 'rect',\n          'encoding': {\n            'y': {'field': 'b', 'type': 'quantitative'},\n            'x': {'field': 'a', 'type': 'quantitative'}\n          }\n        }\n      });\n\n      const node = new FacetNode(null, model, 'facetName', 'dataName');\n      const data = node.assemble();\n\n      assert.deepEqual(data[0], {\n        name: 'column_domain',\n        source: 'dataName',\n        transform: [{\n          type: 'aggregate',\n          groupby: ['c'],\n          fields: ['column_c_sort_index'],\n          ops: ['max'],\n          as: ['column_c_sort_index']\n        }]\n      });\n\n      assert.deepEqual(data[1], {\n        name: 'row_domain',\n        source: 'dataName',\n        transform: [{\n          type: 'aggregate',\n          groupby: ['r'],\n          fields: ['row_r_sort_index'],\n          ops: ['max'],\n          as: ['row_r_sort_index']\n        }]\n      });\n    });\n\n    it('should calculate column and row sort field', () => {\n      const model = parseFacetModelWithScale({\n        '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n        'data': {\n          'name': 'a'\n        },\n        'facet': {\n          'row': {'field': 'r', 'type': 'nominal', sort: {op: 'median', field: 'b'}},\n          'column': {'field': 'c', 'type': 'nominal', sort: {op: 'median', field: 'a'}}\n        },\n        'spec': {\n          'mark': 'rect',\n          'encoding': {\n            'y': {'field': 'b', 'type': 'quantitative'},\n            'x': {'field': 'a', 'type': 'quantitative'}\n          }\n        }\n      });\n\n      const node = new FacetNode(null, model, 'facetName', 'dataName');\n      const data = node.assemble();\n\n      assert.deepEqual(data[0], {\n        name: 'column_domain',\n        source: 'dataName',\n        transform: [{\n          type: 'aggregate',\n          groupby: ['c'],\n          fields: ['a'],\n          ops: ['median'],\n          as: ['median_a']\n        }]\n      });\n\n      assert.deepEqual(data[1], {\n        name: 'row_domain',\n        source: 'dataName',\n        transform: [{\n          type: 'aggregate',\n          groupby: ['r'],\n          fields: ['b'],\n          ops: ['median'],\n          as: ['median_b']\n        }]\n      });\n    });\n\n  });\n});\n"]}