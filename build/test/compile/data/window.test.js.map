{"version":3,"file":"window.test.js","sourceRoot":"","sources":["../../../../test/compile/data/window.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {WindowTransformNode} from '../../../src/compile/data/window';\nimport {Transform} from '../../../src/transform';\n\ndescribe('compile/data/window', () => {\n it('creates correct window nodes for calculating sort field of crossed facet', () => {\n    const window = WindowTransformNode.makeFromFacet(null, {\n      row: {field: 'r', type: 'nominal'},\n      column: {field: 'c', type: 'nominal', sort: {op: 'median', field: 'x'}}\n    });\n\n    expect(window.assemble()).toEqual({\n      type: 'window',\n      ops: ['median'],\n      fields: ['x'],\n      params: [null],\n      as: ['median_x_by_c'],\n      frame: [null, null],\n      groupby: ['c'],\n      sort: {\n        field: [],\n        order: []\n      }\n    });\n  });\n\n  it('does not create any window nodes for crossed facet', () => {\n    assert.deepEqual(WindowTransformNode.makeFromFacet(null, {\n      row: {field: 'a', type: 'nominal'}\n    }), null);\n  });\n\n\n  it('should return a proper vg transform', () => {\n    const transform: Transform = {\n      window: [\n        {\n          op: 'row_number',\n          as: 'ordered_row_number',\n        },\n      ],\n      ignorePeers: false,\n      sort:\n        [\n          {\n            field: 'f',\n            order: 'ascending'\n          }\n        ],\n      groupby: ['f'],\n      frame: [null, 0]\n    };\n    const window = new WindowTransformNode(null, transform);\n    assert.deepEqual(window.assemble(), {\n      type: 'window',\n      ops: ['row_number'],\n      fields: [null],\n      params: [null],\n      sort: {\n        field: [\"f\"],\n        order: [\"ascending\"],\n      },\n      ignorePeers: false,\n      as: ['ordered_row_number'],\n      frame: [null, 0],\n      groupby: ['f']\n    });\n  });\n\n  it('should augment as with default as', () => {\n    const transform: Transform = {\n      window: [\n        {\n          op: 'row_number',\n          as: undefined // intentionally omit for testing\n        },\n      ],\n      ignorePeers: false,\n      sort:\n        [\n          {\n            field: 'f',\n            order: 'ascending'\n          }\n        ],\n      groupby: ['f'],\n      frame: [null, 0]\n    };\n    const window = new WindowTransformNode(null, transform);\n    assert.deepEqual(window.assemble(), {\n      type: 'window',\n      ops: ['row_number'],\n      fields: [null],\n      params: [null],\n      sort: {\n        field: [\"f\"],\n        order: [\"ascending\"],\n      },\n      ignorePeers: false,\n      as: ['row_number'],\n      frame: [null, 0],\n      groupby: ['f']\n    });\n  });\n\n  it('should return a proper produced fields', () => {\n    const transform: Transform = {\n      window: [\n        {\n          op: 'row_number',\n          as: 'ordered_row_number',\n        },\n        {\n          op: 'count',\n          as: 'count_field'\n        },\n        {\n          op: 'sum',\n          as: 'sum_field'\n        }\n      ],\n      ignorePeers: false,\n      sort:\n        [\n          {\n            field:'f',\n            order:'ascending'\n          }\n        ],\n      groupby: ['f'],\n      frame: [null, 0]\n    };\n    const window = new WindowTransformNode(null, transform);\n    assert.deepEqual({\"count_field\": true, \"ordered_row_number\": true, \"sum_field\": true}, window.producedFields());\n  });\n\n  it('should clone to an equivalent version', () => {\n    const transform: Transform = {\n      window: [\n        {\n          op: 'row_number',\n          as: 'ordered_row_number',\n        },\n      ],\n      ignorePeers: false,\n      sort:\n        [\n          {\n            field:'f',\n            order:'ascending'\n          }\n        ],\n      groupby: ['f'],\n      frame: [null, 0]\n    };\n    const window = new WindowTransformNode(null, transform);\n    assert.deepEqual(window, window.clone());\n  });\n});\n"]}