{"version":3,"file":"assemble.test.js","sourceRoot":"","sources":["../../../../test/compile/data/assemble.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {AggregateNode} from '../../../src/compile/data/aggregate';\nimport {assembleRootData} from '../../../src/compile/data/assemble';\nimport {OutputNode} from '../../../src/compile/data/dataflow';\nimport {SourceNode} from '../../../src/compile/data/source';\nimport {WindowTransformNode} from '../../../src/compile/data/window';\nimport {Transform} from '../../../src/transform';\nimport {VgData} from '../../../src/vega.schema';\n\ndescribe('compile/data/assemble', () => {\n  describe('assembleData', () => {\n    it('should assemble named data source', () => {\n      const src = new SourceNode({name: 'foo'});\n      const outputNodeRefCounts = {};\n      const main = new OutputNode(null, 'mainOut', 'main', outputNodeRefCounts);\n      main.parent = src;\n\n      assert.equal(main.getSource(), 'mainOut');\n\n      const data = assembleRootData({\n        sources: {named: src},\n        outputNodes: {out: main},\n        outputNodeRefCounts,\n        isFaceted: false\n      }, {});\n\n      assert.equal(data.length, 1);\n      assert.equal(data[0].name, \"foo\");\n    });\n\n    it('should assemble raw and main output', () => {\n      const src = new SourceNode({url: 'foo.csv'});\n      const outputNodeRefCounts = {};\n      const raw = new OutputNode(null, 'rawOut', 'raw', outputNodeRefCounts);\n      raw.parent = src;\n      const agg = new AggregateNode(null, {a: true}, {b: {count: 'count_*'}});\n      agg.parent = raw;\n      const main = new OutputNode(null, 'mainOut', 'main', outputNodeRefCounts);\n      main.parent = agg;\n\n      assert.equal(raw.getSource(), 'rawOut');\n      assert.equal(main.getSource(), 'mainOut');\n\n      const data = assembleRootData({\n        sources: {named: src},\n        outputNodes: {out: main},\n        outputNodeRefCounts,\n        isFaceted: false\n      }, {});\n\n      assert.deepEqual<VgData[]>(data, [{\n        name: 'source_0',\n        url: 'foo.csv',\n        format: {type: 'csv'}\n      }, {\n        name: 'data_0',\n        source: 'source_0',\n        transform: [{\n          type: 'aggregate',\n          groupby: ['a'],\n          ops: ['count'],\n          fields: ['b'],\n          as: ['count_*']\n        }]}\n      ]);\n    });\n\n    it('should assemble window transform node', () => {\n      const src = new SourceNode({url: 'foo.csv'});\n      const outputNodeRefCounts = {};\n      const raw = new OutputNode(null, 'rawOut', 'raw', outputNodeRefCounts);\n      raw.parent = src;\n      const transform: Transform = {\n        window: [\n          {\n            op: 'row_number',\n            as: 'ordered_row_number',\n          },\n        ],\n        ignorePeers: false,\n        sort:\n          [\n            {\n              field:'f',\n              order:'ascending'\n            }\n          ],\n        groupby: ['f'],\n        frame: [null, 0]\n      };\n      const agg = new WindowTransformNode(null, transform);\n      agg.parent = raw;\n      const main = new OutputNode(null, 'mainOut', 'main', outputNodeRefCounts);\n      main.parent = agg;\n\n      assert.equal(raw.getSource(), 'rawOut');\n      assert.equal(main.getSource(), 'mainOut');\n\n      const data = assembleRootData({\n        sources: {named: src},\n        outputNodes: {out: main},\n        outputNodeRefCounts,\n        isFaceted: false\n      }, {});\n\n      assert.deepEqual<VgData[]>(data, [{\n        name: 'source_0',\n        url: 'foo.csv',\n        format: {type: 'csv'}\n      }, {\n        name: 'data_0',\n        source: 'source_0',\n        transform: [{\n          type: 'window',\n          ops: ['row_number'],\n          fields: [null],\n          params: [null],\n          sort : {\n            field: [\"f\"],\n            order: [\"ascending\"],\n          },\n          ignorePeers: false,\n          as: ['ordered_row_number'],\n          frame: [null, 0],\n          groupby: ['f']\n        }]}\n      ]);\n    });\n\n    it('should assemble named datasets with datastore', () => {\n      const src = new SourceNode({name: 'foo'});\n      const outputNodeRefCounts = {};\n      const main = new OutputNode(null, 'mainOut', 'main', outputNodeRefCounts);\n      main.parent = src;\n\n      const data = assembleRootData({\n        sources: {named: src},\n        outputNodes: {out: main},\n        outputNodeRefCounts,\n        isFaceted: false\n      }, {\n        foo: [1,2,3]\n      });\n\n      assert.deepEqual<VgData[]>(data, [{\n        name: 'foo',\n        values: [1,2,3]\n      }]);\n    });\n  });\n});\n"]}