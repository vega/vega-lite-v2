{"version":3,"file":"timeunit.test.js","sourceRoot":"","sources":["../../../../test/compile/data/timeunit.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,YAAY,EAAC,MAAM,oCAAoC,CAAC;AAGhE,OAAO,EAAC,cAAc,EAAC,MAAM,YAAY,CAAC;AAE1C,8BAA8B,KAAqB;IACjD,OAAO,YAAY,CAAC,gBAAgB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;AAC/D,CAAC;AAED,+BAA+B,CAAoB;IACjD,OAAO,YAAY,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;AAC5D,CAAC;AAED,QAAQ,CAAC,uBAAuB,EAAE;IAChC,QAAQ,CAAC,WAAW,EAAE;QAEpB,EAAE,CAAC,iDAAiD,EAAE;YAEpD,IAAM,KAAK,GAAG,cAAc,CAAC;gBAC3B,MAAM,EAAE,EAAC,QAAQ,EAAE,EAAE,EAAC;gBACtB,MAAM,EAAE,OAAO;gBACf,UAAU,EAAE;oBACV,GAAG,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAC;iBACvD;aACF,CAAC,CAAC;YAEH,MAAM,CAAC,SAAS,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAC;oBAC7C,IAAI,EAAE,SAAS;oBACf,EAAE,EAAE,SAAS;oBACb,IAAI,EAAE,+CAA+C;iBACtD,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sEAAsE,EAAE;YACzE,IAAM,CAAC,GAAsB,EAAC,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAC,CAAC;YAElF,MAAM,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,CAAC;oBAC1C,IAAI,EAAE,SAAS;oBACf,EAAE,EAAE,YAAY;oBAChB,IAAI,EAAE,kDAAkD;iBACzD,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {TimeUnitNode} from '../../../src/compile/data/timeunit';\nimport {ModelWithField} from '../../../src/compile/model';\nimport {TimeUnitTransform} from '../../../src/transform';\nimport {parseUnitModel} from '../../util';\n\nfunction assembleFromEncoding(model: ModelWithField) {\n  return TimeUnitNode.makeFromEncoding(null, model).assemble();\n}\n\nfunction assembleFromTransform(t: TimeUnitTransform) {\n  return TimeUnitNode.makeFromTransform(null, t).assemble();\n}\n\ndescribe('compile/data/timeunit', () => {\n  describe('parseUnit', () => {\n\n    it('should return a dictionary of formula transform', () => {\n\n      const model = parseUnitModel({\n        \"data\": {\"values\": []},\n        \"mark\": \"point\",\n        \"encoding\": {\n          \"x\": {field: 'a', type: 'temporal', timeUnit: 'month'}\n        }\n      });\n\n      assert.deepEqual(assembleFromEncoding(model), [{\n        type: 'formula',\n        as: 'month_a',\n        expr: 'datetime(0, month(datum[\"a\"]), 1, 0, 0, 0, 0)'\n      }]);\n    });\n\n    it('should return a dictionary of formula transform from transform array', () => {\n      const t: TimeUnitTransform = {field: 'date', as: 'month_date', timeUnit: 'month'};\n\n      assert.deepEqual(assembleFromTransform(t), [{\n        type: 'formula',\n        as: 'month_date',\n        expr: 'datetime(0, month(datum[\"date\"]), 1, 0, 0, 0, 0)'\n      }]);\n    });\n  });\n});\n"]}