{"version":3,"file":"dataflow.test.js","sourceRoot":"","sources":["../../../../test/compile/data/dataflow.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {DataFlowNode} from '../../../src/compile/data/dataflow';\n\ndescribe('compile/data/dataflow', function() {\n  describe('DataFlowNode', function() {\n    describe('swap', () => {\n      it('should correctly swap two nodes in a simple chain', function() {\n        const a = new DataFlowNode(null, 'a');\n        const b = new DataFlowNode(a, 'b');\n\n        const c = new DataFlowNode(b, 'c');\n\n        const d = new DataFlowNode(c, 'd');\n\n        c.swapWithParent();\n\n        assert.equal(a.numChildren(), 1);\n        assert.equal(a.children[0].debugName, 'c');\n\n        assert.equal(b.numChildren(), 1);\n        assert.equal(b.children[0].debugName, 'd');\n\n        assert.equal(c.numChildren(), 1);\n        assert.equal(c.children[0].debugName, 'b');\n\n        assert.equal(d.numChildren(), 0);\n      });\n\n      it('should correctly swap two nodes', function() {\n        const root = new DataFlowNode(null, 'root');\n        const parent = new DataFlowNode(root, 'parent');\n\n        const node = new DataFlowNode(parent, 'node');\n\n        const child1 = new DataFlowNode(node, 'child1');\n        const child2 = new DataFlowNode(node, 'child2');\n\n        const parentChild1 = new DataFlowNode(parent, 'parentChild1');\n        const parentChild2 = new DataFlowNode(parent, 'parentChild2');\n\n        node.swapWithParent();\n\n        assert.equal(root.numChildren(), 1);\n        assert.equal(root.children[0].debugName, 'node');\n        assert.equal(node.parent.debugName, 'root');\n\n        assert.equal(node.numChildren(), 1);\n        assert.equal(node.children[0].debugName, 'parent');\n        assert.equal(parent.parent.debugName, 'node');\n\n        assert.equal(parent.numChildren(), 4);\n        parent.children.forEach(c => {\n          assert.equal(c.numChildren(), 0);\n          assert.equal(c.parent.debugName, 'parent');\n        });\n\n        assert.equal(child1.debugName, 'child1');\n        assert.equal(child2.debugName, 'child2');\n        assert.equal(parentChild1.debugName, 'parentChild1');\n        assert.equal(parentChild2.debugName, 'parentChild2');\n      });\n    });\n\n    describe('remove', function() {\n      it('should remove node from dataflow', function() {\n        const a = new DataFlowNode(null, 'a');\n        const b = new DataFlowNode(a, 'b');\n\n        const c = new DataFlowNode(b, 'c');\n\n        assert.deepEqual(a.children, [b]);\n        assert.equal(b.parent, a);\n        assert.equal(c.parent, b);\n\n        b.remove();\n\n        assert.deepEqual(a.children, [c]);\n        assert.equal(c.parent, a);\n      });\n    });\n\n    describe('insertAsParentOf', function() {\n      it('should insert node into dataflow', function() {\n        const a = new DataFlowNode(null, 'a');\n        const anotherChild = new DataFlowNode(a, 'a');\n        const b = new DataFlowNode(null, 'b');\n        const c = new DataFlowNode(a, 'c');\n\n        b.insertAsParentOf(c);\n\n        assert.sameDeepMembers(a.children, [anotherChild, b]);\n        assert.equal(b.parent, a);\n        assert.equal(c.parent, b);\n        assert.equal(anotherChild.parent, a);\n      });\n    });\n  });\n});\n"]}