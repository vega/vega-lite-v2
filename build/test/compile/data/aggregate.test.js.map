{"version":3,"file":"aggregate.test.js","sourceRoot":"","sources":["../../../../test/compile/data/aggregate.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\n\nimport {AggregateNode} from '../../../src/compile/data/aggregate';\nimport {AggregateTransform} from '../../../src/transform';\nimport {StringSet} from '../../../src/util';\nimport {VgAggregateTransform} from '../../../src/vega.schema';\nimport {parseUnitModel} from '../../util';\n\ndescribe('compile/data/summary', function () {\n  describe('clone', function() {\n    it('should have correct type', function() {\n      const agg = new AggregateNode(null, {}, {});\n      assert(agg instanceof AggregateNode);\n      const clone = agg.clone();\n      assert(clone instanceof AggregateNode);\n    });\n\n    it('should have make a deep copy', function() {\n      const agg = new AggregateNode(null, {foo: true}, {});\n      const clone = agg.clone();\n      clone.addDimensions(['bar']);\n      assert.deepEqual<StringSet>(clone.dependentFields(), {'foo': true, 'bar': true});\n      assert.deepEqual<StringSet>(agg.dependentFields(), {'foo': true});\n    });\n  });\n\n  describe('parseUnit', function() {\n    it('should produce the correct summary component for sum(Acceleration) and count(*)' , () => {\n      const model = parseUnitModel({\n        mark: \"point\",\n        encoding: {\n          'y': {\n            'aggregate': 'sum',\n            'field': 'Acceleration',\n            'type': \"quantitative\"\n          },\n          'x': {\n            'field': 'Origin',\n            'type': \"ordinal\"\n          },\n          color: {type: \"quantitative\", aggregate: 'count'}\n        }\n      });\n\n      const agg = AggregateNode.makeFromEncoding(null, model);\n      assert.deepEqual<VgAggregateTransform>(agg.assemble(), {\n        type: 'aggregate',\n        groupby: ['Origin'],\n        ops: ['sum', 'count'],\n        fields: ['Acceleration', '*'],\n        as: [\n          \"sum_Acceleration\",\n          \"count_*\"\n        ]\n      });\n    });\n\n    it('should produce the correct summary component for aggregated plot with detail arrays', function() {\n      const model = parseUnitModel({\n        mark: \"point\",\n        encoding: {\n          'x': {'aggregate': 'mean', 'field': 'Displacement', 'type': \"quantitative\"},\n          'detail': [\n            {'field': 'Origin', 'type': \"ordinal\"},\n            {'field': 'Cylinders', 'type': \"quantitative\"}\n          ]\n        }\n      });\n\n      const agg = AggregateNode.makeFromEncoding(null, model);\n      assert.deepEqual<VgAggregateTransform>(agg.assemble(), {\n        type: 'aggregate',\n        groupby: ['Origin', 'Cylinders'],\n        ops: ['mean'],\n        fields: ['Displacement'],\n        as: ['mean_Displacement']\n      });\n    });\n\n    it('should include conditional field in the summary component', function() {\n      const model = parseUnitModel({\n        mark: \"point\",\n        encoding: {\n          'x': {'aggregate': 'mean', 'field': 'Displacement', 'type': \"quantitative\"},\n          color: {\n            condition: {selection: 'a', field: 'Origin', 'type': \"ordinal\"},\n            value: 'red'\n          }\n        }\n      });\n\n      const agg = AggregateNode.makeFromEncoding(null, model);\n      assert.deepEqual<VgAggregateTransform>(agg.assemble(), {\n        type: 'aggregate',\n        groupby: ['Origin'],\n        ops: ['mean'],\n        fields: ['Displacement'],\n        as: ['mean_Displacement']\n      });\n    });\n\n    it('should add min and max if needed for unaggregated scale domain', function() {\n      const model = parseUnitModel({\n        mark: \"point\",\n        encoding: {\n          'x': {'aggregate': 'mean', 'field': 'Displacement', 'type': \"quantitative\", scale: {domain: 'unaggregated'}},\n        }\n      });\n\n      const agg = AggregateNode.makeFromEncoding(null, model);\n      assert.deepEqual<VgAggregateTransform>(agg.assemble(), {\n        type: 'aggregate',\n        groupby: [],\n        ops: ['mean', 'min', 'max'],\n        fields: ['Displacement', 'Displacement', 'Displacement'],\n        as: [\n          \"mean_Displacement\",\n          \"min_Displacement\",\n          \"max_Displacement\"\n        ]\n      });\n    });\n\n    it('should add correct dimensions when binning', function() {\n      const model = parseUnitModel({\n        mark: \"point\",\n        encoding: {\n          'x': {'bin': true, 'field': 'Displacement', 'type': \"quantitative\"},\n          'y': {'bin': true, 'field': 'Acceleration', 'type': \"ordinal\"},\n          'color': {'aggregate': 'count', 'type': \"quantitative\"}\n        }\n      });\n\n      const agg = AggregateNode.makeFromEncoding(null, model);\n      assert.deepEqual<VgAggregateTransform>(agg.assemble(), {\n        type: 'aggregate',\n        groupby: [\n          'bin_maxbins_10_Displacement',\n          'bin_maxbins_10_Displacement_end',\n          'bin_maxbins_10_Acceleration',\n          'bin_maxbins_10_Acceleration_end',\n          'bin_maxbins_10_Acceleration_range'\n        ],\n        ops: ['count'],\n        fields: ['*'],\n        as: ['count_*']\n      });\n    });\n\n    it('should produce the correct summary component from transform array', function() {\n      const t: AggregateTransform = {\n        aggregate: [\n          {op: 'mean', field: 'Displacement', as: 'Displacement_mean'},\n          {op: 'sum', field: 'Acceleration', as: 'Acceleration_sum'}\n        ],\n        groupby: ['Displacement_mean', 'Acceleration_sum']};\n\n      const agg = AggregateNode.makeFromTransform(null, t);\n      assert.deepEqual<VgAggregateTransform>(agg.assemble(), {\n        type: 'aggregate',\n        groupby: ['Displacement_mean', 'Acceleration_sum'],\n        ops: ['mean', 'sum'],\n        fields: ['Displacement', 'Acceleration'],\n        as: ['Displacement_mean', 'Acceleration_sum']\n      });\n    });\n\n    it('should produce the correct summary component from transform array with different aggregrations for the same field', function() {\n      const t: AggregateTransform = {aggregate: [\n        {op: 'mean', field: 'Displacement', as: 'Displacement_mean'},\n        {op: 'max', field: 'Displacement', as: 'Displacement_max'},\n        {op: 'sum', field: 'Acceleration', as: 'Acceleration_sum'}],\n        groupby: ['Displacement_mean', 'Acceleration_sum']};\n\n      const agg = AggregateNode.makeFromTransform(null, t);\n      assert.deepEqual<VgAggregateTransform>(agg.assemble(), {\n        type: 'aggregate',\n        groupby: ['Displacement_mean', 'Acceleration_sum'],\n        ops: ['mean', 'max', 'sum'],\n        fields: ['Displacement', 'Displacement', 'Acceleration'],\n        as: ['Displacement_mean', 'Displacement_max', 'Acceleration_sum']\n      });\n    });\n  });\n});\n"]}