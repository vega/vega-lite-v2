{"version":3,"file":"bin.test.js","sourceRoot":"","sources":["../../../../test/compile/data/bin.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\n\nimport {BinNode} from '../../../src/compile/data/bin';\nimport {Model, ModelWithField} from '../../../src/compile/model';\nimport {BinTransform} from '../../../src/transform';\nimport {VgTransform} from '../../../src/vega.schema';\nimport {parseUnitModelWithScale} from '../../util';\n\nfunction assembleFromEncoding(model: ModelWithField) {\n  return BinNode.makeFromEncoding(null, model).assemble();\n}\n\nfunction assembleFromTransform(model: Model, t: BinTransform) {\n  return BinNode.makeFromTransform(null, t, model).assemble();\n}\n\ndescribe('compile/data/bin', function() {\n  it('should add bin transform and correctly apply bin with custom extent', function() {\n    const model = parseUnitModelWithScale({\n      mark: 'point',\n      encoding: {\n        y: {\n          bin: {extent: [0, 100]},\n          'field': 'Acceleration',\n          'type': 'quantitative'\n        }\n      }\n    });\n\n    assert.deepEqual<VgTransform>(assembleFromEncoding(model)[0], {\n      type: 'bin',\n      field: 'Acceleration',\n      as: ['bin_extent_0_100_maxbins_10_Acceleration', 'bin_extent_0_100_maxbins_10_Acceleration_end'],\n      maxbins: 10,\n      extent: [0, 100],\n      signal: \"bin_extent_0_100_maxbins_10_Acceleration_bins\",\n    });\n  });\n\n  it ('should add bin transform and correctly apply bin for binned field without custom extent', () => {\n    const model = parseUnitModelWithScale({\n      mark: 'point',\n      encoding: {\n        y: {\n          bin: true,\n          'field': 'Acceleration',\n          'type': 'quantitative'\n        }\n      }\n    });\n    const transform = assembleFromEncoding(model);\n    assert.deepEqual(transform.length, 2);\n    assert.deepEqual<VgTransform>(transform[0], {\n      type: 'extent',\n      field: 'Acceleration',\n      signal: 'bin_maxbins_10_Acceleration_extent'\n    });\n    assert.deepEqual<VgTransform>(transform[1], {\n      type: 'bin',\n      field: 'Acceleration',\n      as: ['bin_maxbins_10_Acceleration', 'bin_maxbins_10_Acceleration_end'],\n      maxbins: 10,\n      signal: 'bin_maxbins_10_Acceleration_bins',\n      extent: {signal: 'bin_maxbins_10_Acceleration_extent'}\n    });\n  });\n\n  it('should apply the bin transform only once for a binned field encoded in multiple channels', () => {\n    const model = parseUnitModelWithScale({\n      data: {url: \"data/movies.json\"},\n      mark: \"circle\",\n      encoding: {\n        x: {\n          bin: true,\n          field: \"Rotten_Tomatoes_Rating\",\n          type: \"quantitative\"\n        },\n        color: {\n          bin: {\"maxbins\": 10},\n          field: \"Rotten_Tomatoes_Rating\",\n          type: \"ordinal\"\n        }\n      }\n    });\n    const transform = assembleFromEncoding(model);\n    assert.deepEqual(transform.length, 3);\n    assert.deepEqual<VgTransform>(transform[0], {\n      type: 'extent',\n      field: 'Rotten_Tomatoes_Rating',\n      signal: 'bin_maxbins_10_Rotten_Tomatoes_Rating_extent'\n    });\n    assert.deepEqual<VgTransform>(transform[1], {\n      type: 'bin',\n      field: 'Rotten_Tomatoes_Rating',\n      as:\n      [ 'bin_maxbins_10_Rotten_Tomatoes_Rating',\n        'bin_maxbins_10_Rotten_Tomatoes_Rating_end' ],\n      signal: 'bin_maxbins_10_Rotten_Tomatoes_Rating_bins',\n      maxbins: 10,\n      extent: {signal: 'bin_maxbins_10_Rotten_Tomatoes_Rating_extent'}\n    });\n    assert.deepEqual<VgTransform>(transform[2], {\n      type: 'formula',\n      as: 'bin_maxbins_10_Rotten_Tomatoes_Rating_range',\n      expr: `datum[\"bin_maxbins_10_Rotten_Tomatoes_Rating\"] === null || isNaN(datum[\"bin_maxbins_10_Rotten_Tomatoes_Rating\"]) ? \"null\" : format(datum[\"bin_maxbins_10_Rotten_Tomatoes_Rating\"], \"\") + \" - \" + format(datum[\"bin_maxbins_10_Rotten_Tomatoes_Rating_end\"], \"\")`\n    });\n  });\n\n  it('should add bin transform from transform array and correctly apply bin with custom extent', function() {\n    const t: BinTransform = {\n      bin: {extent: [0, 100]},\n      field: 'Acceleration',\n      as: 'binned_acceleration'\n    };\n\n    const model = parseUnitModelWithScale({\n      data: {url: \"data/movies.json\"},\n      mark: \"circle\",\n      transform: [t],\n      encoding: {\n        x: {\n          field: \"Rotten_Tomatoes_Rating\",\n          type: \"quantitative\"\n        },\n        color: {\n          field: \"Rotten_Tomatoes_Rating\",\n          type: \"quantitative\"\n        }\n      }\n    });\n\n    assert.deepEqual<VgTransform>(assembleFromTransform(model, t)[0], {\n      type: 'bin',\n      field: 'Acceleration',\n      \"maxbins\": 10,\n      as: ['binned_acceleration', 'binned_acceleration_end'],\n      extent: [0, 100],\n      signal: \"bin_extent_0_100_maxbins_10_Acceleration_bins\",\n    });\n  });\n\n  it('should add bin transform from transform array and correctly apply bin with custom extent', function() {\n    const t: BinTransform = {\n      bin: {extent: [0, 100], maxbins: 20},\n      field: 'Acceleration',\n      as: 'binned_acceleration'\n    };\n\n    const model = parseUnitModelWithScale({\n      data: {url: \"data/movies.json\"},\n      mark: \"circle\",\n      transform: [t],\n      encoding: {\n        x: {\n          field: \"Rotten_Tomatoes_Rating\",\n          type: \"quantitative\"\n        },\n        color: {\n          field: \"Rotten_Tomatoes_Rating\",\n          type: \"quantitative\"\n        }\n      }\n    });\n\n    assert.deepEqual<VgTransform>(assembleFromTransform(model, t)[0], {\n      type: 'bin',\n      field: 'Acceleration',\n      \"maxbins\": 20,\n      as: ['binned_acceleration', 'binned_acceleration_end'],\n      extent: [0, 100],\n      signal: \"bin_extent_0_100_maxbins_20_Acceleration_bins\",\n    });\n  });\n\n  it('should add bin transform from transform array with anchor property', function() {\n    const t: BinTransform = {\n      bin: {extent: [0, 100], anchor: 6},\n      field: 'Acceleration',\n      as: 'binned_acceleration'\n    };\n\n    const model = parseUnitModelWithScale({\n      data: {url: \"data/movies.json\"},\n      mark: \"circle\",\n      transform: [t],\n      encoding: {\n        x: {\n          field: \"Rotten_Tomatoes_Rating\",\n          type: \"quantitative\"\n        },\n        color: {\n          field: \"Rotten_Tomatoes_Rating\",\n          type: \"quantitative\"\n        }\n      }\n    });\n\n    assert.deepEqual<VgTransform>(assembleFromTransform(model, t)[0], {\n      type: 'bin',\n      field: 'Acceleration',\n      anchor: 6,\n      maxbins: 10,\n      as: ['binned_acceleration', 'binned_acceleration_end'],\n      extent: [0, 100],\n      signal: 'bin_extent_0_100_anchor_6_maxbins_10_Acceleration_bins',\n    });\n  });\n\n  it('should add bin transform from transform array with array as', function() {\n    const t: BinTransform = {\n      bin: {extent: [0, 100], anchor: 6},\n      field: 'Acceleration',\n      as: ['binned_acceleration_start', 'binned_acceleration_stop']\n    };\n\n    const model = parseUnitModelWithScale({\n      data: {url: \"data/movies.json\"},\n      mark: \"circle\",\n      transform: [t],\n      encoding: {\n        x: {\n          field: \"Rotten_Tomatoes_Rating\",\n          type: \"quantitative\"\n        },\n        color: {\n          field: \"Rotten_Tomatoes_Rating\",\n          type: \"quantitative\"\n        }\n      }\n    });\n\n    assert.deepEqual<VgTransform>(assembleFromTransform(model, t)[0], {\n      type: 'bin',\n      field: 'Acceleration',\n      anchor: 6,\n      maxbins: 10,\n      as: ['binned_acceleration_start', 'binned_acceleration_stop'],\n      extent: [0, 100],\n      signal: 'bin_extent_0_100_anchor_6_maxbins_10_Acceleration_bins',\n    });\n  });\n});\n"]}