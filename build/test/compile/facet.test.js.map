{"version":3,"file":"facet.test.js","sourceRoot":"","sources":["../../../test/compile/facet.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\n\nimport {assert} from 'chai';\nimport {ROW, SHAPE} from '../../src/channel';\nimport {FacetModel} from '../../src/compile/facet';\nimport {FacetMapping} from '../../src/facet';\nimport {PositionFieldDef} from '../../src/fielddef';\nimport * as log from '../../src/log';\nimport {ORDINAL} from '../../src/type';\nimport {VgLayout} from '../../src/vega.schema';\nimport {parseFacetModel, parseFacetModelWithScale} from '../util';\n\ndescribe('FacetModel', function() {\n  describe('initFacet', () => {\n    it('should drop unsupported channel and throws warning', log.wrap((localLogger) => {\n      const model = parseFacetModel({\n        facet: ({\n          shape: {field: 'a', type: 'quantitative'}\n        }) as FacetMapping<string>, // Cast to allow invalid facet type for test\n        spec: {\n          mark: 'point',\n          encoding: {}\n        }\n      });\n      assert.equal(model.facet['shape'], undefined);\n      assert.equal(localLogger.warns[0], log.message.incompatibleChannel(SHAPE, 'facet'));\n    }));\n\n    it('should drop channel without field and value and throws warning', log.wrap((localLogger) => {\n      const model = parseFacetModel({\n        facet: {\n          row: {type: 'ordinal'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {}\n        }\n      });\n      assert.equal(model.facet.row, undefined);\n      assert.equal(localLogger.warns[0], log.message.emptyFieldDef({type: ORDINAL}, ROW));\n    }));\n\n    it('should drop channel without field and value and throws warning', log.wrap((localLogger) => {\n      const model = parseFacetModel({\n        facet: {\n          row: {field: 'a', type: 'quantitative'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {}\n        }\n      });\n      assert.deepEqual<PositionFieldDef<string>>(model.facet.row, {field: 'a', type: 'quantitative'});\n      assert.equal(localLogger.warns[0], log.message.facetChannelShouldBeDiscrete(ROW));\n    }));\n  });\n\n  describe('parseAxisAndHeader', () => {\n    // TODO: add more tests\n    // - correctly join title for nested facet\n    // - correctly generate headers with right labels and axes\n\n\n    it('applies text format to the fieldref of a temporal field', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {timeUnit:'year', field: 'date', type: 'ordinal'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parseAxisAndHeader();\n      const headerMarks = model.assembleHeaderMarks();\n      const columnHeader = headerMarks.filter(d => {\n        return d.name === \"column_header\";\n      })[0];\n\n      assert(columnHeader.title.text.signal, \"timeFormat(parent[\\\"year_date\\\"], '%Y')\");\n    });\n\n    it('applies number format for fieldref of a quantitative field', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {field: 'a', type: 'quantitative', format: 'd'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parseAxisAndHeader();\n      const headerMarks = model.assembleHeaderMarks();\n      const columnHeader = headerMarks.filter(d => {\n        return d.name === \"column_header\";\n      })[0];\n\n      assert(columnHeader.title.text.signal, \"format(parent[\\\"a\\\"], 'd')\");\n    });\n\n    it('ignores number format for fieldref of a binned field', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {bin: true, field: 'a', type: 'quantitative'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parseAxisAndHeader();\n      const headerMarks = model.assembleHeaderMarks();\n      const columnHeader = headerMarks.filter(d => {\n        return d.name === \"column_header\";\n      })[0];\n\n      assert(columnHeader.title.text.signal, \"parent[\\\"a\\\"]\");\n    });\n  });\n\n  describe('parseScale', () => {\n    it('should correctly set scale component for a model', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          row: {field: 'a', type: 'quantitative'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'}\n          }\n        }\n      });\n\n\n      assert(model.component.scales['x']);\n    });\n\n    it('should create independent scales if resolve is set to independent', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          row: {field: 'a', type: 'quantitative'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'}\n          }\n        },\n        resolve: {\n          scale: {\n            x: 'independent'\n          }\n        }\n      });\n\n      assert(!model.component.scales['x']);\n    });\n  });\n\n  describe('assembleHeaderMarks', () => {\n    it('should sort headers in ascending order', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {field: 'a', type: 'quantitative', format: 'd'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'},\n            y: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parseAxisAndHeader();\n\n      const headerMarks = model.assembleHeaderMarks();\n      const columnHeader = headerMarks.filter(d => {\n        return d.name === \"column_header\";\n      })[0];\n\n      assert.deepEqual(columnHeader.sort, {field: 'datum[\"a\"]', order: 'ascending'});\n    });\n  });\n\n  describe('assembleGroup', () => {\n    it('includes a columns fields in the encode block for facet with column that parent is also a facet.', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {field: 'a', type: 'quantitative'}\n        },\n        spec: {\n         facet: {\n            column: {field: 'c', type: 'quantitative'}\n          },\n          spec: {\n            mark: 'point',\n            encoding: {\n              x: {field: 'b', type: 'quantitative'}\n            }\n          }\n        }\n        // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n      } as any);\n      model.parseData();\n      const group = model.child.assembleGroup([]);\n      assert.deepEqual(group.encode.update.columns, {field: 'distinct_c'});\n    });\n  });\n\n  describe('assembleLayout', () => {\n    it('returns a layout with a column signal for facet with column', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {field: 'a', type: 'quantitative'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'quantitative'}\n          }\n        }\n      });\n      const layout = model.assembleLayout();\n      assert.deepEqual<VgLayout>(layout, {\n        padding: {row: 10, column: 10},\n        columns: {\n          signal: \"length(data('column_domain'))\"\n        },\n        bounds: 'full',\n        align: 'all'\n      });\n    });\n\n    it('returns a layout without a column signal for facet with column that parent is also a facet.', () => {\n      const model = parseFacetModelWithScale({\n        facet: {\n          column: {field: 'a', type: 'quantitative'}\n        },\n        spec: {\n         facet: {\n            column: {field: 'c', type: 'quantitative'}\n          },\n          spec: {\n            mark: 'point',\n            encoding: {\n              x: {field: 'b', type: 'quantitative'}\n            }\n          }\n        }\n        // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n      } as any);\n      const layout = model.child.assembleLayout();\n      assert.deepEqual(layout.columns, undefined);\n    });\n\n    it('returns a layout with header band if child spec is also a facet', () => {\n      const model = parseFacetModelWithScale({\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n        \"data\": {\"url\": \"data/cars.json\"},\n        \"facet\": {\"row\": {\"field\": \"Origin\",\"type\": \"ordinal\"}},\n        \"spec\": {\n          \"facet\": {\"row\": {\"field\": \"Cylinders\",\"type\": \"ordinal\"}},\n          \"spec\": {\n            \"mark\": \"point\",\n            \"encoding\": {\n              \"x\": {\"field\": \"Horsepower\",\"type\": \"quantitative\"},\n              \"y\": {\"field\": \"Acceleration\",\"type\": \"quantitative\"}\n            }\n          }\n        }\n        // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n      } as any);\n      model.parseLayoutSize();\n      model.parseAxisAndHeader();\n      const layout = model.assembleLayout();\n      assert.deepEqual(layout.headerBand, {row: 0.5});\n    });\n  });\n\n  describe('assembleMarks', () => {\n    it('should add cross and sort if we facet by multiple dimensions', () => {\n      const model: FacetModel = parseFacetModelWithScale({\n        facet: {\n          row: {field: 'a', type: 'ordinal'},\n          column: {field: 'b', type: 'ordinal'}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parse();\n\n      const marks = model.assembleMarks();\n\n      assert(marks[0].from.facet.aggregate.cross);\n      assert.deepEqual(marks[0].sort, {\n        field: [\n          'datum[\"a\"]',\n          'datum[\"b\"]'\n        ],\n        order: [\n          'ascending',\n          'ascending'\n        ]\n      });\n    });\n\n\n    it('should add cross and sort if we facet by multiple dimensions with sort array', () => {\n      const model: FacetModel = parseFacetModelWithScale({\n        facet: {\n          row: {field: 'a', type: 'ordinal', sort: ['a1', 'a2']},\n          column: {field: 'b', type: 'ordinal', sort: ['b1', 'b2']}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parse();\n\n      const marks = model.assembleMarks();\n\n      assert(marks[0].from.facet.aggregate.cross);\n      expect(marks[0].sort).toEqual({\n        field: [\n          'datum[\"row_a_sort_index\"]',\n          'datum[\"column_b_sort_index\"]'\n        ],\n        order: [\n          'ascending',\n          'ascending'\n        ]\n      });\n    });\n\n\n    it('should add cross and sort if we facet by multiple dimensions with sort fields', () => {\n      const model: FacetModel = parseFacetModelWithScale({\n        facet: {\n          row: {field: 'a', type: 'ordinal', sort: {field: 'd', op: 'median'}},\n          column: {field: 'b', type: 'ordinal', sort: {field: 'e', op: 'median'}}\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: 'c', type: 'quantitative'}\n          }\n        }\n      });\n      model.parse();\n\n      const marks = model.assembleMarks();\n\n      expect(marks[0].from.facet.aggregate).toEqual({\n        cross: true,\n        fields: ['median_d_by_a', 'median_e_by_b'],\n        ops: ['max', 'max'],\n        as: ['median_d_by_a', 'median_e_by_b']\n      });\n\n      expect(marks[0].sort).toEqual({\n        field: [\n          'datum[\"median_d_by_a\"]',\n          'datum[\"median_e_by_b\"]'\n        ],\n        order: [\n          'ascending',\n          'ascending'\n        ]\n      });\n    });\n\n    it('should add calculate cardinality for independent scales', () => {\n      const model: FacetModel = parseFacetModelWithScale({\n        facet: {\n          row: {field: 'a', type: 'ordinal'}\n        },\n        spec: {\n          mark: 'rect',\n          encoding: {\n            x: {field: 'b', type: 'nominal'},\n            y: {field: 'c', type: 'nominal'}\n          }\n        },\n        resolve: {\n          scale: {\n            x: 'independent',\n            y: 'independent'\n          }\n        }\n      });\n      model.parse();\n\n      const marks = model.assembleMarks();\n\n      assert.deepEqual(marks[0].from.facet.aggregate, {\n        fields: ['b', 'c'],\n        ops: ['distinct', 'distinct'],\n        as: ['distinct_b', 'distinct_c']\n      });\n    });\n\n    it('should add calculate cardinality for child column facet', () => {\n      const model: FacetModel = parseFacetModelWithScale({\n        facet: {\n          column: {field: 'a', type: 'quantitative'}\n        },\n        spec: {\n         facet: {\n            column: {field: 'c', type: 'quantitative'}\n          },\n          spec: {\n            mark: 'point',\n            encoding: {\n              x: {field: 'b', type: 'quantitative'}\n            }\n          }\n        }\n        // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n      } as any);\n      model.parse();\n\n      const marks = model.assembleMarks();\n\n      assert.deepEqual(marks[0].from.facet.aggregate, {\n        fields: ['c'],\n        ops: ['distinct'],\n        as: ['distinct_c']\n      });\n    });\n  });\n});\n"]}