{"version":3,"file":"encode.test.js","sourceRoot":"","sources":["../../../../test/compile/axis/encode.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\n\nimport * as encode from '../../../src/compile/axis/encode';\nimport {labelAlign, labelBaseline} from '../../../src/compile/axis/encode';\nimport {parseUnitModelWithScale} from '../../util';\n\n\ndescribe('compile/axis/encode', () => {\n  describe('encode.labels()', function () {\n    it('should not rotate label for temporal field by default', function() {\n      const model = parseUnitModelWithScale({\n        mark: \"point\",\n        encoding: {\n          x: {field: \"a\", type: \"temporal\", timeUnit: \"month\"}\n        }\n      });\n      const labels = encode.labels(model, 'x', {}, 'bottom');\n      assert.isUndefined(labels.angle);\n    });\n\n    it('should do not rotate label for temporal field if labelAngle is specified in axis config', function() {\n      const model = parseUnitModelWithScale({\n        mark: \"point\",\n        encoding: {\n          x: {field: \"a\", type: \"temporal\", timeUnit: \"month\"}\n        },\n        config: {axisX: {labelAngle: 90}}\n      });\n      const labels = encode.labels(model, 'x', {}, 'bottom');\n      assert.isUndefined(labels.angle);\n    });\n\n    it('should have correct text.signal for quarter timeUnits', function () {\n      const model = parseUnitModelWithScale({\n        mark: \"point\",\n        encoding: {\n          x: {field: \"a\", type: \"temporal\", timeUnit: \"quarter\"}\n        }\n      });\n      const labels = encode.labels(model, 'x', {}, 'bottom');\n      const expected = \"'Q' + quarter(datum.value)\";\n      assert.equal(labels.text.signal, expected);\n    });\n\n    it('should have correct text.signal for yearquartermonth timeUnits', function () {\n      const model = parseUnitModelWithScale({\n        mark: \"point\",\n        encoding: {\n          x: {field: \"a\", type: \"temporal\", timeUnit: \"yearquartermonth\"}\n        }\n      });\n      const labels = encode.labels(model, 'x', {}, 'bottom');\n      const expected = \"'Q' + quarter(datum.value) + ' ' + timeFormat(datum.value, '%b %Y')\";\n      assert.equal(labels.text.signal, expected);\n    });\n  });\n\n  describe('labelAlign', () => {\n    describe('horizontal orients', () => {\n      it('360 degree check for horizonatal orients return to see if they orient properly', () => {\n        assert.equal(labelAlign(0, 'top'), 'center');\n        assert.equal(labelAlign(15, 'top'), 'right');\n        assert.equal(labelAlign(30, 'top'), 'right');\n        assert.equal(labelAlign(45, 'top'), 'right');\n        assert.equal(labelAlign(60, 'top'), 'right');\n        assert.equal(labelAlign(75, 'top'), 'right');\n        assert.equal(labelAlign(90, 'top'), 'right');\n        assert.equal(labelAlign(105, 'top'), 'right');\n        assert.equal(labelAlign(120, 'top'), 'right');\n        assert.equal(labelAlign(135, 'top'), 'right');\n        assert.equal(labelAlign(150, 'top'), 'right');\n        assert.equal(labelAlign(165, 'top'), 'right');\n        assert.equal(labelAlign(180, 'top'), 'center');\n        assert.equal(labelAlign(195, 'bottom'), 'right');\n        assert.equal(labelAlign(210, 'bottom'), 'right');\n        assert.equal(labelAlign(225, 'bottom'), 'right');\n        assert.equal(labelAlign(240, 'bottom'), 'right');\n        assert.equal(labelAlign(255, 'bottom'), 'right');\n        assert.equal(labelAlign(270, 'bottom'), 'right');\n        assert.equal(labelAlign(285, 'bottom'), 'right');\n        assert.equal(labelAlign(300, 'bottom'), 'right');\n        assert.equal(labelAlign(315, 'bottom'), 'right');\n        assert.equal(labelAlign(330, 'bottom'), 'right');\n        assert.equal(labelAlign(345, 'bottom'), 'right');\n      });\n      it('360 degree check for vertical orients return to see if they orient properly', () => {\n        assert.equal(labelAlign(0, 'left'), 'right');\n        assert.equal(labelAlign(15, 'left'), 'right');\n        assert.equal(labelAlign(30, 'left'), 'right');\n        assert.equal(labelAlign(45, 'left'), 'right');\n        assert.equal(labelAlign(60, 'left'), 'right');\n        assert.equal(labelAlign(75, 'left'), 'right');\n        assert.equal(labelAlign(90, 'left'), 'center');\n        assert.equal(labelAlign(105, 'left'), 'left');\n        assert.equal(labelAlign(120, 'left'), 'left');\n        assert.equal(labelAlign(135, 'left'), 'left');\n        assert.equal(labelAlign(150, 'left'), 'left');\n        assert.equal(labelAlign(165, 'left'), 'left');\n        assert.equal(labelAlign(180, 'left'), 'left');\n        assert.equal(labelAlign(195, 'right'), 'right');\n        assert.equal(labelAlign(210, 'right'), 'right');\n        assert.equal(labelAlign(225, 'right'), 'right');\n        assert.equal(labelAlign(240, 'right'), 'right');\n        assert.equal(labelAlign(255, 'right'), 'right');\n        assert.equal(labelAlign(270, 'right'), 'center');\n        assert.equal(labelAlign(285, 'right'), 'left');\n        assert.equal(labelAlign(300, 'right'), 'left');\n        assert.equal(labelAlign(315, 'right'), 'left');\n        assert.equal(labelAlign(330, 'right'), 'left');\n        assert.equal(labelAlign(345, 'right'), 'left');\n      });\n    });\n  });\n\n  describe('labelBaseline', () => {\n    it('is middle for perpendiculars horizontal orients', () => {\n      assert.deepEqual(labelBaseline(90, 'top'), {value: 'middle'});\n      assert.deepEqual(labelBaseline(270, 'bottom'), {value: 'middle'});\n    });\n\n\n    it('is top for bottom orients for 1st and 4th quadrants', () => {\n      assert.deepEqual(labelBaseline(45, 'bottom'), {value: 'top'});\n      assert.deepEqual(labelBaseline(180, 'top'), {value: 'top'});\n    });\n\n    it('is bottom for bottom orients for 2nd and 3rd quadrants', () => {\n      assert.deepEqual(labelBaseline(100, 'bottom'), {value: 'middle'});\n      assert.deepEqual(labelBaseline(260, 'bottom'), {value: 'middle'});\n    });\n\n    it('is middle for 0 and 180 horizontal orients', () => {\n      assert.deepEqual(labelBaseline(0, 'left'), {value: 'middle'});\n      assert.deepEqual(labelBaseline(180, 'right'), {value: 'middle'});\n    });\n\n\n    it('is top for bottom orients for 1st and 2nd quadrants', () => {\n      assert.deepEqual(labelBaseline(80, 'left'), {value: 'top'});\n      assert.deepEqual(labelBaseline(100, 'left'), {value: 'top'});\n    });\n\n    it('is bottom for bottom orients for 3rd and 4th quadrants', () => {\n      assert.deepEqual(labelBaseline(280, 'left'), {value: 'bottom'});\n      assert.deepEqual(labelBaseline(260, 'left'), {value: 'bottom'});\n    });\n\n    it('is bottom for bottom orients for 3rd and 4th quadrants', () => {\n      assert.deepEqual(labelBaseline(280, 'left'), {value: 'bottom'});\n      assert.deepEqual(labelBaseline(260, 'left'), {value: 'bottom'});\n    });\n  });\n});\n"]}