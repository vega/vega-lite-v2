{"version":3,"file":"assemble.test.js","sourceRoot":"","sources":["../../../../test/compile/axis/assemble.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,YAAY,EAAC,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAC,aAAa,EAAC,MAAM,qCAAqC,CAAC;AAClE,OAAO,EAAC,aAAa,EAAC,MAAM,qBAAqB,CAAC;AAIlD,QAAQ,CAAC,uBAAuB,EAAE;IAChC,QAAQ,CAAC,gBAAgB,EAAE;QACzB,EAAE,CAAC,gDAAgD,EAAE;YACnD,IAAM,QAAQ,GAAG,IAAI,aAAa,CAAC;gBACjC,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,IAAI;gBACV,MAAM,EAAE;oBACN,IAAI,EAAE,EAAC,MAAM,EAAE,EAAC,MAAM,EAAE,EAAC,KAAK,EAAE,KAAK,EAAC,EAAC,EAAC;oBACxC,MAAM,EAAE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,EAAC,KAAK,EAAE,KAAK,EAAC,EAAC,EAAC;iBACzC;aACF,CAAC,CAAC;YACH,IAAM,IAAI,GAAG,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE;YACzC,IAAM,QAAQ,GAAG,IAAI,aAAa,CAAC;gBACjC,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,IAAI;gBACV,MAAM,EAAE,CAAC;aACV,CAAC,CAAC;YACH,IAAM,IAAI,GAAG,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;YAC3D,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE;YACjD,IAAM,QAAQ,GAAG,IAAI,aAAa,CAAC;gBACjC,MAAM,EAAE,MAAM;gBACd,MAAM,EAAE;oBACN,IAAI,EAAE,EAAC,MAAM,EAAE,EAAC,MAAM,EAAE,EAAC,KAAK,EAAE,KAAK,EAAC,EAAC,EAAC;oBACxC,MAAM,EAAE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,EAAC,KAAK,EAAE,KAAK,EAAC,EAAC,EAAC;iBACzC;aACF,CAAC,CAAC;YACH,IAAM,IAAI,GAAG,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE;YACvC,IAAM,QAAQ,GAAG,IAAI,aAAa,CAAC;gBACjC,MAAM,EAAE,MAAM;gBACd,KAAK,EAAE,CAAC,EAAC,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAC,EAAE,EAAC,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAC,CAAC;aACxE,CAAC,CAAC;YACH,IAAM,IAAI,GAAG,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;YAC3D,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {assembleAxis} from '../../../src/compile/axis/assemble';\nimport {AxisComponent} from '../../../src/compile/axis/component';\nimport {defaultConfig} from '../../../src/config';\n\n\n\ndescribe('compile/axis/assemble', () => {\n  describe('assembleAxis()', () => {\n    it('outputs grid axis with only grid encode blocks', () => {\n      const axisCmpt = new AxisComponent({\n        orient: 'left',\n        grid: true,\n        encode: {\n          grid: {update: {stroke: {value: 'red'}}},\n          labels: {update: {fill: {value: 'red'}}}\n        }\n      });\n      const axis = assembleAxis(axisCmpt, 'grid', defaultConfig);\n      assert.isUndefined(axis.encode.labels);\n    });\n\n    it('outputs grid axis with custom zindex', () => {\n      const axisCmpt = new AxisComponent({\n        orient: 'left',\n        grid: true,\n        zindex: 3\n      });\n      const axis = assembleAxis(axisCmpt, 'grid', defaultConfig);\n      assert.equal(axis.zindex, 3);\n    });\n\n    it('outputs main axis without grid encode blocks', () => {\n      const axisCmpt = new AxisComponent({\n        orient: 'left',\n        encode: {\n          grid: {update: {stroke: {value: 'red'}}},\n          labels: {update: {fill: {value: 'red'}}}\n        }\n      });\n      const axis = assembleAxis(axisCmpt, 'main', defaultConfig);\n      assert.isUndefined(axis.encode.grid);\n    });\n\n    it('correctly assemble title fieldDefs', () => {\n      const axisCmpt = new AxisComponent({\n        orient: 'left',\n        title: [{aggregate: 'max', field: 'a'}, {aggregate: 'min', field: 'b'}]\n      });\n      const axis = assembleAxis(axisCmpt, 'main', defaultConfig);\n      assert.equal(axis.title, 'Max of a, Min of b');\n    });\n  });\n\n});\n"]}