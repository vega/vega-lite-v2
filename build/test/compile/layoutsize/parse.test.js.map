{"version":3,"file":"parse.test.js","sourceRoot":"","sources":["../../../../test/compile/layoutsize/parse.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('compile/layout', () => {\n   describe('parseUnitLayoutSize', () => {\n    it('should have width, height = provided top-level width, height', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        width: 123,\n        height: 456,\n        mark: 'text',\n        encoding: {},\n        config: {scale: {textXRangeStep: 91}}\n      });\n\n      assert.deepEqual(model.component.layoutSize.explicit.width, 123);\n      assert.deepEqual(model.component.layoutSize.explicit.height, 456);\n    });\n\n    it('should have width = default textXRangeStep for text mark without x', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'text',\n        encoding: {},\n        config: {scale: {textXRangeStep: 91}}\n      });\n\n      assert.deepEqual(model.component.layoutSize.implicit.width, 91);\n    });\n\n    it('should have width/height = config.scale.rangeStep  for non-text mark without x,y', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {},\n        config: {scale: {rangeStep: 23}}\n      });\n\n      assert.deepEqual(model.component.layoutSize.implicit.width, 23);\n      assert.deepEqual(model.component.layoutSize.implicit.height, 23);\n    });\n\n     it('should have width/height = config.view.width/height for non-ordinal x,y', () => {\n       const model = parseUnitModelWithScaleAndLayoutSize({\n         mark: 'point',\n         encoding: {\n           x: {field: 'a', type: 'quantitative'},\n           y: {field: 'b', type: 'quantitative'}\n         },\n         config: {view: {width: 123, height: 456}}\n       });\n\n       assert.deepEqual(model.component.layoutSize.implicit.width, 123);\n       assert.deepEqual(model.component.layoutSize.implicit.height, 456);\n     });\n\n     it('should have width/height = config.view.width/height for geoshape', () => {\n       const model = parseUnitModelWithScaleAndLayoutSize({\n         mark: 'geoshape',\n         encoding: {},\n         config: {view: {width: 123, height: 456}}\n       });\n\n       assert.deepEqual(model.component.layoutSize.implicit.width, 123);\n       assert.deepEqual(model.component.layoutSize.implicit.height, 456);\n     });\n\n    it('should have width/height = config.view.width/height for non-ordinal x,y', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          x: {field: 'a', type: 'ordinal', scale: {rangeStep: null}},\n          y: {field: 'b', type: 'ordinal', scale: {rangeStep: null}}\n        },\n        config: {view: {width: 123, height: 456}}\n      });\n\n      assert.deepEqual(model.component.layoutSize.implicit.width, 123);\n      assert.deepEqual(model.component.layoutSize.implicit.height, 456);\n    });\n\n    it('should have width/height = undefined for non-ordinal x,y', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        mark: 'point',\n        encoding: {\n          x: {field: 'a', type: 'ordinal'},\n          y: {field: 'b', type: 'ordinal'}\n        },\n        config: {view: {width: 123, height: 456}}\n      });\n\n      assert.deepEqual(model.component.layoutSize.get('width'), 'range-step');\n      assert.deepEqual(model.component.layoutSize.get('height'), 'range-step');\n    });\n  });\n});\n"]}