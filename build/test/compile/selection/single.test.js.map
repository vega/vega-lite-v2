{"version":3,"file":"single.test.js","sourceRoot":"","sources":["../../../../test/compile/selection/single.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\nimport {assert} from 'chai';\n\nimport * as selection from '../../../src/compile/selection/selection';\nimport single from '../../../src/compile/selection/single';\nimport {parseUnitModelWithScale} from '../../util';\n\n\ndescribe('Single Selection', function() {\n  const model = parseUnitModelWithScale({\n    \"mark\": \"circle\",\n    \"encoding\": {\n      \"x\": {\"field\": \"Horsepower\",\"type\": \"quantitative\"},\n      \"y\": {\"field\": \"Miles_per_Gallon\",\"type\": \"quantitative\", \"bin\": true},\n      \"color\": {\"field\": \"Origin\", \"type\": \"nominal\"}\n    }\n  });\n\n  const selCmpts = model.component.selection = selection.parseUnitSelection(model, {\n    \"one\": {\"type\": \"single\"},\n    \"two\": {\n      \"type\": \"single\", \"nearest\": true,\n      \"on\": \"mouseover\", \"encodings\": [\"y\", \"color\"]\n    }\n  });\n\n  it('builds tuple signals', function() {\n    const oneSg = single.signals(model, selCmpts['one']);\n    assert.sameDeepMembers(oneSg, [{\n      name: 'one_tuple',\n      value: {},\n      on: [{\n        events: selCmpts['one'].events,\n        update: \"datum && item().mark.marktype !== 'group' ? {unit: \\\"\\\", encodings: [], fields: [\\\"_vgsid_\\\"], values: [datum[\\\"_vgsid_\\\"]]} : null\",\n        force: true\n      }]\n    }]);\n\n    const twoSg = single.signals(model, selCmpts['two']);\n    assert.sameDeepMembers(twoSg, [{\n      name: 'two_tuple',\n      value: {},\n      on: [{\n        events: selCmpts['two'].events,\n        update: \"datum && item().mark.marktype !== 'group' ? {unit: \\\"\\\", encodings: [\\\"y\\\", \\\"color\\\"], fields: [\\\"Miles_per_Gallon\\\", \\\"Origin\\\"], values: [[(item().isVoronoi ? datum.datum : datum)[\\\"bin_maxbins_10_Miles_per_Gallon\\\"], (item().isVoronoi ? datum.datum : datum)[\\\"bin_maxbins_10_Miles_per_Gallon_end\\\"]], (item().isVoronoi ? datum.datum : datum)[\\\"Origin\\\"]], \\\"bin_Miles_per_Gallon\\\": 1} : null\",\n        force: true\n      }]\n    }]);\n\n    const signals = selection.assembleUnitSelectionSignals(model, []);\n    assert.includeDeepMembers(signals, oneSg.concat(twoSg));\n  });\n\n  it('builds modify signals', function() {\n    const oneExpr = single.modifyExpr(model, selCmpts['one']);\n    assert.equal(oneExpr, 'one_tuple, true');\n\n    const twoExpr = single.modifyExpr(model, selCmpts['two']);\n    assert.equal(twoExpr, 'two_tuple, true');\n\n    const signals = selection.assembleUnitSelectionSignals(model, []);\n    assert.includeDeepMembers(signals, [\n      {\n        \"name\": \"one_modify\",\n        \"on\": [\n          {\n            \"events\": {\"signal\": \"one_tuple\"},\n            \"update\": `modify(\\\"one_store\\\", ${oneExpr})`\n          }\n        ]\n      },\n      {\n        \"name\": \"two_modify\",\n        \"on\": [\n          {\n            \"events\": {\"signal\": \"two_tuple\"},\n            \"update\": `modify(\\\"two_store\\\", ${twoExpr})`\n          }\n        ]\n      }\n    ]);\n  });\n\n  it('builds top-level signals', function() {\n    const oneSg = single.topLevelSignals(model, selCmpts['one'], []);\n    assert.sameDeepMembers(oneSg, [{\n      name: 'one', update: 'data(\\\"one_store\\\").length && {_vgsid_: data(\\\"one_store\\\")[0].values[0]}'\n    }]);\n\n    const twoSg = single.topLevelSignals(model, selCmpts['two'], []);\n    assert.sameDeepMembers(twoSg, [{\n      name: 'two', update: 'data(\\\"two_store\\\").length && {Miles_per_Gallon: data(\\\"two_store\\\")[0].values[0], Origin: data(\\\"two_store\\\")[0].values[1]}'\n    }]);\n\n    const signals = selection.assembleTopLevelSignals(model, []);\n    assert.deepEqual(signals, [\n      {\n        name: 'unit',\n        value: {},\n        on: [{events: 'mousemove', update: 'isTuple(group()) ? group() : unit'}]\n      }\n    ].concat(oneSg, twoSg));\n  });\n\n  it('builds unit datasets', function() {\n    const data: any[] = [];\n    assert.sameDeepMembers(selection.assembleUnitSelectionData(model, data), [\n      {name: 'one_store'}, {name: 'two_store'}\n    ]);\n  });\n\n  it('leaves marks alone', function() {\n    const marks: any[] = [];\n    model.component.selection = {one: selCmpts['one']};\n    assert.equal(selection.assembleUnitSelectionMarks(model, marks), marks);\n  });\n});\n"]}