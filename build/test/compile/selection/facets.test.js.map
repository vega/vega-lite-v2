{"version":3,"file":"facets.test.js","sourceRoot":"","sources":["../../../../test/compile/selection/facets.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,KAAK,SAAS,MAAM,0CAA0C,CAAC;AAEtE,OAAO,EAAC,UAAU,EAAC,MAAM,YAAY,CAAC;AAEtC,QAAQ,CAAC,oBAAoB,EAAE;IAC7B,IAAM,KAAK,GAAG,UAAU,CAAC;QACvB,MAAM,EAAE,EAAC,KAAK,EAAE,oBAAoB,EAAC;QACrC,OAAO,EAAE;YACP,QAAQ,EAAE,EAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAC;YAChD,KAAK,EAAE,EAAC,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,EAAC;SACtD;QACD,MAAM,EAAE;YACN,OAAO,EAAE,CAAC;oBACR,MAAM,EAAE,MAAM;oBACd,UAAU,EAAE,EAAC,GAAG,EAAE,EAAC,OAAO,EAAE,EAAE,EAAC,EAAC;iBACjC,EAAE;oBACD,WAAW,EAAE;wBACX,KAAK,EAAE,EAAC,MAAM,EAAE,QAAQ,EAAC;wBACzB,KAAK,EAAE,EAAC,MAAM,EAAE,OAAO,EAAC;wBACxB,OAAO,EAAE,EAAC,MAAM,EAAE,UAAU,EAAC;qBAC9B;oBACD,MAAM,EAAE,MAAM;oBACd,UAAU,EAAE;wBACV,GAAG,EAAE,EAAC,OAAO,EAAE,EAAE,EAAC;qBACnB;iBACF,CAAC;SACH;KACF,CAAC,CAAC;IAEH,KAAK,CAAC,KAAK,EAAE,CAAC;IACd,IAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAc,CAAC;IAExD,EAAE,CAAC,gCAAgC,EAAE;QACnC,MAAM,CAAC,kBAAkB,CAAC,SAAS,CAAC,4BAA4B,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE;YAC1E;gBACE,MAAM,EAAE,OAAO;gBACf,OAAO,EAAE,EAAE;gBACX,IAAI,EAAE;oBACJ;wBACE,QAAQ,EAAE,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAC,MAAM,EAAE,WAAW,EAAC,CAAC;wBACnD,QAAQ,EAAE,gDAAgD;qBAC3D;iBACF;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE;QAC7C,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EACnC,oFAA8E,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable quotemark */\n\nimport {assert} from 'chai';\nimport * as selection from '../../../src/compile/selection/selection';\nimport {UnitModel} from '../../../src/compile/unit';\nimport {parseModel} from '../../util';\n\ndescribe('Faceted Selections', function() {\n  const model = parseModel({\n    \"data\": {\"url\": \"data/anscombe.json\"},\n    \"facet\": {\n      \"column\": {\"field\": \"Series\", \"type\": \"nominal\"},\n      \"row\": {\"field\": \"X\", \"type\": \"nominal\", \"bin\": true},\n    },\n    \"spec\": {\n      \"layer\": [{\n        \"mark\": \"rule\",\n        \"encoding\": {\"y\": {\"value\": 10}}\n      }, {\n        \"selection\": {\n          \"one\": {\"type\": \"single\"},\n          \"twp\": {\"type\": \"multi\"},\n          \"three\": {\"type\": \"interval\"}\n        },\n        \"mark\": \"rule\",\n        \"encoding\": {\n          \"x\": {\"value\": 10}\n        }\n      }]\n    }\n  });\n\n  model.parse();\n  const unit = model.children[0].children[1] as UnitModel;\n\n  it('should assemble a facet signal', function() {\n    assert.includeDeepMembers(selection.assembleUnitSelectionSignals(unit, []), [\n      {\n        \"name\": \"facet\",\n        \"value\": {},\n        \"on\": [\n          {\n            \"events\": [{\"source\": \"scope\",\"type\": \"mousemove\"}],\n            \"update\": \"isTuple(facet) ? facet : group(\\\"cell\\\").datum\"\n          }\n        ]\n      }\n    ]);\n  });\n\n  it('should name the unit with the facet keys', function() {\n    assert.equal(selection.unitName(unit),\n      `\"child_layer_1\" + '_' + (facet[\"bin_maxbins_6_X\"]) + '_' + (facet[\"Series\"])`);\n  });\n});\n"]}