{"version":3,"file":"predicate.test.js","sourceRoot":"","sources":["../../../../test/compile/selection/predicate.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\n\nimport {assert} from 'chai';\nimport {nonPosition} from '../../../src/compile/mark/mixins';\nimport * as selection from '../../../src/compile/selection/selection';\nimport {expression} from '../../../src/predicate';\nimport {VgEncodeEntry} from '../../../src/vega.schema';\nimport {parseUnitModel} from '../../util';\n\nconst predicate = selection.selectionPredicate;\n\ndescribe('Selection Predicate', function() {\n  const model = parseUnitModel({\n    \"mark\": \"circle\",\n    \"encoding\": {\n      \"x\": {\"field\": \"Horsepower\",\"type\": \"quantitative\"},\n      \"y\": {\"field\": \"Miles_per_Gallon\",\"type\": \"quantitative\"},\n      \"color\": {\n        \"field\": \"Cylinders\", \"type\": \"ordinal\",\n        \"condition\": {\n          \"selection\": \"one\",\n          \"value\": \"grey\"\n        }\n      },\n      \"opacity\": {\n        \"field\": \"Origin\", \"type\": \"nominal\",\n        \"condition\": {\n          \"selection\": {\"or\": [\"one\", {\"and\": [\"two\", {\"not\": \"thr-ee\"}]}]},\n          \"value\": 0.5\n        }\n      }\n    }\n  });\n\n  model.parseScale();\n\n  model.component.selection = selection.parseUnitSelection(model, {\n    \"one\": {\"type\": \"single\"},\n    \"two\": {\"type\": \"multi\", \"resolve\": \"union\"},\n    \"thr-ee\": {\"type\": \"interval\", \"resolve\": \"intersect\"},\n    \"four\": {\"type\": \"single\", \"empty\": \"none\"}\n  });\n\n  it('generates the predicate expression', function() {\n    assert.equal(predicate(model, \"one\"),\n      '!(length(data(\"one_store\"))) || (vlSingle(\"one_store\", datum))');\n\n    assert.equal(predicate(model, \"four\"), '(vlSingle(\"four_store\", datum))');\n\n    assert.equal(predicate(model, {\"not\": \"one\"}),\n      '!(length(data(\"one_store\"))) || (!(vlSingle(\"one_store\", datum)))');\n\n    assert.equal(predicate(model, {\"not\": {\"and\": [\"one\", \"two\"]}}),\n      '!(length(data(\"one_store\")) || length(data(\"two_store\"))) || ' +\n      '(!((vlSingle(\"one_store\", datum)) && ' +\n      '(vlMulti(\"two_store\", datum, \"union\"))))');\n\n      assert.equal(predicate(model, {\"not\": {\"and\": [\"one\", \"four\"]}}),\n      '!(length(data(\"one_store\"))) || ' +\n      '(!((vlSingle(\"one_store\", datum)) && ' +\n      '(vlSingle(\"four_store\", datum))))');\n\n    assert.equal(predicate(model, {\"and\": [\"one\", \"two\", {\"not\": \"thr-ee\"}]}),\n      '!(length(data(\"one_store\")) || length(data(\"two_store\")) || length(data(\"thr_ee_store\"))) || ' +\n      '((vlSingle(\"one_store\", datum)) && ' +\n      '(vlMulti(\"two_store\", datum, \"union\")) && ' +\n      '(!(vlInterval(\"thr_ee_store\", datum, \"intersect\"))))');\n\n    assert.equal(predicate(model, {\"or\": [\"one\", {\"and\": [\"two\", {\"not\": \"thr-ee\"}]}]}),\n      '!(length(data(\"one_store\")) || length(data(\"two_store\")) || length(data(\"thr_ee_store\"))) || ' +\n      '((vlSingle(\"one_store\", datum)) || ' +\n      '((vlMulti(\"two_store\", datum, \"union\")) && ' +\n      '(!(vlInterval(\"thr_ee_store\", datum, \"intersect\")))))');\n  });\n\n  it('generates Vega production rules', function() {\n    assert.deepEqual<VgEncodeEntry>(nonPosition('color', model, {vgChannel: 'fill'}), {\n      fill: [\n        {test: '!(length(data(\"one_store\"))) || (vlSingle(\"one_store\", datum))', value: \"grey\"},\n        {scale: \"color\", field: \"Cylinders\"}\n      ]\n    });\n\n    assert.deepEqual<VgEncodeEntry>(nonPosition('opacity', model), {\n      opacity: [\n        {test: '!(length(data(\"one_store\")) || length(data(\"two_store\")) || length(data(\"thr_ee_store\"))) || ' +\n              '((vlSingle(\"one_store\", datum)) || ' +\n              '((vlMulti(\"two_store\", datum, \"union\")) && ' +\n              '(!(vlInterval(\"thr_ee_store\", datum, \"intersect\")))))',\n          value: 0.5},\n        {scale: \"opacity\", field: \"Origin\"}\n      ]\n    });\n  });\n\n  it('generates a selection filter', function() {\n    assert.equal(expression(model, {\"selection\": \"one\"}),\n      '!(length(data(\"one_store\"))) || (vlSingle(\"one_store\", datum))');\n\n    assert.equal(expression(model, {\"selection\": {\"not\": \"one\"}}),\n      '!(length(data(\"one_store\"))) || (!(vlSingle(\"one_store\", datum)))');\n\n    assert.equal(expression(model, {\"selection\": {\"not\": {\"and\": [\"one\", \"two\"]}}}),\n      '!(length(data(\"one_store\")) || length(data(\"two_store\"))) || ' +\n      '(!((vlSingle(\"one_store\", datum)) && ' +\n      '(vlMulti(\"two_store\", datum, \"union\"))))');\n\n    assert.equal(expression(model, {\"selection\": {\"and\": [\"one\", \"two\", {\"not\": \"thr-ee\"}]}}),\n      '!(length(data(\"one_store\")) || length(data(\"two_store\")) || length(data(\"thr_ee_store\"))) || ' +\n      '((vlSingle(\"one_store\", datum)) && ' +\n      '(vlMulti(\"two_store\", datum, \"union\")) && ' +\n      '(!(vlInterval(\"thr_ee_store\", datum, \"intersect\"))))');\n\n    assert.equal(expression(model, {\"selection\": {\"or\": [\"one\", {\"and\": [\"two\", {\"not\": \"thr-ee\"}]}]}}),\n      '!(length(data(\"one_store\")) || length(data(\"two_store\")) || length(data(\"thr_ee_store\"))) || ' +\n      '((vlSingle(\"one_store\", datum)) || ' +\n      '((vlMulti(\"two_store\", datum, \"union\")) && ' +\n      '(!(vlInterval(\"thr_ee_store\", datum, \"intersect\")))))');\n  });\n\n  it('throws an error for unknown selections', function() {\n    assert.throws(() => predicate(model, 'helloworld'), 'Cannot find a selection named \"helloworld\"');\n  });\n});\n"]}