{"version":3,"file":"repeat.test.js","sourceRoot":"","sources":["../../../test/compile/repeat.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\n\nimport {replaceRepeaterInEncoding} from '../../src/compile/repeater';\nimport {Encoding} from '../../src/encoding';\nimport * as log from '../../src/log';\nimport {keys} from '../../src/util';\nimport {parseRepeatModel} from '../util';\n\ndescribe('Repeat', function() {\n  describe('resolveRepeat', () => {\n    it('should resolve repeated fields', () => {\n      const resolved = replaceRepeaterInEncoding({\n        x: {field: {repeat: 'row'}, type: 'quantitative'},\n        y: {field: 'bar', type: 'quantitative'}\n      }, {row: 'foo'});\n\n      assert.deepEqual<Encoding<string>>(resolved, {\n        x: {field: 'foo', type: 'quantitative'},\n        y: {field: 'bar', type: 'quantitative'}\n      });\n    });\n\n    it('should show warning if repeat in field def cannot be resolved', log.wrap((localLogger) => {\n      const resolved = replaceRepeaterInEncoding({\n        x: {field: {repeat: 'row'}, type: 'quantitative'},\n        y: {field: 'bar', type: 'quantitative'}\n      }, {column: 'foo'});\n\n      assert.equal(localLogger.warns[0], log.message.noSuchRepeatedValue('row'));\n      assert.deepEqual(resolved, {\n        y: {field: 'bar', type: 'quantitative'}\n      });\n    }));\n\n    it('should support arrays fo field defs', () => {\n      const resolved = replaceRepeaterInEncoding({\n        detail: [\n          {field: {repeat: 'row'}, type: 'quantitative'},\n          {field: 'bar', type: 'quantitative'}\n        ]\n      }, {row: 'foo'});\n\n      assert.deepEqual<Encoding<string>>(resolved, {\n        detail: [{field: 'foo', type: 'quantitative'}, {field: 'bar', type: 'quantitative'}]\n      });\n    });\n\n    it('should replace fields in sort', () => {\n      const resolved = replaceRepeaterInEncoding({\n        x: {field: 'bar', type: 'quantitative', sort: {field: {repeat: 'row'}, op: 'min'}}\n      }, {row: 'foo'});\n\n      assert.deepEqual<Encoding<string>>(resolved, {\n        x: {field: 'bar', type: 'quantitative', sort: {field: 'foo', op: 'min'}}\n      });\n    });\n\n    it('should replace fields in conditionals', () => {\n      const resolved = replaceRepeaterInEncoding({\n        color: {\n          condition: {selection: 'test', field: {repeat: 'row'}, type: 'quantitative'},\n          value: 'red'\n        }\n      }, {row: 'foo'});\n\n      assert.deepEqual<Encoding<string>>(resolved, {\n        color: {\n          condition: {selection: 'test', field: 'foo', type: 'quantitative'},\n          value: 'red'\n        }\n      });\n    });\n\n    it('should replace fields in reveresed conditionals', () => {\n      const resolved = replaceRepeaterInEncoding({\n        color: {\n          condition: {selection: 'test', value: 'red'},\n          field: {repeat: 'row'}, type: 'quantitative'\n        }\n      }, {row: 'foo'});\n\n      assert.deepEqual<Encoding<string>>(resolved, {\n        color: {\n          condition: {selection: 'test', value: 'red'},\n          field: 'foo', type: 'quantitative'\n        }\n      });\n    });\n\n    it('should show warning if repeat in conditional cannot be resolved', log.wrap((localLogger) => {\n      const resolved = replaceRepeaterInEncoding({\n        color: {\n          condition: {selection: 'test', field: {repeat: 'row'}, type: 'quantitative'},\n          value: 'red'\n        }\n      }, {column: 'foo'});\n\n      assert.equal(localLogger.warns[0], log.message.noSuchRepeatedValue('row'));\n      assert.deepEqual(resolved, {\n        color: {value: 'red'}\n      });\n    }));\n\n    it('should show warning if repeat in a condition field def cannot be resolved', log.wrap((localLogger) => {\n      const resolved = replaceRepeaterInEncoding({\n        color: {\n          condition: {selection: 'test', value: 'red'},\n          field: {repeat: 'row'}, type: 'quantitative'\n        }\n      }, {column: 'foo'});\n\n      assert.equal(localLogger.warns[0], log.message.noSuchRepeatedValue('row'));\n      assert.deepEqual(resolved, {\n        color: {\n          condition: {selection: 'test', value: 'red'}\n        }\n      });\n    }));\n  });\n\n  describe('initialize children', () => {\n    it('should create a model per repeated value', () => {\n      const model = parseRepeatModel({\n        repeat: {\n          row: ['Acceleration', 'Horsepower']\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: {repeat: 'row'}, type: 'quantitative'}\n          }\n        }\n      });\n\n      assert.equal(model.children.length, 2);\n    });\n\n    it('should create n*m models if row and column are specified', () => {\n      const model = parseRepeatModel({\n        repeat: {\n          row: ['Acceleration', 'Horsepower', 'Displacement'],\n          column: ['Origin', 'NumCylinders']\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: {repeat: 'row'}, type: 'quantitative'},\n            y: {field: {repeat: 'column'}, type: 'ordinal'}\n          }\n        }\n      });\n\n      assert.equal(model.children.length, 6);\n    });\n\n    it('should union color scales and legends', () => {\n      const model = parseRepeatModel({\n        repeat: {\n          row: ['foo', 'bar'],\n          column: ['foo', 'bar']\n        },\n        spec: {\n          mark: 'point',\n          encoding: {\n            x: {field: {repeat: 'row'}, type: 'quantitative'},\n            y: {field: {repeat: 'column'}, type: 'ordinal'},\n            color: {field: 'baz', type: 'nominal'}\n          }\n        }\n      });\n\n      model.parseScale();\n      const colorScale = model.component.scales['color'];\n\n      assert.deepEqual(colorScale.domains.length, 4);\n\n      model.parseLegend();\n\n      assert.equal(keys(model.component.legends).length, 1);\n    });\n  });\n\n  describe('resolve', () => {\n    it('cannot share axes', log.wrap((localLogger) => {\n      parseRepeatModel({\n        repeat: {},\n        spec: {\n          mark: 'point',\n          encoding: {}\n        },\n        resolve: {\n          axis: {\n            x: 'shared'\n          }\n        }\n      });\n      assert.equal(localLogger.warns[0], log.message.REPEAT_CANNOT_SHARE_AXIS);\n    }));\n  });\n});\n"]}