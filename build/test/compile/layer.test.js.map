{"version":3,"file":"layer.test.js","sourceRoot":"","sources":["../../../test/compile/layer.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,eAAe,EAAC,MAAM,SAAS,CAAC;AAExC,QAAQ,CAAC,OAAO,EAAE;IAChB,QAAQ,CAAC,YAAY,EAAE;QACrB,EAAE,CAAC,sBAAsB,EAAE;YACzB,IAAM,KAAK,GAAG,eAAe,CAAC;gBAC5B,KAAK,EAAE,CAAC;wBACN,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE;4BACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAC;yBACjC;qBACF,EAAC;wBACA,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE;4BACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAC;yBACjC;qBACF,CAAC;aACH,CAAC,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,KAAK,CAAC,UAAU,EAAE,CAAC;YAEnB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;oBACnD,IAAI,EAAE,cAAc;oBACpB,KAAK,EAAE,GAAG;oBACV,IAAI,EAAE,IAAI;iBACX,EAAE;oBACD,IAAI,EAAE,cAAc;oBACpB,KAAK,EAAE,GAAG;oBACV,IAAI,EAAE,IAAI;iBACX,CAAC,CAAC,CAAC;QACR,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE;YACjD,IAAM,KAAK,GAAG,eAAe,CAAC;gBAC5B,KAAK,EAAE,CAAC;wBACN,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE;4BACR,CAAC,EAAE,EAAC,KAAK,EAAE,EAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAC;yBAC7D;qBACF,EAAE;wBACD,IAAI,EAAE,OAAO;wBACb,QAAQ,EAAE;4BACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAC;yBACjC;qBACF,CAAC;aACH,CAAC,CAAC;YACH,KAAK,CAAC,UAAU,EAAE,CAAC;YAEnB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE;gBACpD,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACT;oBACE,IAAI,EAAE,cAAc;oBACpB,KAAK,EAAE,GAAG;oBACV,IAAI,EAAE,IAAI;iBACX;aAAC,CAAC,CAAC;QACR,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE;QAC1B,IAAM,KAAK,GAAG,eAAe,CAAC;YAC5B,KAAK,EAAE,CAAC;oBACN,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBACtC;iBACF,EAAE;oBACD,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE;wBACR,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;qBACtC;iBACF,CAAC;YACF,OAAO,EAAE;gBACP,KAAK,EAAE;oBACL,CAAC,EAAE,aAAa;iBACjB;aACF;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAEvC,EAAE,CAAC,4DAA4D,EAAE;YAC/D,KAAK,CAAC,UAAU,EAAE,CAAC;YAEnB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;YACrD,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;oBACjE,IAAI,EAAE,cAAc;oBACpB,KAAK,EAAE,GAAG;iBACX,CAAC,CAAC,CAAC;YACJ,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;oBACjE,IAAI,EAAE,cAAc;oBACpB,KAAK,EAAE,GAAG;iBACX,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE;YACrC,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAE3B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {assert} from 'chai';\nimport {parseLayerModel} from '../util';\n\ndescribe('Layer', function() {\n  describe('parseScale', () => {\n    it('should merge domains', () => {\n      const model = parseLayerModel({\n        layer: [{\n          mark: 'point',\n          encoding: {\n            x: {field: 'a', type: 'ordinal'}\n          }\n        },{\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'ordinal'}\n          }\n        }]\n      });\n      assert.equal(model.children.length, 2);\n      model.parseScale();\n\n      assert.deepEqual(model.component.scales['x'].domains, [{\n          data: 'layer_0_main',\n          field: 'a',\n          sort: true\n        }, {\n          data: 'layer_1_main',\n          field: 'b',\n          sort: true\n        }]);\n    });\n\n    it('should union explicit and referenced domains', () => {\n      const model = parseLayerModel({\n        layer: [{\n          mark: 'point',\n          encoding: {\n            x: {scale: {domain: [1, 2, 3]}, field: 'b', type: 'ordinal'}\n          }\n        }, {\n          mark: 'point',\n          encoding: {\n            x: {field: 'b', type: 'ordinal'}\n          }\n        }]\n      });\n      model.parseScale();\n\n      assert.deepEqual(model.component.scales['x'].domains, [\n        [1, 2, 3],\n        {\n          data: 'layer_1_main',\n          field: 'b',\n          sort: true\n        }]);\n    });\n  });\n\n  describe('dual axis chart', () => {\n    const model = parseLayerModel({\n      layer: [{\n        mark: 'point',\n        encoding: {\n          x: {field: 'a', type: 'quantitative'}\n        }\n      }, {\n        mark: 'point',\n        encoding: {\n          x: {field: 'b', type: 'quantitative'}\n        }\n      }],\n      resolve: {\n        scale: {\n          x: 'independent'\n        }\n      }\n    });\n\n    assert.equal(model.children.length, 2);\n\n    it('should leave scales in children when set to be independent', () => {\n      model.parseScale();\n\n      assert.equal(model.component.scales['x'], undefined);\n      assert.deepEqual(model.children[0].component.scales['x'].domains, [{\n        data: 'layer_0_main',\n        field: 'a'\n      }]);\n      assert.deepEqual(model.children[1].component.scales['x'].domains, [{\n        data: 'layer_1_main',\n        field: 'b'\n      }]);\n    });\n\n    it('should create second axis on top', () => {\n      model.parseAxisAndHeader();\n\n      assert.equal(model.component.axes['x'].length, 2);\n      assert.equal(model.component.axes['x'][1].implicit.orient, 'top');\n    });\n  });\n});\n"]}