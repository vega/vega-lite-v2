{"version":3,"file":"compile.test.js","sourceRoot":"","sources":["../../../test/compile/compile.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\n\nimport * as log from '../../src/log';\n\nimport {compile} from '../../src/compile/compile';\n\n\ndescribe('compile/compile', function() {\n  it('should throw error for invalid spec', () => {\n    assert.throws(() => {\n      compile({} as any);\n    }, Error, log.message.INVALID_SPEC);\n  });\n\n  it('should return a spec with default top-level properties, size signals, data, marks, and title', () => {\n    const spec = compile({\n      \"data\": {\n        \"values\": [{\"a\": \"A\",\"b\": 28}]\n      },\n      \"title\": {\"text\": \"test\"},\n      \"mark\": \"point\",\n      \"encoding\": {}\n    }).spec;\n\n    assert.equal(spec.padding, 5);\n    assert.equal(spec.autosize, 'pad');\n    assert.equal(spec.width, 21);\n    assert.equal(spec.height, 21);\n    assert.deepEqual(spec.title, {text: 'test'});\n\n    assert.equal(spec.data.length, 1); // just source\n    assert.equal(spec.marks.length, 1); // just the root group\n  });\n\n  it('should return a spec with specified top-level properties, size signals, data and marks', () => {\n    const spec = compile({\n      \"padding\": 123,\n      \"data\": {\n        \"values\": [{\"a\": \"A\",\"b\": 28}]\n      },\n      \"mark\": \"point\",\n      \"encoding\": {}\n    }).spec;\n\n    assert.equal(spec.padding, 123);\n    assert.equal(spec.autosize, 'pad');\n    assert.equal(spec.width, 21);\n    assert.equal(spec.height, 21);\n\n    assert.equal(spec.data.length, 1); // just source.\n    assert.equal(spec.marks.length, 1); // just the root group\n  });\n\n  it('should use size signal for bar chart width', () => {\n    const spec = compile({\n      \"data\": {\"values\": [{\"a\": \"A\",\"b\": 28}]},\n      \"mark\": \"bar\",\n      \"encoding\": {\n        \"x\": {\"field\": \"a\", \"type\": \"ordinal\"},\n        \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\n      }\n    }).spec;\n\n    assert.deepEqual(spec.signals, [{\n      name: 'x_step',\n      value: 21\n    }, {\n      name: 'width',\n      update: `bandspace(domain('x').length, 0.1, 0.05) * x_step`\n    }]);\n    assert.equal(spec.height, 200);\n  });\n\n  it('should set resize to true if requested', () => {\n    const spec = compile({\n      \"autosize\": {\n        \"resize\": true\n      },\n      \"data\": {\"url\": \"foo.csv\"},\n      \"mark\": \"point\",\n      \"encoding\": {}\n    }).spec;\n\n    assert(spec.autosize.resize);\n  });\n\n  it('should set autosize to fit and containment if requested', () => {\n    const spec = compile({\n      \"autosize\": {\n        \"type\": \"fit\",\n        \"contains\": \"content\"\n      },\n      \"data\": {\"url\": \"foo.csv\"},\n      \"mark\": \"point\",\n      \"encoding\": {}\n    }).spec;\n\n    assert.deepEqual(spec.autosize, {type: 'fit', contains: 'content'});\n  });\n\n  it('should set autosize to fit if requested', () => {\n    const spec = compile({\n      \"autosize\": \"fit\",\n      \"data\": {\"url\": \"foo.csv\"},\n      \"mark\": \"point\",\n      \"encoding\": {}\n    }).spec;\n\n    assert.equal(spec.autosize, \"fit\");\n  });\n\n  it('warn if size is data driven and autosize is fit', log.wrap((localLogger) => {\n    const spec = compile({\n      \"data\": {\"values\": [{\"a\": \"A\",\"b\": 28}]},\n      \"mark\": \"bar\",\n      \"autosize\": \"fit\",\n      \"encoding\": {\n        \"x\": {\"field\": \"a\", \"type\": \"ordinal\"},\n        \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\n      }\n    }).spec;\n    assert.equal(localLogger.warns[0], log.message.CANNOT_FIX_RANGE_STEP_WITH_FIT);\n    assert.equal(spec.width, 200);\n    assert.equal(spec.height, 200);\n  }));\n\n  it('warn if trying to fit composed spec', log.wrap((localLogger) => {\n    const spec = compile({\n      \"data\": {\"values\": [{\"a\": \"A\",\"b\": 28}]},\n      \"autosize\": \"fit\",\n      \"vconcat\": [{\n        \"mark\": \"point\",\n        \"encoding\": {}\n      }]\n    }).spec;\n    assert.equal(localLogger.warns[0], log.message.FIT_NON_SINGLE);\n    assert.equal(spec.autosize, 'pad');\n  }));\n\n  it('should return title for a layered spec.', () => {\n    const spec = compile({\n      \"data\": {\n        \"values\": [{\"a\": \"A\",\"b\": 28}]\n      },\n      \"title\": {\"text\": \"test\"},\n      \"layer\": [{\n        \"mark\": \"point\",\n        \"encoding\": {}\n      }]\n    }).spec;\n    assert.deepEqual(spec.title, {text: 'test'});\n  });\n\n  it('should return title (string) for a layered spec.', () => {\n    const spec = compile({\n      \"data\": {\n        \"values\": [{\"a\": \"A\",\"b\": 28}]\n      },\n      \"title\": \"test\",\n      \"layer\": [{\n        \"mark\": \"point\",\n        \"encoding\": {}\n      }]\n    }).spec;\n    assert.deepEqual(spec.title, {text: 'test'});\n  });\n\n  it('should return title from a child of a layer spec if parent has no title.', () => {\n    const spec = compile({\n      \"data\": {\n        \"values\": [{\"a\": \"A\",\"b\": 28}]\n      },\n      \"layer\": [{\n        \"title\": {\"text\": \"test\"},\n        \"mark\": \"point\",\n        \"encoding\": {}\n      }]\n    }).spec;\n    assert.deepEqual(spec.title, {text: 'test'});\n  });\n\n  it('should return a title for a concat spec, throw warning if anchor is set to other values than \"start\" and automatically set anchor to \"start\".', log.wrap((localLogger) => {\n    const spec = compile({\n      \"data\": {\n        \"values\": [{\"a\": \"A\",\"b\": 28}]\n      },\n      \"title\": {\"text\": \"test\"},\n      \"hconcat\": [{\n        \"mark\": \"point\",\n        \"encoding\": {}\n      }],\n      \"config\": {\"title\": {\"anchor\": \"middle\"}}\n    }).spec;\n    assert.deepEqual(spec.title, {\n      text: 'test',\n      anchor: 'start' // We only support anchor as start for concat\n    });\n    assert.equal(localLogger.warns[0], log.message.cannotSetTitleAnchor('concat'));\n  }));\n\n  it('should return a title for a concat spec, automatically set anchor to \"start\", and augment the title with non-mark title config (e.g., offset).', () => {\n    const spec = compile({\n      \"data\": {\n        \"values\": [{\"a\": \"A\",\"b\": 28}]\n      },\n      \"title\": {\"text\": \"test\"},\n      \"hconcat\": [{\n        \"mark\": \"point\",\n        \"encoding\": {}\n      }],\n      \"config\": {\"title\": {\"offset\": 5}}\n    }).spec;\n    assert.deepEqual(spec.title, {\n      text: 'test',\n      anchor: 'start',\n      offset: 5\n    });\n  });\n\n  it('should not have title if there is no title.', () => {\n    const spec = compile({\n      \"data\": {\n        \"values\": [{\"a\": \"A\",\"b\": 28}]\n      },\n      \"hconcat\": [{\n        \"mark\": \"point\",\n        \"encoding\": {}\n      }],\n      \"config\": {\"title\": {\"offset\": 5}}\n    }).spec;\n    assert.isUndefined(spec.title);\n  });\n\n  it('should use provided config.', () => {\n    const spec = compile({\n      mark: \"point\",\n      data: {url: \"foo.csv\"},\n      encoding: {}\n    }, {config: {\n      background: \"blue\"\n    }}).spec;\n    assert.equal(spec.config.background, \"blue\");\n  });\n\n  it('should merge spec and provided config.', () => {\n    const spec = compile({\n      mark: \"point\",\n      data: {url: \"foo.csv\"},\n      encoding: {},\n      config: {\n        background: \"red\"\n      }\n    }, {config: {\n      background: \"blue\"\n    }}).spec;\n    assert.equal(spec.config.background, \"red\");\n  });\n\n  it('should return a spec with projections (implicit)', () => {\n    const spec = compile({\n      \"mark\": \"geoshape\",\n      \"data\": {\n        \"url\": \"data/us-10m.json\",\n        \"format\": {\n          \"type\": \"topojson\",\n          \"feature\": \"states\"\n        }\n      },\n      \"encoding\": {}\n    }).spec;\n    assert.isDefined(spec.projections);\n  });\n\n  it('should return a spec with projections (explicit)', () => {\n    const spec = compile({\n      \"mark\": \"geoshape\",\n      \"projection\": {\n        \"type\": \"albersUsa\"\n      },\n      \"data\": {\n        \"url\": \"data/us-10m.json\",\n        \"format\": {\n          \"type\": \"topojson\",\n          \"feature\": \"states\"\n        }\n      },\n      \"encoding\": {}\n    }).spec;\n    assert.isDefined(spec.projections);\n  });\n});\n"]}