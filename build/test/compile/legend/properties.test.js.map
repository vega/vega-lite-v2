{"version":3,"file":"properties.test.js","sourceRoot":"","sources":["../../../../test/compile/legend/properties.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAE9B,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,KAAK,EAAE,IAAI,EAAC,MAAM,sBAAsB,CAAC;AACjD,OAAO,KAAK,UAAU,MAAM,wCAAwC,CAAC;AAErE,QAAQ,CAAC,gBAAgB,EAAE;IACzB,QAAQ,CAAC,UAAU,EAAE;QACnB,EAAE,CAAC,sDAAsD,EAAE;YACzD,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,EAAC,MAAM,EAAE,CAAC,EAAC,IAAI,EAAE,IAAI,EAAC,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAC,CAAC,CAAC;YAEzG,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE;gBACvB,EAAC,QAAQ,EAAE,kCAAkC,EAAC;gBAC9C,EAAC,QAAQ,EAAE,kCAAkC,EAAC;aAC/C,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE;YACjD,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,EAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC,CAAC,CAAC;YAE7F,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE;QACjB,EAAE,CAAC,6CAA6C,EAAE;YAChD,IAAM,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;YAC/D,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE;YACnD,IAAM,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;YAC1D,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE;YACnD,IAAM,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;YAChE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE;YAChE,IAAM,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YACrD,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4EAA4E,EAAE;YAC/E,IAAM,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;YACxD,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2EAA2E,EAAE;YAC9E,IAAM,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;YACvD,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {COLOR, SIZE} from '../../../src/channel';\nimport * as properties from '../../../src/compile/legend/properties';\n\ndescribe('compile/legend', function() {\n  describe('values()', () => {\n    it('should return correct timestamp values for DateTimes', () => {\n      const values = properties.values({values: [{year: 1970}, {year: 1980}]}, {field: 'a', type: 'temporal'});\n\n      assert.deepEqual(values, [\n        {\"signal\": \"datetime(1970, 0, 1, 0, 0, 0, 0)\"},\n        {\"signal\": \"datetime(1980, 0, 1, 0, 0, 0, 0)\"},\n      ]);\n    });\n\n    it('should simply return values for non-DateTime', () => {\n      const values = properties.values({values: [1, 2, 3, 4]}, {field: 'a', type: 'quantitative'});\n\n      assert.deepEqual(values, [1,2,3,4]);\n    });\n\n  });\n\n  describe('type()', () => {\n    it('should return gradient type for color scale', () => {\n      const t = properties.type('quantitative', COLOR, 'sequential');\n      assert.equal(t, 'gradient');\n    });\n\n    it('should not return gradient type for size scale', () => {\n      const t = properties.type('quantitative', SIZE, 'linear');\n      assert.equal(t, undefined);\n    });\n\n    it('should return no type for color scale with bin', () => {\n      const t = properties.type('quantitative', COLOR, 'bin-ordinal');\n      assert.equal(t, undefined);\n    });\n\n    it('should return gradient type for color scale with time scale', () => {\n      const t = properties.type('temporal', COLOR, 'time');\n      assert.equal(t, 'gradient');\n    });\n\n    it('should return no type for color scale with ordinal scale and temporal type', () => {\n      const t = properties.type('temporal', COLOR, 'ordinal');\n      assert.equal(t, undefined);\n    });\n\n    it('should return no type for color scale with ordinal scale and ordinal type', () => {\n      const t = properties.type('ordinal', COLOR, 'ordinal');\n      assert.equal(t, undefined);\n    });\n  });\n});\n"]}