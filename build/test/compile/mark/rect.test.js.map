{"version":3,"file":"rect.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/rect.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\nimport {assert} from 'chai';\nimport {rect} from '../../../src/compile/mark/rect';\nimport * as log from '../../../src/log';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('Mark: Rect', function() {\n  describe('simple vertical', function() {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"data\": {\"url\": 'data/cars.json'},\n      \"mark\": \"rect\",\n      \"encoding\": {\n        \"x\": {\"field\": \"Origin\", \"type\": \"nominal\"},\n        \"y\": {\"type\": \"quantitative\", \"field\": 'Acceleration', \"aggregate\": \"mean\"}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar, with y from zero to field value and x band', function() {\n      assert.deepEqual(props.x, {scale: 'x', field: 'Origin'});\n      assert.deepEqual(props.width, {scale: 'x', band: true});\n      assert.deepEqual(props.y, {scale: 'y', field: 'mean_Acceleration'});\n      assert.deepEqual(props.y2, {scale: 'y', value: 0});\n      assert.isUndefined(props.height);\n    });\n  });\n\n  describe('simple horizontal', function() {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"data\": {\"url\": 'data/cars.json'},\n      \"mark\": \"rect\",\n      \"encoding\": {\n        \"y\": {\"field\": \"Origin\", \"type\": \"nominal\"},\n        \"x\": {\"aggregate\": \"mean\", \"field\": 'Acceleration', \"type\": \"quantitative\"}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar from zero to field value and y band', function() {\n      assert.deepEqual(props.y, {scale: 'y', field: 'Origin'});\n      assert.deepEqual(props.height, {scale: 'y', band: true});\n      assert.deepEqual(props.x, {scale: 'x', field: 'mean_Acceleration'});\n      assert.deepEqual(props.x2, {scale: 'x', value: 0});\n      assert.isUndefined(props.width);\n    });\n  });\n\n  describe('simple horizontal with size field', function() {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"data\": {\"url\": 'data/cars.json'},\n      \"mark\": \"rect\",\n      \"encoding\": {\n        \"y\": {\"field\": \"Origin\", \"type\": \"nominal\"},\n        \"x\": {\"aggregate\": \"mean\", \"field\": 'Acceleration', \"type\": \"quantitative\"},\n        \"size\": {\"aggregate\": \"mean\", \"field\": \"Horsepower\", \"type\": \"quantitative\"}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    log.wrap((localLogger) => {\n      it('should draw bar from zero to field value and with band value for x/width', function() {\n        assert.deepEqual(props.y, {scale: 'y', field: 'Origin'});\n        assert.deepEqual(props.height, {scale: 'y', band: true});\n        assert.deepEqual(props.x, {scale: 'x', field: 'mean_Acceleration'});\n        assert.deepEqual(props.x2, {scale: 'x', value: 0});\n        assert.isUndefined(props.width);\n      });\n\n      it('should throw warning', ()=> {\n        assert.equal(localLogger.warns[0], log.message.cannotApplySizeToNonOrientedMark('rect'));\n      });\n    });\n  });\n\n  describe('horizontal binned', function() {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"data\": {\"url\": 'data/cars.json'},\n      \"mark\": \"rect\",\n      \"encoding\": {\n        \"y\": {\"bin\": true, \"field\": 'Horsepower', \"type\": \"quantitative\"},\n        \"x\": {\"aggregate\": \"mean\", \"field\": 'Acceleration', \"type\": \"quantitative\"}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar with y and y2', function() {\n      assert.deepEqual(props.y2, {scale: 'y', field: 'bin_maxbins_10_Horsepower'});\n      assert.deepEqual(props.y, {scale: 'y', field: 'bin_maxbins_10_Horsepower_end'});\n      assert.isUndefined(props.height);\n    });\n  });\n\n  describe('vertical binned', function() {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"data\": {\"url\": 'data/cars.json'},\n      \"mark\": \"rect\",\n      \"encoding\": {\n        \"x\": {\"bin\": true, \"field\": 'Horsepower', \"type\": \"quantitative\"},\n        \"y\": {\"aggregate\": \"mean\", \"field\": 'Acceleration', \"type\": \"quantitative\"}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw bar with x and x2', function() {\n      assert.deepEqual(props.x2, {scale: 'x', field: 'bin_maxbins_10_Horsepower'});\n      assert.deepEqual(props.x, {scale: 'x', field: 'bin_maxbins_10_Horsepower_end'});\n      assert.isUndefined(props.width);\n    });\n  });\n\n\n  describe('simple ranged', function() {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"data\": {\"url\": 'data/cars.json'},\n      \"mark\": \"rect\",\n      \"encoding\": {\n        \"y\": {\"aggregate\": \"min\", \"field\": 'Horsepower', \"type\": \"quantitative\"},\n        \"y2\": {\"aggregate\": \"max\", \"field\": 'Horsepower', \"type\": \"quantitative\"},\n        \"x\": {\"aggregate\": \"min\", \"field\": 'Acceleration', \"type\": \"quantitative\"},\n        \"x2\": {\"aggregate\": \"max\", \"field\": 'Acceleration', \"type\": \"quantitative\"}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw rectangle with x, x2, y, y2', function() {\n      assert.deepEqual(props.x, {scale: 'x', field: 'min_Acceleration'});\n      assert.deepEqual(props.x2, {scale: 'x', field: 'max_Acceleration'});\n      assert.deepEqual(props.y, {scale: 'y', field: 'min_Horsepower'});\n      assert.deepEqual(props.y2, {scale: 'y', field: 'max_Horsepower'});\n    });\n  });\n\n  describe('simple heatmap', function() {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"data\": {\"url\": \"data/cars.json\"},\n      \"mark\": \"rect\",\n      \"encoding\": {\n        \"y\": {\"field\": \"Origin\", \"type\": \"ordinal\"},\n        \"x\": {\"field\": \"Cylinders\", \"type\": \"ordinal\"},\n        \"color\": {\"aggregate\": \"mean\", \"field\": \"Horsepower\", \"type\": \"quantitative\"}\n      }\n    });\n    const props = rect.encodeEntry(model);\n\n    it('should draw rect with x and y bands', function() {\n      assert.deepEqual(props.x, {scale: 'x', field: 'Cylinders'});\n      assert.deepEqual(props.width, {scale: 'x', band: true});\n      assert.deepEqual(props.y, {scale: 'y', field: 'Origin'});\n      assert.deepEqual(props.height, {scale: 'y', band: true});\n    });\n  });\n});\n"]}