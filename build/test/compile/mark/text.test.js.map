{"version":3,"file":"text.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/text.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\nimport {assert} from 'chai';\n\nimport {X, Y} from '../../../src/channel';\nimport {text} from '../../../src/compile/mark/text';\nimport {UnitModel} from '../../../src/compile/unit';\nimport {NormalizedUnitSpec, TopLevelSpec} from '../../../src/spec';\nimport {parseModelWithScale, parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\n\ndescribe('Mark: Text', function() {\n  describe('with stacked x', function() {\n    // This is a simplified example for stacked text.\n    // In reality this will be used as stacked's overlayed marker\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"mark\": \"text\",\n      \"encoding\": {\n        \"x\": {\"aggregate\": \"sum\", \"field\": \"a\", \"type\": \"quantitative\"},\n        \"color\": {\"field\": \"b\", \"type\": \"ordinal\"}\n      },\n      \"data\": {\"url\": \"data/barley.json\"},\n      \"config\": {\"stack\":  \"zero\"}\n    });\n\n    const props = text.encodeEntry(model);\n\n    it('should use stack_end on x', function() {\n      assert.deepEqual(props.x, {scale: X, field: 'sum_a_end'});\n    });\n  });\n\n  describe('with stacked y', function() {\n    // This is a simplified example for stacked text.\n    // In reality this will be used as stacked's overlayed marker\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"mark\": \"text\",\n      \"encoding\": {\n        \"y\": {\"aggregate\": \"sum\", \"field\": \"a\", \"type\": \"quantitative\"},\n        \"color\": {\"field\": \"b\", \"type\": \"ordinal\"}\n      },\n      \"data\": {\"url\": \"data/barley.json\"},\n      \"config\": {\"stack\":  \"zero\"}\n    });\n\n    const props = text.encodeEntry(model);\n\n    it('should use stack_end on y', function() {\n      assert.deepEqual(props.y, {scale: Y, field: 'sum_a_end'});\n    });\n  });\n\n  describe('with quantitative and format', function() {\n    const spec: NormalizedUnitSpec = {\n      \"mark\": \"text\",\n      \"encoding\": {\n        \"text\": {\"field\": \"foo\", \"type\": \"quantitative\", \"format\": \"d\"}\n      }\n    };\n    const model = parseUnitModelWithScaleAndLayoutSize(spec);\n    const props = text.encodeEntry(model);\n\n    it('should use number template', function() {\n      assert.deepEqual(props.text, {signal: `format(datum[\"foo\"], \"d\")`});\n    });\n  });\n\n  describe('with binned quantitative', function() {\n    const spec: NormalizedUnitSpec = {\n      \"mark\": \"text\",\n      \"encoding\": {\n        \"text\": {\"bin\": true, \"field\": \"foo\", \"type\": \"quantitative\", \"format\": \"d\"}\n      }\n    };\n    const model = parseUnitModelWithScaleAndLayoutSize(spec);\n    const props = text.encodeEntry(model);\n\n    it('should output correct bin range', function() {\n      assert.deepEqual(props.text, {signal: `datum[\"bin_maxbins_10_foo\"] === null || isNaN(datum[\"bin_maxbins_10_foo\"]) ? \"null\" : format(datum[\"bin_maxbins_10_foo\"], \"d\") + \" - \" + format(datum[\"bin_maxbins_10_foo_end\"], \"d\")`});\n    });\n  });\n\n  describe('with temporal', function() {\n    const spec: NormalizedUnitSpec = {\n      \"mark\": \"text\",\n      \"encoding\": {\n        \"text\": {\"field\": \"foo\", \"type\": \"temporal\"}\n      }\n    };\n    const model = parseUnitModelWithScaleAndLayoutSize(spec);\n    const props = text.encodeEntry(model);\n\n    it('should use date template', function() {\n      assert.deepEqual(props.text, {signal: `timeFormat(datum[\"foo\"], '')`});\n    });\n  });\n\n  describe('with x, y, text (ordinal)', function () {\n    const spec: NormalizedUnitSpec = {\n      \"mark\": \"text\",\n      \"encoding\": {\n        \"x\": {\"field\": \"Acceleration\", \"type\": \"ordinal\"},\n        \"y\": {\"field\": \"Displacement\", \"type\": \"quantitative\"},\n        \"text\": {\"field\": \"Origin\", \"type\": \"ordinal\"},\n      },\n      \"data\": {\"url\": \"data/cars.json\"}\n    };\n    const model = parseUnitModelWithScaleAndLayoutSize(spec);\n    const props = text.encodeEntry(model);\n\n    it('should scale on x', function() {\n      assert.deepEqual(props.x, {scale: X, field: 'Acceleration'});\n    });\n    it('should scale on y', function() {\n      assert.deepEqual(props.y, {scale: Y, field: 'Displacement'});\n    });\n\n    it('should be centered', function() {\n      assert.deepEqual(props.align, {value: \"center\"});\n    });\n\n    it('should map text without template', function() {\n      assert.deepEqual(props.text, {signal: `''+datum[\"Origin\"]`});\n    });\n  });\n\n  describe('with size in mark def', function () {\n    const spec: NormalizedUnitSpec = {\n      \"mark\": {type: \"text\", size: 5},\n      \"encoding\": {\n        \"text\": {\"field\": \"Origin\", \"type\": \"ordinal\"},\n      },\n      \"data\": {\"url\": \"data/cars.json\"}\n    };\n    const model = parseUnitModelWithScaleAndLayoutSize(spec);\n    const props = text.encodeEntry(model);\n\n    it('should map size to fontSize', function () {\n      assert.deepEqual(props.fontSize, {value: 5});\n    });\n  });\n\n  describe('with row, column, text, color, and size', function() {\n    const spec: TopLevelSpec = {\n        \"mark\": \"text\",\n        \"encoding\": {\n          \"row\": {\"field\": \"Origin\", \"type\": \"ordinal\"},\n          \"column\": {\"field\": \"Cylinders\", \"type\": \"ordinal\"},\n          \"text\": {\"field\": \"Acceleration\", \"type\": \"quantitative\", \"aggregate\": \"mean\"},\n          \"color\": {\"field\": \"Acceleration\", \"type\": \"quantitative\", \"aggregate\": \"mean\"},\n          \"size\": {\"field\": \"Acceleration\", \"type\": \"quantitative\", \"aggregate\": \"mean\"}\n        },\n        \"data\": {\"url\": \"data/cars.json\"}\n      };\n    const model = parseModelWithScale(spec);\n    model.parseLayoutSize();\n\n    const childModel = model.children[0] as UnitModel;\n    const props = text.encodeEntry(childModel);\n\n    it('should fit the view on x', function() {\n      assert.deepEqual(props.x, {signal: 'child_width', mult: 0.5});\n    });\n\n    it('should center on y', function() {\n      assert.deepEqual(props.y, {\n        mult: 0.5,\n        signal: 'child_height'\n      });\n    });\n\n    it('should map text to expression', function() {\n      assert.deepEqual(props.text, {\n        signal: `format(datum[\"mean_Acceleration\"], \"\")`\n      });\n    });\n\n    it('should map color to fill', function() {\n      assert.deepEqual(props.fill, {\n        scale: 'color',\n        field: 'mean_Acceleration'\n      });\n    });\n\n    it('should map size to fontSize', function() {\n      assert.deepEqual(props.fontSize, {\n        scale: 'size',\n        field: 'mean_Acceleration'\n      });\n    });\n  });\n});\n"]}