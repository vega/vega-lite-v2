{"version":3,"file":"valueref.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/valueref.test.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAC9B,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAE5B,OAAO,EAAC,SAAS,EAAE,QAAQ,EAAC,MAAM,oCAAoC,CAAC;AAIvE,QAAQ,CAAC,uBAAuB,EAAE;IAChC,QAAQ,CAAC,WAAW,EAAE;QACpB,IAAM,OAAO,GAAY;YACvB,MAAM,EAAE,OAAO;YACf,UAAU,EAAE,GAAG;SAChB,CAAC;QACF,EAAE,CAAC,6DAA6D,EAAE;YAChE,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,oFAAoF,EAAE;YACvF,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,SAAS,CAAC,CAAC;QAEnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE;QACrB,EAAE,CAAC,uCAAuC,EAAE;YAC1C,IAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,OAAO,EAAC,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YACxF,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,EAAC,KAAK,EAAE,OAAO,EAAC,EAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,wCAAwC,EAAE;YAC3C,IAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YACzF,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC,EAAC,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:quotemark */\nimport {assert} from 'chai';\n\nimport {getOffset, midPoint} from '../../../src/compile/mark/valueref';\nimport {MarkDef} from '../../../src/mark';\n\n\ndescribe('compile/mark/valueref', () => {\n  describe(\"getOffset\", function () {\n    const markDef: MarkDef = {\n      \"type\": \"point\",\n      \"x2Offset\": 100\n    };\n    it('should correctly get the offset value for the given channel', function () {\n      assert.equal(getOffset('x2', markDef), 100);\n    });\n    it('should return undefined when the offset value for the given channel is not defined', function () {\n      assert.equal(getOffset('x', markDef), undefined);\n\n    });\n  });\n\n  describe('midPoint()', () => {\n    it('should return correct value for width', () => {\n      const ref = midPoint('x', {value: 'width'}, undefined, undefined, undefined, undefined);\n      assert.deepEqual(ref, {field: {group: 'width'}});\n    });\n    it('should return correct value for height', () => {\n      const ref = midPoint('y', {value: 'height'}, undefined, undefined, undefined, undefined);\n      assert.deepEqual(ref, {field: {group: 'height'}});\n    });\n  });\n});\n"]}