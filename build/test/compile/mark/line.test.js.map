{"version":3,"file":"line.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/line.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable quotemark */\n\nimport {assert} from 'chai';\n\nimport {COLOR, X, Y} from '../../../src/channel';\nimport {line} from '../../../src/compile/mark/line';\nimport * as log from '../../../src/log';\nimport {parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('Mark: Line', function() {\n\n  describe('with x, y', function() {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"data\": {\"url\": \"data/barley.json\"},\n      \"mark\": \"line\",\n      \"encoding\": {\n        \"x\": {\"field\": \"year\", \"type\": \"ordinal\"},\n        \"y\": {\"field\": \"yield\", \"type\": \"quantitative\"}\n      }\n    });\n    const props = line.encodeEntry(model);\n\n    it('should have scale for x', function() {\n      assert.deepEqual(props.x, {scale: X, field: 'year'});\n    });\n\n    it('should have scale for y', function() {\n      assert.deepEqual(props.y, {scale: Y, field: 'yield'});\n    });\n  });\n\n  describe('with x, y, color', function () {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"data\": {\"url\": \"data/barley.json\"},\n      \"mark\": \"line\",\n      \"encoding\": {\n        \"x\": {\"field\": \"year\", \"type\": \"ordinal\"},\n        \"y\": {\"field\": \"yield\", \"type\": \"quantitative\"},\n        \"color\": {\"field\": \"Acceleration\", \"type\": \"quantitative\"}\n      }\n    });\n    const props = line.encodeEntry(model);\n\n    it('should have scale for color', function () {\n      assert.deepEqual(props.stroke, {scale: COLOR, field: 'Acceleration'});\n    });\n  });\n\n\n  describe('with x, y, size', function () {\n    it('should have scale for size', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        \"data\": {\"url\": \"data/barley.json\"},\n        \"mark\": \"line\",\n        \"encoding\": {\n          \"x\": {\"field\": \"year\", \"type\": \"ordinal\"},\n          \"y\": {\"field\": \"yield\", \"type\": \"quantitative\", \"aggregate\": \"mean\"},\n          \"size\": {\"field\": \"variety\", \"type\": \"nominal\"}\n        }\n      });\n      const props = line.encodeEntry(model);\n\n      assert.deepEqual(props.strokeWidth, {scale: 'size', field: 'variety'});\n    });\n\n    it('should drop aggregate size field', log.wrap((localLogger) => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        \"data\": {\"url\": \"data/barley.json\"},\n        \"mark\": \"line\",\n        \"encoding\": {\n          \"x\": {\"field\": \"year\", \"type\": \"ordinal\"},\n          \"y\": {\"field\": \"yield\", \"type\": \"quantitative\", \"aggregate\": \"mean\"},\n          \"size\": {\"field\": \"Acceleration\", \"type\": \"quantitative\", \"aggregate\": \"mean\"}\n        }\n      });\n      const props = line.encodeEntry(model);\n\n      // If size field is dropped, then strokeWidth only have value\n      assert.isNotOk(props.strokeWidth && props.strokeWidth['scale']);\n      assert.equal(localLogger.warns[0], log.message.LINE_WITH_VARYING_SIZE);\n    }));\n  });\n\n  describe('with stacked y', function() {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"data\": {\"url\": \"data/barley.json\"},\n      \"mark\": \"line\",\n      \"encoding\": {\n        \"x\": {\"field\": \"year\", \"type\": \"ordinal\"},\n        \"y\": {\"field\": \"yield\", \"type\": \"quantitative\", \"aggregate\": \"sum\"},\n        \"color\": {\"field\": \"a\", \"type\": \"nominal\"}\n      },\n      \"config\": {\"stack\":  \"zero\"}\n    });\n    const props = line.encodeEntry(model);\n\n    it('should use y_end', function() {\n      assert.deepEqual(props.y, {scale: Y, field: 'sum_yield_end'});\n    });\n  });\n\n  describe('with stacked x', function() {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"data\": {\"url\": \"data/barley.json\"},\n      \"mark\": \"line\",\n      \"encoding\": {\n        \"y\": {\"field\": \"year\", \"type\": \"ordinal\"},\n        \"x\": {\"field\": \"yield\", \"type\": \"quantitative\", \"aggregate\": \"sum\"},\n        \"color\": {\"field\": \"a\", \"type\": \"nominal\"}\n      },\n      \"config\": {\"stack\":  \"zero\"}\n    });\n    const props = line.encodeEntry(model);\n\n    it('should use x_end', function() {\n      assert.deepEqual(props.x, {scale: X, field: 'sum_yield_end'});\n    });\n  });\n\n  describe('with x', function() {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"mark\": \"line\",\n      \"encoding\": {\"x\": {\"field\": \"year\", \"type\": \"ordinal\"}},\n      \"data\": {\"url\": \"data/barley.json\"}\n    });\n\n    const props = line.encodeEntry(model);\n\n    it('should be centered on y', function() {\n      assert.deepEqual(props.y, {\n        mult: 0.5,\n        signal: 'height'\n      });\n    });\n\n    it('should scale on x', function() {\n      assert.deepEqual(props.x, {scale: X, field: 'year'});\n    });\n  });\n\n  describe('with y', function() {\n    const model = parseUnitModelWithScaleAndLayoutSize({\n      \"mark\": \"line\",\n      \"encoding\": {\"y\": {\"field\": \"year\", \"type\": \"ordinal\"}},\n      \"data\": {\"url\": \"data/barley.json\"}\n    });\n\n    const props = line.encodeEntry(model);\n\n    it('should be centered on x', function() {\n      assert.deepEqual(props.x, {\n        mult: 0.5,\n        signal: 'width'\n      });\n    });\n\n    it('should scale on y', function() {\n      assert.deepEqual(props.y, {scale: Y, field: 'year'});\n    });\n  });\n});\n"]}