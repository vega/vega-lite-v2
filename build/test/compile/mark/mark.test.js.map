{"version":3,"file":"mark.test.js","sourceRoot":"","sources":["../../../../test/compile/mark/mark.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\n\nimport {assert} from 'chai';\nimport {COLOR, DETAIL, OPACITY, SIZE, UNIT_CHANNELS} from '../../../src/channel';\nimport {getSort, parseMarkGroup, pathGroupingFields} from '../../../src/compile/mark/mark';\nimport {UnitModel} from '../../../src/compile/unit';\nimport {GEOSHAPE} from '../../../src/mark';\nimport {parseFacetModel, parseUnitModel, parseUnitModelWithScale, parseUnitModelWithScaleAndLayoutSize} from '../../util';\n\ndescribe('Mark', function() {\n  describe('parseMarkGroup', function() {\n    // PATH\n    describe('Multi-series Line', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        \"mark\": {\"type\": \"line\", \"style\": \"trend\"},\n        \"encoding\": {\n          \"x\": {\"field\": \"date\", \"type\": \"temporal\", \"axis\": {\"format\": \"%Y\"}},\n          \"y\": {\"field\": \"price\", \"type\": \"quantitative\"},\n          \"color\": {\"field\": \"symbol\", \"type\": \"nominal\"}\n        }\n      });\n      it('should have a facet directive and a nested mark group that uses the faceted data.', () => {\n        const markGroup = parseMarkGroup(model)[0];\n        assert.equal(markGroup.name, 'pathgroup');\n        assert.deepEqual(markGroup.from, {\n          facet: {\n            name: 'faceted_path_main',\n            data: 'main',\n            groupby: ['symbol']\n          }\n        });\n        const submarkGroup = markGroup.marks[0];\n        assert.equal(submarkGroup.name, 'marks');\n        assert.equal(submarkGroup.type, 'line');\n        assert.deepEqual(submarkGroup.style, ['line', 'trend']);\n        assert.equal(submarkGroup.from.data, 'faceted_path_main');\n      });\n\n      it('should not have post encoding transform', () => {\n        const markGroup = parseMarkGroup(model)[0];\n        assert.equal(markGroup.name, 'pathgroup');\n        assert.deepEqual(markGroup.from, {\n          facet: {\n            name: 'faceted_path_main',\n            data: 'main',\n            groupby: ['symbol']\n          }\n        });\n        const submarkGroup = markGroup.marks[0];\n        assert.isUndefined(submarkGroup.transform);\n      });\n    });\n\n    describe('Single Line', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        \"mark\": \"line\",\n        \"encoding\": {\n          \"x\": {\"field\": \"date\", \"type\": \"temporal\", \"axis\": {\"format\": \"%Y\"}},\n          \"y\": {\"field\": \"price\", \"type\": \"quantitative\"}\n        }\n      });\n      it('should have mark group with proper data and key', () => {\n        const markGroup = parseMarkGroup(model)[0];\n        assert.equal(markGroup.name, 'marks');\n        assert.equal(markGroup.type, 'line');\n        assert.equal(markGroup.from.data, 'main');\n      });\n\n      it('should not have post encoding transform', () => {\n        const markGroup = parseMarkGroup(model);\n        assert.isUndefined(markGroup[0].transform);\n      });\n\n      // NON-PATH\n    });\n    describe('Points with key', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        \"mark\": \"point\",\n        \"encoding\": {\n          \"x\": {\"field\": \"date\", \"type\": \"temporal\", \"axis\": {\"format\": \"%Y\"}},\n          \"y\": {\"field\": \"price\", \"type\": \"quantitative\"},\n          \"key\": {\"field\": \"k\", \"type\": \"quantitative\"}\n        }\n      });\n      it('should have mark group with proper data and key', () => {\n        const markGroup = parseMarkGroup(model)[0];\n        assert.equal(markGroup.type, 'symbol');\n        assert.equal(markGroup.key.field, 'k');\n        assert.equal(markGroup.from.data, 'main');\n      });\n\n      it('should not have post encoding transform', () => {\n        const markGroup = parseMarkGroup(model);\n        assert.isUndefined(markGroup[0].transform);\n      });\n    });\n\n    it('Geoshape should have post encoding transform', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        \"mark\": \"geoshape\",\n        \"projection\": {\n          \"type\": \"albersUsa\"\n        },\n        \"data\": {\n          \"url\": \"data/us-10m.json\",\n          \"format\": {\n            \"type\": \"topojson\",\n            \"feature\": \"states\"\n          }\n        },\n        \"encoding\": {}\n      });\n      const markGroup = parseMarkGroup(model);\n      assert.isDefined(markGroup[0].transform);\n      assert.equal(markGroup[0].transform[0].type, GEOSHAPE);\n    });\n\n    describe('Aggregated Bar with a color with binned x', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        \"mark\": \"bar\",\n        \"encoding\": {\n          \"x\": {\"type\": \"quantitative\", \"field\": \"Cost__Other\", \"aggregate\": \"sum\"},\n          \"y\": {\"bin\": true, \"type\": \"quantitative\", \"field\": \"Cost__Total_$\"},\n          \"color\": {\"type\": \"ordinal\", \"field\": \"Effect__Amount_of_damage\"}\n        }\n      });\n      it('should use main stacked data source', () => {\n        const markGroup = parseMarkGroup(model);\n        assert.equal(markGroup[0].from.data, 'main');\n        assert.equal(markGroup[0].style, 'bar');\n      });\n      it('should not have post encoding transform', () => {\n        const markGroup = parseMarkGroup(model);\n        assert.isUndefined(markGroup[0].transform);\n      });\n    });\n\n    describe('Faceted aggregated Bar with a color with binned x', () => {\n      const model = parseFacetModel({\n        facet: {\n          row: {field: 'a', type: 'nominal'}\n        },\n        spec: {\n          \"mark\": \"bar\",\n          \"encoding\": {\n            \"x\": {\"type\": \"quantitative\", \"field\": \"Cost__Other\", \"aggregate\": \"sum\"},\n            \"y\": {\"bin\": true, \"type\": \"quantitative\", \"field\": \"Cost__Total_$\"},\n            \"color\": {\"type\": \"ordinal\", \"field\": \"Effect__Amount_of_damage\"}\n          }\n        }\n      });\n      it('should use faceted data source', () => {\n        model.parseScale();\n        model.parseLayoutSize();\n\n        const markGroup = parseMarkGroup(model.child as UnitModel);\n        assert.equal(markGroup[0].from.data, 'child_main');\n      });\n\n      it('should not have post encoding transform', () => {\n        model.parseScale();\n        model.parseLayoutSize();\n\n        const markGroup = parseMarkGroup(model.child as UnitModel);\n        assert.isUndefined(markGroup[0].transform);\n      });\n    });\n\n    describe('Aggregated bar', () => {\n      const model = parseUnitModelWithScaleAndLayoutSize({\n        \"mark\": \"bar\",\n        \"encoding\": {\n          \"x\": {\"type\": \"quantitative\", \"field\": \"Cost__Other\", \"aggregate\": \"sum\"},\n          \"y\": {\"bin\": true, \"type\": \"quantitative\", \"field\": \"Cost__Total_$\"}\n        }\n      });\n\n      it('should use main aggregated data source', () => {\n        const markGroup = parseMarkGroup(model);\n        assert.equal(markGroup[0].from.data, 'main');\n      });\n\n      it('should not have post encoding transform', () => {\n        const markGroup = parseMarkGroup(model);\n        assert.isUndefined(markGroup[0].transform);\n      });\n    });\n  });\n\n  describe('getSort', () => {\n    it('should order by order field', function () {\n      const model = parseUnitModel({\n        \"data\": {\"url\": \"data/driving.json\"},\n        \"mark\": \"line\",\n        \"encoding\": {\n          \"x\": {\"field\": \"miles\", \"type\": \"quantitative\", \"scale\": {\"zero\": false}},\n          \"y\": {\"field\": \"gas\", \"type\": \"quantitative\", \"scale\": {\"zero\": false}},\n          \"order\": {\"field\": \"year\", \"type\": \"temporal\"}\n        }\n      });\n      assert.deepEqual(getSort(model), {\n        field: ['datum[\\\"year\\\"]'],\n        order: ['ascending']\n      });\n    });\n\n    it('should have no sort if order = {value: null}', function () {\n      const model = parseUnitModel({\n        \"data\": {\"url\": \"data/driving.json\"},\n        \"mark\": \"line\",\n        \"encoding\": {\n          \"x\": {\"field\": \"miles\", \"type\": \"quantitative\", \"scale\": {\"zero\": false}},\n          \"y\": {\"field\": \"gas\", \"type\": \"quantitative\", \"scale\": {\"zero\": false}},\n          \"order\": {\"value\": null}\n        }\n      });\n      assert.equal(getSort(model), undefined);\n    });\n\n    it('should order by x by default if x is the dimension', function () {\n      const model = parseUnitModelWithScale({\n        \"data\": {\"url\": \"data/movies.json\"},\n        \"mark\": \"line\",\n        \"encoding\": {\n          \"x\": {\n            \"bin\": {\"maxbins\": 10},\n            \"field\": \"IMDB_Rating\",\n            \"type\": \"quantitative\"\n          },\n          \"color\": {\n            \"field\": \"Source\",\n            \"type\": \"nominal\"\n          },\n          \"y\": {\n            \"aggregate\": \"count\",\n            \"type\": \"quantitative\"\n          }\n        }\n      });\n      assert.deepEqual(getSort(model), {\n        field: 'datum[\\\"bin_maxbins_10_IMDB_Rating\\\"]',\n        order: 'descending'\n      });\n    });\n\n    it('should not order by a missing dimension', function () {\n      const model = parseUnitModelWithScale({\n        \"data\": {\"url\": \"data/movies.json\"},\n        \"mark\": \"line\",\n        \"encoding\": {\n          \"color\": {\n            \"field\": \"Source\",\n            \"type\": \"nominal\"\n          },\n          \"y\": {\n            \"aggregate\": \"count\",\n            \"type\": \"quantitative\"\n          }\n        }\n      });\n      assert.deepEqual(getSort(model), undefined);\n    });\n  });\n\n  describe('pathGroupingFields()', () => {\n    it('should return fields for unaggregate detail, color, size, opacity fieldDefs.', () => {\n      for (const channel of [DETAIL, COLOR, SIZE, OPACITY]) {\n        assert.deepEqual(\n          pathGroupingFields('line', {[channel]: {field: 'a', type: 'nominal'}}),\n          ['a']\n        );\n      }\n    });\n\n    it('should not return a field for size of a trail mark.', () => {\n      assert.deepEqual(\n        pathGroupingFields('trail', {size: {field: 'a', type: 'nominal'}}),\n        []\n      );\n    });\n\n    it('should not return fields for aggregate detail, color, size, opacity fieldDefs.', () => {\n      for (const channel of [DETAIL, COLOR, SIZE, OPACITY]) {\n        assert.deepEqual(\n          pathGroupingFields('line', {[channel]: {aggregate: 'mean', field: 'a', type: 'nominal'}}),\n          [],\n          channel\n        );\n      }\n    });\n\n    it('should return condition detail fields for color, size, shape', () => {\n      for (const channel of [COLOR, SIZE, OPACITY]) {\n        assert.deepEqual(\n          pathGroupingFields('line', {[channel]: {\n            condition: {selection: 'sel', field: 'a', type: 'nominal'}\n          }}),\n          ['a']\n        );\n      }\n    });\n\n    it('should not return errors for all channels', () => {\n      for (const channel of UNIT_CHANNELS) {\n        assert.doesNotThrow(\n          () => {\n            pathGroupingFields('line', {\n              [channel]: {field: 'a', type: 'nominal'}\n            });\n          }\n        );\n      }\n    });\n  });\n});\n"]}