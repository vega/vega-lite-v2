{"version":3,"file":"validate.test.js","sourceRoot":"","sources":["../../test/validate.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\nimport {AREA, BAR, LINE, TEXT} from '../src/mark';\nimport {getEncodingMappingError} from '../src/validate';\n\ndescribe('vl.validate', function() {\n  describe('getEncodingMappingError()', function () {\n    it('should return no error for valid specs', function() {\n      assert.isNull(getEncodingMappingError({\n        mark: BAR,\n        encoding: {\n          x: {field: 'a', type: 'quantitative'}\n        }\n      }));\n\n      assert.isNull(getEncodingMappingError({\n        mark: LINE,\n        encoding: {\n          x: {field: 'b', type: 'quantitative'},\n          y: {field: 'a', type: 'quantitative'}\n        }\n      }));\n\n      assert.isNull(getEncodingMappingError({\n        mark: AREA,\n        encoding: {\n          x: {field: 'a', type: 'quantitative'},\n          y: {field: 'b', type: 'quantitative'}\n        }\n      }));\n    });\n\n    it('should return error for invalid specs', function() {\n      assert.isNotNull(getEncodingMappingError({\n        mark: LINE,\n        encoding: {\n          x: {field: 'b', type: 'quantitative'} // missing y\n        }\n      }));\n\n      assert.isNotNull(getEncodingMappingError({\n        mark: AREA,\n        encoding: {\n          y: {field: 'b', type: 'quantitative'} // missing x\n        }\n      }));\n\n      assert.isNotNull(getEncodingMappingError({\n        mark: TEXT,\n        encoding: {\n          y: {field: 'b', type: 'quantitative'} // missing text\n        }\n      }));\n\n      assert.isNotNull(getEncodingMappingError({\n        mark: LINE,\n        encoding: {\n          shape: {field: 'b', type: 'quantitative'} // using shape with line\n        }\n      }));\n\n      assert.isNotNull(getEncodingMappingError({\n        mark: AREA,\n        encoding: {\n          shape: {field: 'b', type: 'quantitative'} // using shape with area\n        }\n      }));\n\n      assert.isNotNull(getEncodingMappingError({\n        mark: BAR,\n        encoding: {\n          shape: {field: 'b', type: 'quantitative'} // using shape with bar\n        }\n      }));\n    });\n  });\n});\n"]}