{"version":3,"file":"predicate.test.js","sourceRoot":"","sources":["../../test/predicate.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {assert} from 'chai';\n\nimport {expression, fieldFilterExpression, isFieldEqualPredicate, isFieldLTEPredicate, isFieldOneOfPredicate, isFieldRangePredicate} from '../src/predicate';\nimport {TimeUnit} from '../src/timeunit';\n\ndescribe('filter', () => {\n  const equalFilter = {field: 'color', equal: 'red'};\n  const oneOfFilter = {field: 'color', oneOf: ['red', 'yellow']};\n  const rangeFilter = {field: 'x', range: [0, 5]};\n  const exprFilter = 'datum[\"x\"]===5';\n  const lessThanEqualsFilter = {field: 'x', lte: 'z'};\n\n  describe('isEqualFilter', () => {\n    it('should return true for an equal filter', () => {\n      assert.isTrue(isFieldEqualPredicate(equalFilter));\n    });\n\n    it('should return false for other filters', () => {\n      [oneOfFilter, rangeFilter, exprFilter].forEach((filter) => {\n        assert.isFalse(isFieldEqualPredicate(filter));\n      });\n    });\n  });\n\n  describe('islessThanEqualsFilter', () => {\n    it('should return true for less than equals to filter', () => {\n      assert.isTrue(isFieldLTEPredicate(lessThanEqualsFilter));\n    });\n\n    it('should return false for other filters', () => {\n      [equalFilter, oneOfFilter, rangeFilter, exprFilter].forEach((filter) => {\n        assert.isFalse(isFieldLTEPredicate(filter));\n      });\n    });\n  });\n\n  describe('isOneOfFilter', () => {\n    it('should return true for an in filter', () => {\n      assert.isTrue(isFieldOneOfPredicate(oneOfFilter));\n    });\n\n    it('should return false for other filters', () => {\n      [equalFilter, rangeFilter, exprFilter].forEach((filter) => {\n        assert.isFalse(isFieldOneOfPredicate(filter));\n      });\n    });\n  });\n\n  describe('isRangeFilter', () => {\n    it('should return true for a range filter', () => {\n      assert.isTrue(isFieldRangePredicate(rangeFilter));\n    });\n\n    it('should return false for other filters', () => {\n      [oneOfFilter, equalFilter, exprFilter].forEach((filter) => {\n        assert.isFalse(isFieldRangePredicate(filter));\n      });\n    });\n  });\n\n  describe('expression', () => {\n    it('should return a correct expression for an EqualFilter', () => {\n      const expr = expression(null, {field: 'color', equal: 'red'});\n      assert.equal(expr, 'datum[\"color\"]===\"red\"');\n    });\n\n    it('should return correct expression for lessThan', () => {\n      const expr = expression(null, {field: 'x', lt: 1});\n      assert.equal(expr, 'datum[\"x\"]<1');\n    });\n\n    it('should return correct expression for greaterThan', () => {\n      const expr = expression(null, {field: 'x', gt: 'aardvark'});\n      assert.equal(expr, 'datum[\"x\"]>\"aardvark\"');\n    });\n\n    it('should return correct expression for lessThanEquals', () => {\n      const expr = expression(null, {field: 'x', lte: 'zyzzyva'});\n      assert.equal(expr, 'datum[\"x\"]<=\"zyzzyva\"');\n    });\n\n    it('should return correct expression for greaterThanEquals', () => {\n      const expr = expression(null, {field: 'x', gte: 1});\n      assert.equal(expr, 'datum[\"x\"]>=1');\n    });\n\n    it('should return a correct expression for an EqualFilter with datetime object', () => {\n      const expr = expression(null, {\n        field: 'date',\n        equal: {\n          month: 'January'\n        }\n      });\n      assert.equal(expr, 'datum[\"date\"]===time(datetime(0, 0, 1, 0, 0, 0, 0))');\n    });\n\n    it('should return a correct expression for an EqualFilter with time unit and datetime object', () => {\n      const expr = expression(null, {\n        timeUnit: TimeUnit.MONTH,\n        field: 'date',\n        equal: {\n          month: 'January'\n        }\n      });\n      assert.equal(expr, 'time(datetime(0, month(datum[\"date\"]), 1, 0, 0, 0, 0))===time(datetime(0, 0, 1, 0, 0, 0, 0))');\n    });\n\n    it('should return a correct expression for an EqualFilter with datetime object', () => {\n      const expr = expression(null, {\n        timeUnit: TimeUnit.MONTH,\n        field: 'date',\n        equal: 'January'\n      });\n      assert.equal(expr, 'time(datetime(0, month(datum[\"date\"]), 1, 0, 0, 0, 0))===time(datetime(0, 0, 1, 0, 0, 0, 0))');\n    });\n\n\n    it('should return a correct expression for an lessThanFilter with datetime object', () => {\n      const expr = expression(null, {\n        field: 'date',\n        lt: {\n          month: 'February'\n        }\n      });\n      assert.equal(expr, 'datum[\"date\"]<time(datetime(0, 1, 1, 0, 0, 0, 0))');\n    });\n\n    it('should return a correct expression for an greaterThanFilter with time unit and datetime object', () => {\n      const expr = expression(null, {\n        timeUnit: TimeUnit.MONTH,\n        field: 'date',\n        gt: {\n          month: 'January'\n        }\n      });\n      assert.equal(expr, 'time(datetime(0, month(datum[\"date\"]), 1, 0, 0, 0, 0))>time(datetime(0, 0, 1, 0, 0, 0, 0))');\n    });\n\n    it('should return a correct expression for an greaterThanEqualsFilter with datetime object', () => {\n      const expr = expression(null, {\n        timeUnit: TimeUnit.MONTH,\n        field: 'date',\n        gte: 'January'\n      });\n      assert.equal(expr, 'time(datetime(0, month(datum[\"date\"]), 1, 0, 0, 0, 0))>=time(datetime(0, 0, 1, 0, 0, 0, 0))');\n    });\n\n    it('should return a correct expression for an InFilter', () => {\n      const expr = expression(null, {field: 'color', oneOf: ['red', 'yellow']});\n      assert.equal(expr, 'indexof([\"red\",\"yellow\"], datum[\"color\"]) !== -1');\n    });\n\n    it('should return a correct expression for a RangeFilter', () => {\n      const expr = expression(null, {field: 'x', range: [0, 5]});\n      assert.equal(expr, 'inrange(datum[\"x\"], [0, 5])');\n    });\n\n    it('should return a correct expression for a RangeFilter with no lower bound', () => {\n      const expr = expression(null, {field: 'x', range: [null, 5]});\n      assert.equal(expr, 'datum[\"x\"] <= 5');\n    });\n\n    it('should return a correct expression for a RangeFilter with no upper bound', () => {\n      const expr = expression(null, {field: 'x', range: [0, null]});\n      assert.equal(expr, 'datum[\"x\"] >= 0');\n    });\n\n\n    it('should return true for a RangeFilter with no bound', () => {\n      const expr = expression(null, {field: 'x', range: [null, null]});\n      assert.equal(expr, 'true');\n    });\n\n    it('should return a correct expression for an expression filter', () => {\n      const expr = expression(null, 'datum[\"x\"]===5');\n      assert.equal(expr, 'datum[\"x\"]===5');\n    });\n  });\n\n  it('generates expressions for composed filters', () => {\n    let expr = expression(null, {not: {field: 'color', equal: 'red'}});\n    assert.equal(expr, '!(datum[\"color\"]===\"red\")');\n\n    expr = expression(null, {and: [\n      {field: 'color', equal: 'red'},\n      {field: 'x', range: [0, 5]}\n    ]});\n\n    assert.equal(expr, '(datum[\"color\"]===\"red\") && (inrange(datum[\"x\"], [0, 5]))');\n\n    expr = expression(null, {and: [\n      {field: 'color', oneOf: ['red', 'yellow']},\n      {or: [\n        {field: 'x', range: [0, null]},\n        'datum.price > 10',\n        {not: 'datum[\"x\"]===5'}\n      ]}\n    ]});\n\n    assert.equal(expr, '(indexof([\"red\",\"yellow\"], datum[\"color\"]) !== -1) && ' +\n      '((datum[\"x\"] >= 0) || (datum.price > 10) || (!(datum[\"x\"]===5)))');\n  });\n\n\n  describe('fieldFilterExpression', () => {\n    it('generates a range predicate using inequalities when useInRange=false', () => {\n      const expr = fieldFilterExpression({field: 'x', range: [0, 5]}, false);\n      assert.equal(expr, 'datum[\"x\"] >= 0 && datum[\"x\"] <= 5');\n    });\n  });\n});\n"]}