{"version":3,"file":"stack.test.js","sourceRoot":"","sources":["../../test/stack.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:quotemark */\nimport {assert} from 'chai';\nimport {AggregateOp} from 'vega';\n\nimport {DETAIL, X, Y} from '../src/channel';\nimport * as log from '../src/log';\nimport {AREA, BAR, PRIMITIVE_MARKS, RECT} from '../src/mark';\nimport {ScaleType} from '../src/scale';\nimport {isStacked, NormalizedUnitSpec, TopLevel} from '../src/spec';\nimport {stack, STACK_BY_DEFAULT_MARKS, STACKABLE_MARKS, StackOffset} from '../src/stack';\n\ndescribe('stack', () => {\n  const NON_STACKABLE_MARKS = [RECT];\n\n  it('should be disabled for non-stackable marks with at least of of the stack channel', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize', null, 'none'] as StackOffset[]) {\n      NON_STACKABLE_MARKS.forEach((nonStackableMark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"data\": {\"url\": \"data/barley.json\"},\n          \"mark\": nonStackableMark,\n          \"encoding\": {\n            \"x\": {\"aggregate\": \"sum\", \"field\": \"yield\", \"type\": \"quantitative\"},\n            \"y\": {\"field\": \"variety\", \"type\": \"nominal\"},\n            \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n          },\n          \"config\": {\n            \"stack\": stacked\n          }\n        };\n        assert.isNull(stack(spec.mark, spec.encoding, spec.config.stack));\n        assert.isFalse(isStacked(spec));\n      });\n    }\n  });\n\n  it('should be allowed for raw plot', () => {\n    STACKABLE_MARKS.forEach((mark) => {\n      const spec: TopLevel<NormalizedUnitSpec> = {\n        \"data\": {\"url\": \"data/barley.json\"},\n        \"mark\": mark,\n        \"encoding\": {\n          \"x\": {\"field\": \"yield\", \"type\": \"quantitative\", \"stack\": \"zero\"},\n          \"y\": {\"field\": \"variety\", \"type\": \"nominal\"},\n          \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n        }\n      };\n      const stackProps = stack(spec.mark, spec.encoding, undefined);\n      assert.equal(stackProps.fieldChannel, 'x');\n      assert.isTrue(isStacked(spec));\n    });\n  });\n\n\n  it('should prioritize axis with stack', () => {\n    STACKABLE_MARKS.forEach((mark) => {\n      const spec: TopLevel<NormalizedUnitSpec> = {\n        \"data\": {\"url\": \"data/barley.json\"},\n        \"mark\": mark,\n        \"encoding\": {\n          \"x\": {\"field\": \"yield\", \"type\": \"quantitative\", \"stack\": \"zero\"},\n          \"y\": {\"field\": \"variety\", \"type\": \"quantitative\"},\n          \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n        }\n      };\n      const stackProps = stack(spec.mark, spec.encoding, undefined);\n      assert.equal(stackProps.fieldChannel, 'x');\n      assert.isTrue(isStacked(spec));\n    });\n  });\n\n  it('should always be disabled if there is no stackby channel', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize', null, 'none'] as StackOffset[]) {\n      PRIMITIVE_MARKS.forEach((mark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"data\": {\"url\": \"data/barley.json\"},\n          \"mark\": mark,\n          \"encoding\": {\n            \"x\": {\"aggregate\": \"sum\", \"field\": \"yield\", \"type\": \"quantitative\"},\n            \"y\": {\"field\": \"variety\", \"type\": \"nominal\"}\n          },\n          \"config\": {\n            \"stack\": stacked\n          }\n        };\n        assert.isNull(stack(spec.mark, spec.encoding, spec.config.stack));\n        assert.isFalse(isStacked(spec));\n      });\n    }\n  });\n\n  it('should always be disabled if the stackby channel is aggregated', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize', null, 'none'] as StackOffset[]) {\n      PRIMITIVE_MARKS.forEach((mark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"data\": {\"url\": \"data/barley.json\"},\n          \"mark\": mark,\n          \"encoding\": {\n            \"x\": {\"aggregate\": \"sum\", \"field\": \"yield\", \"type\": \"quantitative\"},\n            \"y\": {\"field\": \"variety\", \"type\": \"nominal\"},\n            \"color\": {\"aggregate\": \"count\", \"type\": \"quantitative\"}\n          },\n          \"config\": {\n            \"stack\": stacked\n          }\n        };\n        assert.isNull(stack(spec.mark, spec.encoding, spec.config.stack));\n        assert.isFalse(isStacked(spec));\n      });\n    }\n  });\n\n  it('should always be disabled if the stackby channel is identical to y', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize', null, 'none'] as StackOffset[]) {\n      PRIMITIVE_MARKS.forEach((mark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"data\": {\"url\": \"data/barley.json\"},\n          \"mark\": mark,\n          \"encoding\": {\n            \"x\": {\"aggregate\": \"sum\", \"field\": \"yield\", \"type\": \"quantitative\"},\n            \"y\": {\"field\": \"variety\", \"type\": \"nominal\"},\n            \"color\": {\"field\": \"variety\", \"type\": \"nominal\"},\n          },\n          \"config\": {\n            \"stack\": stacked\n          }\n        };\n        assert.isNull(stack(spec.mark, spec.encoding, spec.config.stack));\n        assert.isFalse(isStacked(spec));\n      });\n    }\n  });\n\n  it('can enabled if one of the stackby channels is not aggregated', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize'] as StackOffset[]) {\n      const marks = stacked === undefined ? STACK_BY_DEFAULT_MARKS : STACKABLE_MARKS;\n      marks.forEach((mark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"data\": {\"url\": \"data/barley.json\"},\n          \"mark\": mark,\n          \"encoding\": {\n            \"x\": {\"aggregate\": \"sum\", \"field\": \"yield\", \"type\": \"quantitative\"},\n            \"y\": {\"field\": \"variety\", \"type\": \"nominal\"},\n            \"color\": {\"aggregate\": \"count\", \"type\": \"quantitative\"},\n            \"detail\": {\"field\": \"site\", \"type\": \"nominal\"}\n          },\n          \"config\": {\n            \"stack\": stacked\n          }\n        };\n        const _stack = stack(spec.mark, spec.encoding, spec.config.stack);\n        assert.isOk(_stack);\n        assert.isTrue(isStacked(spec));\n        assert.equal(_stack.stackBy[0].channel, DETAIL);\n      });\n    }\n  });\n\n  it('can enabled if one of the stackby channels is not aggregated', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize'] as StackOffset[]) {\n      const marks = stacked === undefined ? STACK_BY_DEFAULT_MARKS : STACKABLE_MARKS;\n      marks.forEach((mark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"data\": {\"url\": \"data/barley.json\"},\n          \"mark\": mark,\n          \"encoding\": {\n            \"x\": {\"aggregate\": \"sum\", \"field\": \"yield\", \"type\": \"quantitative\", \"stack\": stacked},\n            \"y\": {\"field\": \"variety\", \"type\": \"nominal\"},\n            \"color\": {\"aggregate\": \"count\", \"type\": \"quantitative\"},\n            \"detail\": {\"field\": \"site\", \"type\": \"nominal\"}\n          }\n        };\n\n        const _stack = stack(spec.mark, spec.encoding, undefined);\n        assert.isOk(_stack);\n        assert.isTrue(isStacked(spec));\n        assert.equal(_stack.stackBy[0].channel, DETAIL);\n      });\n    }\n  });\n\n  it('should always be disabled if both x and y are aggregate', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize', null, 'none'] as StackOffset[]) {\n      PRIMITIVE_MARKS.forEach((mark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"data\": {\"url\": \"data/barley.json\"},\n          \"mark\": mark,\n          \"encoding\": {\n            \"x\": {\"aggregate\": \"sum\", \"field\": \"yield\", \"type\": \"quantitative\"},\n            \"y\": {\"aggregate\": \"count\", \"type\": \"quantitative\"},\n            \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n          },\n          \"config\": {\n            \"stack\": stacked\n          }\n        };\n        assert.isNull(stack(spec.mark, spec.encoding, spec.config.stack));\n        assert.isFalse(isStacked(spec));\n      });\n    }\n  });\n\n  it('should always be disabled if neither x nor y is aggregate or stack', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize', null, 'none'] as StackOffset[]) {\n      PRIMITIVE_MARKS.forEach((mark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"data\": {\"url\": \"data/barley.json\"},\n          \"mark\": mark,\n          \"encoding\": {\n            \"x\": {\"field\": \"variety\", \"type\": \"nominal\"},\n            \"y\": {\"field\": \"variety\", \"type\": \"nominal\"},\n            \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n          },\n          \"config\": {\n            \"stack\": stacked\n          }\n        };\n        assert.isNull(stack(spec.mark, spec.encoding, spec.config.stack));\n        assert.isFalse(isStacked(spec));\n      });\n    }\n  });\n\n  it('should always be disabled if there is both x and x2', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize'] as StackOffset[]) {\n      const marks = stacked === undefined ? STACK_BY_DEFAULT_MARKS : STACKABLE_MARKS;\n      marks.forEach((mark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"mark\": mark,\n          \"encoding\": {\n            \"x\": {\"field\": \"a\", \"type\": \"quantitative\", \"aggregate\": \"sum\"},\n            \"x2\": {\"field\": \"a\", \"type\": \"quantitative\", \"aggregate\": \"sum\"},\n            \"y\": {\"field\": \"variety\", \"type\": \"nominal\"},\n            \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n          },\n          \"config\": {\n            \"stack\": stacked\n          }\n        };\n        assert.isNull(stack(spec.mark, spec.encoding, spec.config.stack));\n        assert.isFalse(isStacked(spec));\n      });\n    }\n  });\n\n  it('should always be disabled if there is both y and y2', () => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize'] as StackOffset[]) {\n      const marks = stacked === undefined ? STACK_BY_DEFAULT_MARKS : STACKABLE_MARKS;\n      marks.forEach((mark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"mark\": mark,\n          \"encoding\": {\n            \"y\": {\"field\": \"a\", \"type\": \"quantitative\", \"aggregate\": \"sum\"},\n            \"y2\": {\"field\": \"a\", \"type\": \"quantitative\", \"aggregate\": \"sum\"},\n            \"x\": {\"field\": \"variety\", \"type\": \"nominal\"},\n            \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n          },\n          \"config\": {\n            \"stack\": stacked\n          }\n        };\n        assert.isNull(stack(spec.mark, spec.encoding, spec.config.stack));\n        assert.isFalse(isStacked(spec));\n      });\n    }\n  });\n\n  it('should always be warned if the aggregated axis has non-linear scale', log.wrap((localLogger) => {\n    for (const stacked of [undefined, 'center', 'zero', 'normalize'] as StackOffset[]) {\n      [ScaleType.LOG, ScaleType.POW, ScaleType.SQRT].forEach((scaleType) => {\n        const marks = stacked === undefined ? STACK_BY_DEFAULT_MARKS : STACKABLE_MARKS;\n        marks.forEach((mark) => {\n          const spec: TopLevel<NormalizedUnitSpec> = {\n            \"data\": {\"url\": \"data/barley.json\"},\n            \"mark\": mark,\n            \"encoding\": {\n              \"x\": {\"field\": \"a\", \"type\": \"quantitative\", \"aggregate\": \"sum\", \"scale\": {\"type\": scaleType}},\n              \"y\": {\"field\": \"variety\", \"type\": \"nominal\"},\n              \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n            },\n            \"config\": {\n              \"stack\": stacked\n            }\n          };\n          assert.isNotNull(stack(spec.mark, spec.encoding, spec.config.stack));\n          assert.isTrue(isStacked(spec));\n          const warns = localLogger.warns;\n          assert.equal(warns[warns.length-1], log.message.cannotStackNonLinearScale(scaleType));\n        });\n      });\n    }\n  }));\n\n  it('should throws warning if the aggregated axis has a non-summative aggregate', log.wrap((localLogger) => {\n    for (const stackOffset of [undefined, 'center', 'zero', 'normalize'] as StackOffset[]) {\n      for (const aggregate of ['average', 'variance', 'q3'] as AggregateOp[]) {\n        const marks = stackOffset === undefined ? STACK_BY_DEFAULT_MARKS : STACKABLE_MARKS;\n        marks.forEach((mark) => {\n          const spec: TopLevel<NormalizedUnitSpec> = {\n            \"data\": {\"url\": \"data/barley.json\"},\n            \"mark\": mark,\n            \"encoding\": {\n              \"x\": {\n                aggregate,\n                stack: stackOffset,\n                \"field\": \"a\",\n                \"type\": \"quantitative\"\n              },\n              \"y\": {\"field\": \"variety\", \"type\": \"nominal\"},\n              \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n            }\n          };\n          assert.isTrue(isStacked(spec));\n          const warns = localLogger.warns;\n          assert.equal(warns[warns.length-1], log.message.stackNonSummativeAggregate(aggregate));\n        });\n      }\n    }\n  }));\n\n  describe('stack().groupbyChannel, .fieldChannel', () => {\n    it('should be correct for horizontal', () => {\n      [BAR, AREA].forEach((stackableMark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"data\": {\"url\": \"data/barley.json\"},\n          \"mark\": stackableMark,\n          \"encoding\": {\n            \"x\": {\"aggregate\": \"sum\", \"field\": \"yield\", \"type\": \"quantitative\"},\n            \"y\": {\"field\": \"variety\", \"type\": \"nominal\"},\n            \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n          }\n        };\n        const _stack = stack(spec.mark, spec.encoding, undefined);\n        assert.equal(_stack.fieldChannel, X);\n        assert.equal(_stack.groupbyChannel, Y);\n        assert.isTrue(isStacked(spec));\n      });\n    });\n\n    it('should be correct for horizontal (single)', () => {\n      [BAR, AREA].forEach((stackableMark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"data\": {\"url\": \"data/barley.json\"},\n          \"mark\": stackableMark,\n          \"encoding\": {\n            \"x\": {\"aggregate\": \"sum\", \"field\": \"yield\", \"type\": \"quantitative\"},\n            \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n          }\n        };\n        const _stack = stack(spec.mark, spec.encoding, undefined);\n        assert.equal(_stack.fieldChannel, X);\n        assert.equal(_stack.groupbyChannel, null);\n        assert.isTrue(isStacked(spec));\n      });\n    });\n\n    it('should be correct for vertical', () => {\n      [BAR, AREA].forEach((stackableMark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"data\": {\"url\": \"data/barley.json\"},\n          \"mark\": stackableMark,\n          \"encoding\": {\n            \"y\": {\"aggregate\": \"sum\", \"field\": \"yield\", \"type\": \"quantitative\"},\n            \"x\": {\"field\": \"variety\", \"type\": \"nominal\"},\n            \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n          }\n        };\n        const _stack = stack(spec.mark, spec.encoding, undefined);\n        assert.equal(_stack.fieldChannel, Y);\n        assert.equal(_stack.groupbyChannel, X);\n        assert.isTrue(isStacked(spec));\n      });\n    });\n\n    it('should be correct for vertical (single)', () => {\n      [BAR, AREA].forEach((stackableMark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"data\": {\"url\": \"data/barley.json\"},\n          \"mark\": stackableMark,\n          \"encoding\": {\n            \"y\": {\"aggregate\": \"sum\", \"field\": \"yield\", \"type\": \"quantitative\"},\n            \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n          }\n        };\n        const _stack = stack(spec.mark, spec.encoding, undefined);\n        assert.equal(_stack.fieldChannel, Y);\n        assert.equal(_stack.groupbyChannel, null);\n        assert.isTrue(isStacked(spec));\n      });\n    });\n  });\n\n  describe('stack().offset', () => {\n    it('should be zero for stackable marks with at least of of the stack channel if stacked is unspecified', () => {\n      [BAR, AREA].forEach((stackableMark) => {\n        const spec: TopLevel<NormalizedUnitSpec> = {\n          \"data\": {\"url\": \"data/barley.json\"},\n          \"mark\": stackableMark,\n          \"encoding\": {\n            \"x\": {\"aggregate\": \"sum\", \"field\": \"yield\", \"type\": \"quantitative\"},\n            \"y\": {\"field\": \"variety\", \"type\": \"nominal\"},\n            \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n          }\n        };\n        assert.equal(stack(spec.mark, spec.encoding, undefined).offset, 'zero');\n        assert.isTrue(isStacked(spec));\n      });\n    });\n\n    it('should be the specified stacked for stackable marks with at least one of the stack channel', () => {\n      for (const stacked of ['center', 'zero', 'normalize'] as StackOffset[]) {\n        [BAR, AREA].forEach((stackableMark) => {\n          const spec: TopLevel<NormalizedUnitSpec> = {\n            \"data\": {\"url\": \"data/barley.json\"},\n            \"mark\": stackableMark,\n            \"encoding\": {\n              \"x\": {\"aggregate\": \"sum\", \"field\": \"yield\", \"type\": \"quantitative\"},\n              \"y\": {\"field\": \"variety\", \"type\": \"nominal\"},\n              \"color\": {\"field\": \"site\", \"type\": \"nominal\"}\n            },\n            \"config\": {\n              \"stack\": stacked\n            }\n          };\n          assert.equal(stack(spec.mark, spec.encoding, spec.config.stack).offset, stacked);\n          assert.equal(isStacked(spec), true);\n        });\n      }\n    });\n  });\n});\n"]}