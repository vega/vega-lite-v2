{"version":3,"file":"encoding.test.js","sourceRoot":"","sources":["../../test/encoding.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAC,iBAAiB,EAAC,MAAM,iBAAiB,CAAC;AAClD,OAAO,KAAK,GAAG,MAAM,YAAY,CAAC;AAElC,QAAQ,CAAC,MAAM,EAAE;IACf,QAAQ,CAAC,mBAAmB,EAAE;QAC5B,EAAE,CAAC,8CAA8C,EAAE;YACjD,IAAM,QAAQ,GAAG,iBAAiB,CAAC;gBACjC,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,EAAC;gBAClC,CAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAC;gBACjC,EAAE,EAAE,EAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAC;gBACpC,EAAE,EAAE,EAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAC;aACpC,EAAE,MAAM,CAAC,CAAC;YAEX,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;gBACzB,SAAS,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;gBAC7C,QAAQ,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;gBAC5C,UAAU,EAAE,EAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,cAAc,EAAC;gBAC/C,SAAS,EAAE,EAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,cAAc,EAAC;aAC/C,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,CAAC,IAAI,CAAC,UAAC,MAAM;YACnE,IAAM,QAAQ,GAAG,iBAAiB,CAAC;gBACjC,KAAK,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;gBACzC,IAAI,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;aACzC,EAAE,MAAM,CAAC,CAAC;YAEX,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;gBACzB,IAAI,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;aACzC,CAAC,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC,CAAC;QAEJ,EAAE,CAAC,kDAAkD,EAAE,GAAG,CAAC,IAAI,CAAC,UAAC,MAAM;YACrE,IAAM,QAAQ,GAAG,iBAAiB,CAAC;gBACjC,KAAK,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;gBACzC,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;aAC3C,EAAE,MAAM,CAAC,CAAC;YAEX,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;gBACzB,MAAM,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAc,EAAC;aAC3C,CAAC,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {assert} from 'chai';\nimport {normalizeEncoding} from '../src/encoding';\nimport * as log from '../src/log';\n\ndescribe('axis', () => {\n  describe('normalizeEncoding', () => {\n    it('should convert lat and long type to channels', () => {\n      const encoding = normalizeEncoding({\n        x: {field: 'a', type: 'longitude'},\n        y: {field: 'b', type: 'latitude'},\n        x2: {field: 'a2', type: 'longitude'},\n        y2: {field: 'b2', type: 'latitude'}\n      }, 'rule');\n\n      assert.deepEqual(encoding, {\n        longitude: {field: 'a', type: 'quantitative'},\n        latitude: {field: 'b', type: 'quantitative'},\n        longitude2: {field: 'a2', type: 'quantitative'},\n        latitude2: {field: 'b2', type: 'quantitative'}\n      });\n    });\n\n    it('should drop color channel if fill is specified', log.wrap((logger) => {\n      const encoding = normalizeEncoding({\n        color: {field: 'a', type: 'quantitative'},\n        fill: {field: 'b', type: 'quantitative'}\n      }, 'rule');\n\n      assert.deepEqual(encoding, {\n        fill: {field: 'b', type: 'quantitative'}\n      });\n      assert.equal(logger.warns[0], log.message.droppingColor('encoding', {fill: true}));\n    }));\n\n    it('should drop color channel if stroke is specified', log.wrap((logger) => {\n      const encoding = normalizeEncoding({\n        color: {field: 'a', type: 'quantitative'},\n        stroke: {field: 'b', type: 'quantitative'}\n      }, 'rule');\n\n      assert.deepEqual(encoding, {\n        stroke: {field: 'b', type: 'quantitative'}\n      });\n      assert.equal(logger.warns[0], log.message.droppingColor('encoding', {stroke: true}));\n    }));\n  });\n});\n"]}